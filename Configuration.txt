# 🚀 ORPHANAGEHUB PROJECT CONFIGURATION
Generated: 2025-09-06 09:05:40
Working Directory: /home/jared/OrphanageHub_PAT2025
Python Version: 3.13.3
Java Version: openjdk version "21.0.7" 2025-04-15
Maven Version: [1mApache Maven 3.9.9[m

================================================================================
## 1. PROJECT STRUCTURE
================================================================================
```
.
├── AdminDashboardPanel.java
├── all_code_based_on_all_commit.py
├── all_java_code.txt
├── backup_duplicates
│   ├── OrphanageHubApp_project_root.java
│   ├── OrphanageHubApp_root_package.java
│   └── OrphanageHubApp_service.java
├── build_output.log
├── collect.txt
├── commit_outputs
│   ├── commit_5629b843.md
│   ├── commit_62a3c469.md
│   ├── commit_b8c09b86.md
│   └── commit_eb6c6c23.md
├── compile_errors.log
├── compile_errors_new.log
├── compile_output.log
├── Configuration.txt
├── context.txt
├── db
│   ├── details_database.txt
│   ├── OrphanageHub.accdb
│   └── template.accdb
├── DonorDashboardPanel.java
├── DriverTest.java
├── errors_to_review.txt
├── final_test.sh
├── fix_java_errors.sh
├── fix_pom.sh
├── fix_python_scripts.sh
├── fix_spotbugs.sh
├── FIX_SUMMARY.md
├── full_compile.log
├── geo-cache
├── google_checks.xml
├── grouped_errors.txt
├── HomePanel.java
├── info.txt
├── javac.20250814_035926.args
├── javac.20250814_035927.args
├── javac.20250814_035928.args
├── LoginPanel.java
├── logs
├── Makefile
├── mvnw
├── mvnw.cmd
├── nbactions.xml
├── OrphanageDashboardPanel.java
├── pom.xml
├── pom.xml.backup
├── README.md
├── RegistrationPanel.java
├── release
├── requirements.txt
├── restoreguis.py
├── restore.txt
├── revert.txt
├── run_and_monitor.sh
├── run_complete.sh
├── scripts
│   ├── db_manager.py
│   ├── doctor_chimera.py
│   ├── fix_all_panels.sh
│   ├── fix_errors.py
│   ├── fix_syntax.py
│   ├── geo_cache.py
│   ├── log_analyzer.py
│   ├── parse_errors.py
│   ├── quick_patch.sh
│   ├── refactor_logging.py
│   ├── requirements.txt
│   ├── sanitize_sources.py
│   ├── section_build.py
│   ├── smart.py
│   └── verify_setup.py
├── spotbugs-exclude.xml
├── src
│   ├── all_code.txt
│   ├── all_code.txt.bak
│   ├── all_source_code.txt
│   ├── export_all_code.sh
│   ├── main
│   │   ├── java
│   │   └── resources
│   ├── Makefile
│   ├── pom.xml
│   ├── src
│   │   ├── main
│   │   └── test
│   └── test
│       ├── java
│       └── resources
├── TIB_js-studiocomm_6.21.3_linux_x86_64.tgz
├── updateConfig.py
├── updateConfig.txt
└── VolunteerDashboardPanel.java

18 directories, 79 files
```

================================================================================
## 2. BUILD CONFIGURATION
================================================================================

### File: pom.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.orphanagehub</groupId>
    <artifactId>OrphanageHub</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>OrphanageHub</name>
    <description>Comprehensive Orphanage Management System</description>
    <inceptionYear>2024</inceptionYear>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <maven.compiler.release>17</maven.compiler.release>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
        <project.build.year>${maven.build.timestamp}</project.build.year>
        
        <!-- Dependency versions -->
        <junit.version>5.10.2</junit.version>
        <slf4j.version>2.0.13</slf4j.version>
        <logback.version>1.5.6</logback.version>
        <javafx.version>21</javafx.version>
        <jackson.version>2.17.1</jackson.version>
        
        <!-- Plugin versions -->
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.2.5</maven-surefire-plugin.version>
        <maven-shade-plugin.version>3.6.0</maven-shade-plugin.version>
        <maven-exec-plugin.version>3.3.0</maven-exec-plugin.version>
        <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
        <dependency-check-maven.version>9.2.0</dependency-check-maven.version>
        <versions-maven-plugin.version>2.16.2</versions-maven-plugin.version>
        
        <!-- SonarQube properties -->
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.coverage.jacoco.xmlReportPaths>${project.basedir}/target/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
    </properties>
    
    <dependencies>
        <!-- Location/Geocoding -->
        <dependency>
            <groupId>org.locationtech.jts</groupId>
            <artifactId>jts-core</artifactId>
            <version>1.19.0</version>
        </dependency>
        
        <!-- Email/Notifications -->
        <dependency>
            <groupId>jakarta.mail</groupId>
            <artifactId>jakarta.mail-api</artifactId>
            <version>2.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.angus</groupId>
            <artifactId>angus-mail</artifactId>
            <version>2.0.3</version>
            <scope>runtime</scope>
        </dependency>
        
        <!-- DB Management/Pooling -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>5.1.0</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
        </dependency>
        <dependency>
            <groupId>net.sf.ucanaccess</groupId>
            <artifactId>ucanaccess</artifactId>
            <version>5.0.1</version>
        </dependency>
        
        <!-- Reporting -->
        <dependency>
            <groupId>net.sf.jasperreports</groupId>
            <artifactId>jasperreports</artifactId>
            <version>6.21.3</version>
        </dependency>
        
        <!-- JSON Processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        
        <!-- Validation -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>8.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.expressly</groupId>
            <artifactId>expressly</artifactId>
            <version>5.0.0</version>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Functional Programming -->
        <dependency>
            <groupId>io.vavr</groupId>
            <artifactId>vavr</artifactId>
            <version>0.10.4</version>
        </dependency>
        <dependency>
            <groupId>org.pcollections</groupId>
            <artifactId>pcollections</artifactId>
            <version>4.0.2</version>
        </dependency>
        
        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Security -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <dependency>
            <groupId>org.owasp.encoder</groupId>
            <artifactId>encoder</artifactId>
            <version>1.2.3</version>
        </dependency>
        
        <!-- Utilities -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.14.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>33.2.1-jre</version>
        </dependency>
        
        <!-- JavaFX (Optional - for modern GUI) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
            <optional>true</optional>
        </dependency>
        
        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.12.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.26.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <!-- Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>17</release>
                    <compilerArgs>
                        <arg>-parameters</arg>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            
            <!-- Surefire Plugin for Testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <argLine>@{argLine} -Xmx1024m</argLine>
                    <includes>
                        <include>**/*Test.java</include>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
            
            <!-- JaCoCo Code Coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.70</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Shade Plugin for Fat JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <minimizeJar>false</minimizeJar>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.orphanagehub.gui.OrphanageHubApp</mainClass>
                                    <manifestEntries>
                                        <Multi-Release>true</Multi-Release>
                                        <Built-By>${user.name}</Built-By>
                                        <Build-Time>${maven.build.timestamp}</Build-Time>
                                        <Implementation-Version>${project.version}</Implementation-Version>
                                        <Implementation-Title>${project.name}</Implementation-Title>
                                    </manifestEntries>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"/>
                            </transformers>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <exclude>module-info.class</exclude>
                                        <exclude>META-INF/versions/*/module-info.class</exclude>
                                        <exclude>META-INF/LICENSE</exclude>
                                        <exclude>META-INF/NOTICE</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Exec Plugin - FIXED VERSION -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${maven-exec-plugin.version}</version>
                <configuration>
                    <mainClass>com.orphanagehub.gui.OrphanageHubApp</mainClass>
                    <cleanupDaemonThreads>false</cleanupDaemonThreads>
                    <commandlineArgs>${exec.args}</commandlineArgs>
                    <classpathScope>runtime</classpathScope>
                </configuration>
            </plugin>
            
            <!-- OWASP Dependency Check -->
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>${dependency-check-maven.version}</version>
                <configuration>
                    <failBuildOnCVSS>7</failBuildOnCVSS>
                    <suppressionFiles>
                        <suppressionFile>owasp-suppressions.xml</suppressionFile>
                    </suppressionFiles>
                    <formats>
                        <format>HTML</format>
                        <format>JSON</format>
                    </formats>
                </configuration>
            </plugin>
            
            <!-- Versions Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven-plugin.version}</version>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                    <rulesUri>file://${project.basedir}/maven-version-rules.xml</rulesUri>
                </configuration>
            </plugin>
            
            <!-- Clean Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>logs</directory>
                            <includes>
                                <include>**/*.log</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            
            <!-- Resources Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            
            <!-- JAR Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.4.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            
            <!-- Site Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>4.0.0-M13</version>
            </plugin>
            
            <!-- Enforcer Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.6.0</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>17</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <!-- Development Profile -->
        <profile>
            <id>dev</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
                <maven.javadoc.skip>true</maven.javadoc.skip>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <debug>true</debug>
                            <optimize>false</optimize>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Production Profile -->
        <profile>
            <id>prod</id>
            <properties>
                <maven.test.failure.ignore>false</maven.test.failure.ignore>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <debug>false</debug>
                            <optimize>true</optimize>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.6.3</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Quick Build Profile -->
        <profile>
            <id>quick</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
                <maven.javadoc.skip>true</maven.javadoc.skip>
                <jacoco.skip>true</jacoco.skip>
                <dependency-check.skip>true</dependency-check.skip>
            </properties>
        </profile>
        
        <!-- Coverage Profile -->
        <profile>
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/gui/**</exclude>
                                <exclude>**/model/**</exclude>
                                <exclude>**/exception/**</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.5.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.6.3</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
```

### File: Makefile
```makefile
# OrphanageHub - Production Workflow System
# ============================================
.DEFAULT_GOAL := help
SHELL := /bin/bash

# ============================================
# Configuration
# ============================================
APP_NAME := OrphanageHub
APP_MAIN_CLASS := com.orphanagehub.gui.OrphanageHubApp
DEBUG_PORT ?= 5005
JMX_PORT ?= 9010
MAVEN_OPTS := -Xmx1024m -Dfile.encoding=UTF-8
# Fixed VERSION extraction
VERSION := $(shell grep '<version>' pom.xml | head -1 | sed 's/.*<version>//' | sed 's/<\/version>.*//')

# ============================================
# OS Detection
# ============================================
ifeq ($(OS),Windows_NT)
    MAVEN := mvnw.cmd
    SEP := ;
    PYTHON := python
    RM := del /Q
    MKDIR := mkdir
    CP_CMD := copy
    NULL := nul
else
    MAVEN := ./mvnw
    SEP := :
    PYTHON := python3
    RM := rm -f
    MKDIR := mkdir -p
    CP_CMD := cp
    NULL := /dev/null
endif

# Check if Maven wrapper exists, fallback to system maven
ifeq ($(wildcard $(MAVEN)),)
    MAVEN := mvn
endif

# PID detection with error handling
get_pid = $(shell jps -l 2>$(NULL) | grep $(APP_MAIN_CLASS) | awk '{print $$1}' | head -1)

# ============================================
# PHONY Targets Declaration
# ============================================
.PHONY: help build run clean format check test ci run-dev debug jdb pid \
        thread-dump heap-dump diag python-setup db-reset db-ping db-sql \
        log-analyze setup sanitize section-compile section-watch section-clean \
        section-rebuild section-run classpath doctor doctor-diagnose \
        doctor-interactive doctor-fix doctor-watch doctor-report doctor-fortify \
        dr df dft install deps validate package quick-build coverage \
        security-check update-deps profile benchmark docker-build docker-run \
        release backup restore health-check

# ============================================
# HELP & INFO
# ============================================
help: ## Show this help message
	@echo "╔══════════════════════════════════════════════════════════════════════╗"
	@echo "║            OrphanageHub Management System - v$(VERSION)               ║"
	@echo "╚══════════════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "Usage: make [target]"
	@echo ""
	@grep -E '^[a-zA-Z0-9_.-]+:.*?## ' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Quick start: make setup && make run"
	@echo "Development: make run-dev"
	@echo "Testing:     make test"
	@echo ""

# ============================================
# CORE BUILD COMMANDS
# ============================================
install: ## Install Maven wrapper if missing
	@if [ ! -f "./mvnw" ]; then \
		echo "📦 Installing Maven wrapper..."; \
		mvn wrapper:wrapper -Dmaven=3.9.6; \
		chmod +x mvnw; \
	fi
	@echo "✅ Maven wrapper ready"

deps: ## Download all dependencies
	@echo "📥 Downloading dependencies..."
	$(MAVEN) dependency:resolve
	$(MAVEN) dependency:resolve-plugins
	@echo "✅ Dependencies resolved"

validate: ## Validate project structure
	@echo "🔍 Validating project..."
	$(MAVEN) validate
	@echo "✅ Project structure valid"

quick-build: ## Fast build without clean
	@echo "⚡ Quick build..."
	$(MAVEN) compile
	@echo "✅ Quick build complete"

package: ## Package without running tests
	@echo "📦 Building package..."
	$(MAVEN) clean package -DskipTests
	@echo "✅ Package built: target/$(APP_NAME)-$(VERSION).jar"

build: clean package ## Full build (clean + package)
	@echo "✅ Full build complete"

run: build ## Run application
	@echo "🚀 Starting $(APP_NAME)..."
	$(MAVEN) exec:java -Dexec.mainClass=$(APP_MAIN_CLASS) \
		-Dexec.cleanupDaemonThreads=false

clean: ## Clean all build artifacts
	@echo "🧹 Cleaning project..."
	$(MAVEN) clean
	$(RM) -rf target/
	$(RM) -rf logs/*.log
	$(RM) -rf .section-cache/
	@echo "✅ Project cleaned"

# ============================================
# QUALITY & TESTING
# ============================================
format: ## Apply code formatting
	@echo "🎨 Formatting code..."
	@if $(MAVEN) help:effective-pom | grep -q spotless; then \
		$(MAVEN) spotless:apply; \
	else \
		echo "⚠️  Spotless not configured"; \
	fi

check: ## Run static analysis checks
	@echo "🔍 Running static analysis..."
	@if $(MAVEN) help:effective-pom | grep -q spotless; then \
		$(MAVEN) spotless:check; \
	fi
	@if $(MAVEN) help:effective-pom | grep -q spotbugs; then \
		$(MAVEN) spotbugs:check; \
	fi
	@echo "✅ Static analysis complete"

test: db-reset ## Run all tests
	@echo "🧪 Running tests..."
	$(MAVEN) test
	@echo "✅ All tests passed"

test-unit: ## Run unit tests only
	@echo "🧪 Running unit tests..."
	$(MAVEN) test -Dtest="!*IntegrationTest"

test-integration: db-reset ## Run integration tests only
	@echo "🧪 Running integration tests..."
	$(MAVEN) test -Dtest="*IntegrationTest"

coverage: test ## Generate test coverage report
	@echo "📊 Generating coverage report..."
	$(MAVEN) jacoco:report
	@echo "✅ Coverage report: target/site/jacoco/index.html"

ci: clean check test coverage build ## Full CI pipeline
	@echo "✅ CI pipeline complete"

# ============================================
# SECURITY & MAINTENANCE
# ============================================
security-check: ## Run OWASP dependency check
	@echo "🔒 Running security check..."
	$(MAVEN) org.owasp:dependency-check-maven:check
	@echo "✅ Security check complete: target/dependency-check-report.html"

update-deps: ## Check for dependency updates
	@echo "🔄 Checking for updates..."
	$(MAVEN) versions:display-dependency-updates
	$(MAVEN) versions:display-plugin-updates

# ============================================
# DEBUG & DIAGNOSTICS
# ============================================
run-dev: quick-build ## Run in development mode
	@echo "🔧 Starting in development mode..."
	MAVEN_OPTS="$(MAVEN_OPTS) -Dapp.env=dev" \
	$(MAVEN) exec:java -Dexec.mainClass=$(APP_MAIN_CLASS) \
		-Dexec.cleanupDaemonThreads=false

debug: quick-build ## Run with remote debugging on port $(DEBUG_PORT)
	@echo "🐛 Starting in debug mode on port $(DEBUG_PORT)..."
	@echo "   Connect your debugger to localhost:$(DEBUG_PORT)"
	MAVEN_OPTS="$(MAVEN_OPTS) -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$(DEBUG_PORT)" \
	$(MAVEN) exec:java -Dexec.mainClass=$(APP_MAIN_CLASS) \
		-Dexec.cleanupDaemonThreads=false

jdb: ## Attach JDB debugger to port $(DEBUG_PORT)
	jdb -attach localhost:$(DEBUG_PORT)

pid: ## Show application PID
	@PID=$(call get_pid); \
	if [ -n "$$PID" ]; then \
		echo "✅ Application PID: $$PID"; \
		ps -p $$PID -o pid,vsz,rss,comm; \
	else \
		echo "❌ Application not running"; \
	fi

thread-dump: ## Generate thread dump
	@PID=$(call get_pid); \
	if [ -n "$$PID" ]; then \
		$(MKDIR) logs; \
		jcmd $$PID Thread.print > logs/thread-dump-$$(date +%Y%m%d-%H%M%S).txt && \
		echo "✅ Thread dump saved to logs/"; \
	else \
		echo "❌ Application not running"; \
	fi

heap-dump: ## Generate heap dump
	@PID=$(call get_pid); \
	if [ -n "$$PID" ]; then \
		$(MKDIR) logs; \
		jcmd $$PID GC.heap_dump logs/heap-$$(date +%Y%m%d-%H%M%S).hprof && \
		echo "✅ Heap dump saved to logs/"; \
	else \
		echo "❌ Application not running"; \
	fi

diag: thread-dump heap-dump ## Generate all diagnostics
	@echo "✅ Diagnostics complete"

health-check: ## Check application health
	@PID=$(call get_pid); \
	if [ -n "$$PID" ]; then \
		echo "✅ Application is running (PID: $$PID)"; \
		jcmd $$PID VM.uptime; \
		jcmd $$PID GC.heap_info; \
	else \
		echo "❌ Application not running"; \
	fi

# ============================================
# UTILITIES & SETUP
# ============================================
python-setup: scripts/.venv/bin/activate ## Setup Python environment

scripts/.venv/bin/activate: scripts/requirements.txt
	@echo "🐍 Setting up Python virtual environment..."
	@$(PYTHON) -m venv scripts/.venv
	@scripts/.venv/bin/pip install --upgrade pip
	@scripts/.venv/bin/pip install -r scripts/requirements.txt
	@touch scripts/.venv/bin/activate
	@echo "✅ Python environment ready"

setup: install python-setup ## Complete project setup
	@echo "🔧 Setting up $(APP_NAME) project..."
	@$(MKDIR) logs db target src/main/resources src/test/resources
	@$(MKDIR) src/main/java/com/orphanagehub
	@$(MKDIR) src/test/java/com/orphanagehub
	@if [ ! -f db/template.accdb ] && [ -f db/OrphanageHub.accdb ]; then \
		echo "📁 Creating DB template..."; \
		$(CP_CMD) db/OrphanageHub.accdb db/template.accdb; \
	fi
	@$(MAVEN) dependency:resolve
	@echo "✅ Setup complete! Run 'make run' to start."

sanitize: python-setup ## Clean source files
	@echo "🧹 Sanitizing source files..."
	@scripts/.venv/bin/python scripts/sanitize_sources.py

backup: ## Backup project data
	@echo "💾 Creating backup..."
	@$(MKDIR) backups
	@tar -czf backups/backup-$$(date +%Y%m%d-%H%M%S).tar.gz \
		--exclude=target --exclude=logs --exclude=.git \
		--exclude=scripts/.venv .
	@echo "✅ Backup created in backups/"

restore: ## Restore from latest backup
	@if [ -z "$(file)" ]; then \
		echo "Usage: make restore file=backups/backup-XXX.tar.gz"; \
		exit 1; \
	fi
	@echo "📂 Restoring from $(file)..."
	@tar -xzf $(file)
	@echo "✅ Restore complete"

# ============================================
# DATABASE MANAGEMENT
# ============================================
classpath: ## Get runtime classpath
	@$(MAVEN) -q dependency:build-classpath \
		-Dmdep.outputFile=target/classpath.txt \
		-Dmdep.includeScope=runtime \
		-Dmdep.pathSeparator='$(SEP)' 2>$(NULL) || true
	@if [ -f target/classpath.txt ]; then \
		echo "target/classes$(SEP)$$(cat target/classpath.txt)"; \
	else \
		echo "target/classes"; \
	fi

db-ping: quick-build ## Test database connectivity
	@echo "🔌 Testing database connection..."
	@CP=$$($(MAKE) -s classpath); \
	java -cp "$$CP" com.orphanagehub.tools.DbDoctor || \
	echo "❌ DB connection failed"

db-reset: ## Reset database from template
	@echo "🔄 Resetting database..."
	@if [ ! -f db/template.accdb ]; then \
		echo "❌ ERROR: db/template.accdb not found"; \
		echo "Run 'make setup' first"; \
		exit 1; \
	fi
	@$(CP_CMD) -f db/template.accdb db/OrphanageHub.accdb
	@echo "✅ Database reset from template"

db-sql: ## Execute SQL query (usage: make db-sql q="SELECT * FROM users")
	@if [ -z "$(q)" ]; then \
		echo "Usage: make db-sql q=\"YOUR_SQL_QUERY\""; \
		exit 1; \
	fi
	@CP=$$($(MAKE) -s classpath); \
	java -cp "$$CP" com.orphanagehub.tools.DbShell "$(q)"

log-analyze: python-setup ## Analyze application logs
	@echo "📊 Analyzing logs..."
	@scripts/.venv/bin/python scripts/log_analyzer.py

# ============================================
# SECTION BUILD SYSTEM
# ============================================
section-compile: python-setup ## Fast incremental compilation
	@echo "⚡ Running section compiler..."
	@scripts/.venv/bin/python scripts/section_build.py

section-watch: python-setup ## Watch mode with live compilation
	@echo "👁️  Starting watch mode..."
	@scripts/.venv/bin/python scripts/section_build.py --watch

section-clean: python-setup ## Clean section build artifacts
	@echo "🧹 Cleaning section cache..."
	@scripts/.venv/bin/python scripts/section_build.py --clean

section-rebuild: python-setup ## Force rebuild all sections
	@echo "🔨 Rebuilding all sections..."
	@scripts/.venv/bin/python scripts/section_build.py --force

section-run: section-compile ## Run with section-compiled classes
	@CP=$$($(MAKE) -s classpath); \
	echo "🚀 Running with section-compiled classes..."; \
	java -cp "$$CP" $(APP_MAIN_CLASS)

# ============================================
# DOCTOR SYSTEM
# ============================================
doctor: doctor-interactive ## Run doctor interactively (default)

doctor-diagnose: python-setup ## Diagnose issues only
	@echo "🩺 Running diagnostics..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py java diagnose

doctor-interactive: python-setup ## Interactive diagnosis and fix
	@echo "👨‍⚕️ Starting interactive doctor..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py java interactive

doctor-fix: python-setup ## Auto-fix high-confidence issues
	@echo "🔧 Auto-fixing issues..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py java fix

doctor-watch: python-setup ## Watch mode with auto-fix
	@echo "👁️  Starting doctor watch mode..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py java watch

doctor-report: python-setup ## Generate health report
	@echo "📊 Generating health report..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py java report

doctor-fortify: python-setup ## Fortify specific file
	@if [ -z "$(file)" ]; then \
		echo "Usage: make doctor-fortify file=path/to/File.java"; \
		exit 1; \
	fi
	@echo "🛡️  Fortifying $(file)..."
	@scripts/.venv/bin/python scripts/doctor_chimera.py fortify $(file)

# Shortcuts
dr: doctor-interactive ## Shortcut for doctor-interactive
df: doctor-fix ## Shortcut for doctor-fix
dft: doctor-fortify ## Shortcut for doctor-fortify

# ============================================
# ADVANCED & DEPLOYMENT
# ============================================
profile: quick-build ## Run with profiling
	@echo "📈 Starting with profiling enabled..."
	MAVEN_OPTS="$(MAVEN_OPTS) \
		-Dcom.sun.management.jmxremote \
		-Dcom.sun.management.jmxremote.port=$(JMX_PORT) \
		-Dcom.sun.management.jmxremote.authenticate=false \
		-Dcom.sun.management.jmxremote.ssl=false" \
	$(MAVEN) exec:java -Dexec.mainClass=$(APP_MAIN_CLASS)

benchmark: quick-build ## Run benchmarks
	@echo "⏱️  Running benchmarks..."
	$(MAVEN) exec:java -Dexec.mainClass=com.orphanagehub.benchmark.BenchmarkRunner

docker-build: ## Build Docker image
	@echo "🐳 Building Docker image..."
	docker build -t orphanagehub:$(VERSION) -t orphanagehub:latest .
	@echo "✅ Docker image built: orphanagehub:$(VERSION)"

docker-run: ## Run in Docker
	@echo "🐳 Running in Docker..."
	docker run -it --rm \
		-p 8080:8080 \
		-v $$(pwd)/db:/app/db \
		-v $$(pwd)/logs:/app/logs \
		orphanagehub:latest

release: ci ## Create release package
	@echo "📦 Creating release package..."
	@$(MKDIR) release
	@$(CP_CMD) target/$(APP_NAME)-$(VERSION).jar release/
	@$(CP_CMD) README.md release/
	@$(CP_CMD) -r db/template.accdb release/
	@tar -czf release/$(APP_NAME)-$(VERSION)-release.tar.gz -C release .
	@echo "✅ Release package: release/$(APP_NAME)-$(VERSION)-release.tar.gz"

# ============================================
# CONFIGURATION
# ============================================
.NOTPARALLEL:
```

================================================================================
## 3. JAVA SOURCE CODE
================================================================================

### Found 38 Java files:
```
src/main/java/com/orphanagehub/dao/DatabaseManager.java
src/main/java/com/orphanagehub/dao/DonationDAO.java
src/main/java/com/orphanagehub/dao/OrphanageDAO.java
src/main/java/com/orphanagehub/dao/ResourceRequestDAO.java
src/main/java/com/orphanagehub/dao/UserDAO.java
src/main/java/com/orphanagehub/dao/VolunteerOpportunityDAO.java
src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
src/main/java/com/orphanagehub/gui/HomePanel.java
src/main/java/com/orphanagehub/gui/LoginPanel.java
src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
src/main/java/com/orphanagehub/gui/RegistrationPanel.java
src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
src/main/java/com/orphanagehub/gui/WelcomePanel.java
src/main/java/com/orphanagehub/model/Donation.java
src/main/java/com/orphanagehub/model/Orphanage.java
src/main/java/com/orphanagehub/model/OrphanageInfo.java
src/main/java/com/orphanagehub/model/ResourceRequest.java
src/main/java/com/orphanagehub/model/User.java
src/main/java/com/orphanagehub/model/VolunteerOpportunity.java
src/main/java/com/orphanagehub/service/AdminService.java
src/main/java/com/orphanagehub/service/AuthService.java
src/main/java/com/orphanagehub/service/AuthenticationService.java
src/main/java/com/orphanagehub/service/DonorService.java
src/main/java/com/orphanagehub/service/OrphanageService.java
src/main/java/com/orphanagehub/service/RegistrationService.java
src/main/java/com/orphanagehub/service/ServiceException.java
src/main/java/com/orphanagehub/tools/DbDoctor.java
src/main/java/com/orphanagehub/tools/DbShell.java
src/main/java/com/orphanagehub/tools/DbTest.java
src/main/java/com/orphanagehub/util/EdtGuard.java
src/main/java/com/orphanagehub/util/GlobalExceptionHandler.java
src/main/java/com/orphanagehub/util/PasswordUtil.java
src/main/java/com/orphanagehub/util/SessionManager.java
src/main/java/com/orphanagehub/util/ValidationUtil.java
src/src/main/java/com/orphanagehub/tools/DbDoctor.java
src/src/main/java/com/orphanagehub/tools/DbShell.java
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/DatabaseManager.java
```java
package com.orphanagehub.dao;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import io.vavr.control.Try;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Manages database connections using HikariCP pooling with automatic schema management.
 * Provides efficient, thread-safe connections with database initialization.
 */
public class DatabaseManager {
    private static final Logger logger = LoggerFactory.getLogger(DatabaseManager.class);
    private static final String CONFIG_FILE = "/app.properties";  // Align with resources
    private static final String DEFAULT_DB_PATH = "db/OrphanageHub.accdb";
    private static final AtomicBoolean initialized = new AtomicBoolean(false);
    
    private static volatile HikariDataSource dataSource;
    
    static {
        initializeDataSource();
    }
    
    /**
     * Initialize the HikariCP data source with proper configuration
     */
    private static void initializeDataSource() {
        Try.of(() -> {
            HikariConfig config = new HikariConfig();
            
            // Load configuration from properties file, with fallback to defaults
            Properties props = loadDatabaseProperties();
            
            // Configure HikariCP for Microsoft Access via UCanAccess
            String dbPath = props.getProperty("db.url", "jdbc:ucanaccess://" + DEFAULT_DB_PATH);
            config.setJdbcUrl(dbPath + ";immediatelyReleaseResources=true;memory=false;openExclusive=false");
            // Try both possible driver class names (different versions use different packages)
            try {
                Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                config.setDriverClassName("net.ucanaccess.jdbc.UcanaccessDriver");
            } catch (ClassNotFoundException e1) {
                try {
                    Class.forName("net.sf.ucanaccess.jdbc.UcanaccessDriver");
                    config.setDriverClassName("net.sf.ucanaccess.jdbc.UcanaccessDriver");
                } catch (ClassNotFoundException e2) {
                    throw new RuntimeException("UCanAccess driver not found in classpath", e2);
                }
            }
            
            // Connection pool settings optimized for small desktop app
            config.setMaximumPoolSize(Integer.parseInt(props.getProperty("project.build.pool.maxSize", "10")));
            config.setMinimumIdle(Integer.parseInt(props.getProperty("project.build.pool.minIdle", "2")));
            config.setConnectionTimeout(Long.parseLong(props.getProperty("project.build.pool.connectionTimeout", "30000")));
            config.setIdleTimeout(Long.parseLong(props.getProperty("project.build.pool.idleTimeout", "600000")));
            config.setMaxLifetime(Long.parseLong(props.getProperty("project.build.pool.maxLifetime", "1800000")));
            
            // Connection test query for Access/HSQLDB - Use VALUES(1) instead of SELECT 1
            config.setConnectionTestQuery("VALUES(1)");
            config.setPoolName("OrphanageHubPool");
            
            // Additional optimizations for desktop use
            config.setAutoCommit(true);
            config.setReadOnly(false);
            config.setLeakDetectionThreshold(60000);
            
            dataSource = new HikariDataSource(config);
            logger.info("HikariCP connection pool initialized successfully");
            
            // Initialize database schema after pool creation
            initializeDatabase();
            return null;
        }).onFailure(error -> {
            logger.error("Failed to initialize database connection pool", error);
            throw new RuntimeException("Database initialization failed: " + error.getMessage(), error);
        });
    }
    
    /**
     * Load database properties from configuration file
     */
    private static Properties loadDatabaseProperties() {
        Properties props = new Properties();
        
        Try.of(() -> {
            try (InputStream is = DatabaseManager.class.getResourceAsStream(CONFIG_FILE)) {
                if (is != null) {
                    props.load(is);
                    logger.info("Database configuration loaded from {}", CONFIG_FILE);
                } else {
                    logger.warn("Configuration file {} not found, using defaults", CONFIG_FILE);
                    setDefaultProperties(props);
                }
            }
            return props;
        }).onFailure(error -> {
            logger.warn("Error loading database configuration, using defaults", error);
            setDefaultProperties(props);
        });
        
        return props;
    }
    
    /**
     * Set default database properties
     */
    private static void setDefaultProperties(Properties props) {
        props.setProperty("db.url", "jdbc:ucanaccess://" + DEFAULT_DB_PATH);
        props.setProperty("project.build.pool.maxSize", "10");
        props.setProperty("project.build.pool.minIdle", "2");
        props.setProperty("project.build.pool.connectionTimeout", "30000");
        props.setProperty("project.build.pool.idleTimeout", "600000");
        props.setProperty("project.build.pool.maxLifetime", "1800000");
    }
    
    /**
     * Gets a connection from the pool.
     * @return Try<Connection> - success with connection, failure on error
     */
    public static Try<Connection> getConnection() {
        if (dataSource == null || dataSource.isClosed()) {
            return Try.failure(new SQLException("Database connection pool is not initialized or closed"));
        }
        return Try.of(dataSource::getConnection);
    }
    
    /**
     * Initialize database schema - create/update tables and columns
     */
    private static void initializeDatabase() {
        if (!initialized.compareAndSet(false, true)) {
            return; // Already initialized
        }
        
        getConnection().andThen(conn -> {
            Try.run(() -> {
                // Ensure required columns exist in TblUsers
                ensureUserTableSchema(conn);
                
                // Verify all tables exist
                verifyRequiredTables(conn);
                
                logger.info("Database schema initialization completed successfully");
            }).onFailure(error -> {
                logger.error("Failed to initialize database schema", error);
                initialized.set(false); // Reset to allow retry
            });
        });
    }

    /**
     * Ensure TblUsers has all required columns with proper schema
     */
    private static void ensureUserTableSchema(Connection conn) {
        // Check and add FullName column if missing
        Try.run(() -> {
            if (!columnExists(conn, "TblUsers", "FullName")) {
                try (Statement stmt = conn.createStatement()) {
                    stmt.execute("ALTER TABLE TblUsers ADD COLUMN FullName TEXT(100)");
                    logger.info("Added FullName column to TblUsers");
                }
            }
        }).onFailure(error -> logger.error("Failed to add FullName column", error));
        
        // Check and add AccountStatus column if missing
        Try.run(() -> {
            if (!columnExists(conn, "TblUsers", "AccountStatus")) {
                try (Statement stmt = conn.createStatement()) {
                    stmt.execute("ALTER TABLE TblUsers ADD COLUMN AccountStatus TEXT(20) DEFAULT 'Active'");
                    logger.info("Added AccountStatus column to TblUsers");
                }
            }
        }).onFailure(error -> logger.error("Failed to add AccountStatus column", error));
        
        // Additional columns can be added here as per project needs
    }

    /**
     * Verify all required tables exist in the database
     */
    private static void verifyRequiredTables(Connection conn) {
        DatabaseMetaData meta = Try.of(conn::getMetaData).getOrElseThrow((e) -> new RuntimeException(e));
        
        // List of required tables from project scope
        String[] requiredTables = {
            "TblUsers", "TblOrphanages", "TblResourceRequests"
        };
        
        for (String tableName : requiredTables) {
            Try.run(() -> {
                try (ResultSet tables = meta.getTables(null, null, tableName, null)) {
                    if (!tables.next()) {
                        logger.warn("Required table {} does not exist in database", tableName);
                    } else {
                        logger.debug("Verified table {} exists", tableName);
                    }
                }
            }).onFailure(error -> logger.error("Failed to verify table " + tableName, error));
        }
        
        // Verify required columns in TblUsers
        String[] requiredUserColumns = {
            "UserID", "Username", "PasswordHash", "Email", "UserRole", "DateRegistered", "FullName", "AccountStatus"
        };
        
        for (String column : requiredUserColumns) {
            Try.run(() -> {
                if (!columnExists(conn, "TblUsers", column)) {
                    logger.warn("Missing required column in TblUsers: {}", column);
                }
            }).onFailure(error -> logger.error("Failed to verify column " + column, error));
        }
    }

    /**
     * Check if a column exists in a table
     */
    private static boolean columnExists(Connection conn, String tableName, String columnName) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet columns = meta.getColumns(null, null, tableName, columnName)) {
            return columns.next();
        }
    }
    
    /**
     * Test database connection
     */
    public static Try<Boolean> testConnection() {
        return getConnection().map(conn -> {
            try (conn) {
                return conn.isValid(5);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    /**
     * Shutdown the connection pool gracefully
     */
    public static void shutdown() {
        if (dataSource != null && !dataSource.isClosed()) {
            logger.info("Shutting down database connection pool");
            dataSource.close();
        }
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/DonationDAO.java
```java
package com.orphanagehub.dao;

import com.orphanagehub.model.Donation;
import io.vavr.collection.List;
import io.vavr.control.Option;
import io.vavr.control.Try;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.UUID;

public class DonationDAO {
    private static final Logger logger = LoggerFactory.getLogger(DonationDAO.class);
    
    public Try<Void> create(Donation donation) {
        return Try.run(() -> {
            String sql = "INSERT INTO TblDonations (DonationID, DonorID, OrphanageID, ItemCategory, " +
                       "ItemDescription, Amount, Status, DateDonated) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                String donationId = donation.donationId() != null ? donation.donationId() :
                    "DON" + UUID.randomUUID().toString().substring(0, 7).toUpperCase();
                
                ps.setString(1, donationId);
                ps.setString(2, donation.donorId());
                ps.setString(3, donation.orphanageId());
                ps.setString(4, donation.itemCategory());
                ps.setString(5, donation.itemDescription().getOrNull());
                
                donation.amount()
                    .map(amt -> Try.run(() -> ps.setInt(6, amt)))
                    .getOrElse(Try.run(() -> ps.setNull(6, Types.INTEGER)));
                
                ps.setString(7, donation.status());
                ps.setTimestamp(8, donation.dateDonated());
                
                int affected = ps.executeUpdate();
                if (affected > 0) {
                    logger.info("Donation created with ID: {}", donationId);
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Option<Donation>> findById(String id) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblDonations WHERE DonationID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, id);
                try (ResultSet rs = ps.executeQuery()) {
                    return rs.next() ? Option.of(mapToDonation(rs)) : Option.<Donation>none();
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<List<Donation>> findAll() {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblDonations ORDER BY DateDonated DESC";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql);
                 ResultSet rs = ps.executeQuery()) {
                List<Donation> donations = List.empty();
                while (rs.next()) {
                    donations = donations.append(mapToDonation(rs));
                }
                logger.debug("Found {} donations", donations.size());
                return donations;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> update(Donation donation) {
        return Try.run(() -> {
            String sql = "UPDATE TblDonations SET DonorID = ?, OrphanageID = ?, ItemCategory = ?, ItemDescription = ?, Amount = ?, Status = ?, DateDonated = ? WHERE DonationID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, donation.donorId());
                ps.setString(2, donation.orphanageId());
                ps.setString(3, donation.itemCategory());
                ps.setString(4, donation.itemDescription().getOrNull());
                if (donation.amount().isDefined()) {
                    ps.setInt(5, donation.amount().get());
                } else {
                    ps.setNull(5, Types.INTEGER);
                }
                ps.setString(6, donation.status());
                ps.setTimestamp(7, donation.dateDonated());
                ps.setString(8, donation.donationId());
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> delete(String id) {
        return Try.run(() -> {
            String sql = "DELETE FROM TblDonations WHERE DonationID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, id);
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    private Donation mapToDonation(ResultSet rs) throws SQLException {
        Object amountObj = rs.getObject("Amount");
        Option<Integer> amount = amountObj == null ? Option.none() : Option.of(rs.getInt("Amount"));
        return new Donation(
            rs.getString("DonationID"),
            rs.getString("DonorID"),
            rs.getString("OrphanageID"),
            rs.getString("ItemCategory"),
            Option.of(rs.getString("ItemDescription")),
            amount,
            rs.getString("Status"),
            rs.getTimestamp("DateDonated")
        );
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/OrphanageDAO.java
```java
package com.orphanagehub.dao;

import com.orphanagehub.model.Orphanage;
import com.orphanagehub.dao.DatabaseManager;
import io.vavr.control.Option;
import io.vavr.control.Try;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class OrphanageDAO {

    public Try<Orphanage> create(Orphanage orphanage) {
        return Try.of(() -> {
            String sql = "INSERT INTO TblOrphanages (OrphanageID, Name, Address, ContactPerson, ContactEmail, ContactPhone, VerificationStatus) VALUES (?, ?, ?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                String orphanageId = "ORP-" + UUID.randomUUID().toString().substring(0, 7).toUpperCase();
                ps.setString(1, orphanageId);
                ps.setString(2, orphanage.name());
                ps.setString(3, orphanage.address());
                ps.setString(4, orphanage.contactPerson());
                ps.setString(5, orphanage.contactEmail().getOrNull());
                ps.setString(6, orphanage.contactPhone().getOrNull());
                ps.setString(7, orphanage.verificationStatus());
                ps.executeUpdate();
                return orphanage.withOrphanageId(orphanageId);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }

    public Try<Orphanage> update(Orphanage orphanage) {
        return Try.of(() -> {
            String sql = "UPDATE TblOrphanages SET Name = ?, Address = ?, ContactPerson = ?, ContactEmail = ?, ContactPhone = ?, VerificationStatus = ? WHERE OrphanageID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, orphanage.name());
                ps.setString(2, orphanage.address());
                ps.setString(3, orphanage.contactPerson());
                ps.setString(4, orphanage.contactEmail().getOrNull());
                ps.setString(5, orphanage.contactPhone().getOrNull());
                ps.setString(6, orphanage.verificationStatus());
                ps.setString(7, orphanage.orphanageId());
                ps.executeUpdate();
                return orphanage;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }

    public Try<Option<Orphanage>> findById(String orphanageId) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblOrphanages WHERE OrphanageID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, orphanageId);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    return Option.of(mapRowToOrphanage(rs));
                } else {
                    return Option.none();
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }

    public Try<List<Orphanage>> findAll() {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblOrphanages";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                List<Orphanage> orphanages = new ArrayList<>();
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    orphanages.add(mapRowToOrphanage(rs));
                }
                return orphanages;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }

    public Try<List<Orphanage>> findByVerificationStatus(String status) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblOrphanages WHERE VerificationStatus = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                List<Orphanage> orphanages = new ArrayList<>();
                ps.setString(1, status);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    orphanages.add(mapRowToOrphanage(rs));
                }
                return orphanages;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }

    private Orphanage mapRowToOrphanage(ResultSet rs) throws SQLException {
        return new Orphanage(
            rs.getString("OrphanageID"),
            rs.getString("Name"),
            rs.getString("Address"),
            rs.getString("ContactPerson"),
            Option.of(rs.getString("ContactEmail")),
            Option.of(rs.getString("ContactPhone")),
            rs.getString("VerificationStatus")
        );
    }
}



```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/ResourceRequestDAO.java
```java
package com.orphanagehub.dao;

import com.orphanagehub.model.ResourceRequest;
import io.vavr.collection.List;
import io.vavr.control.Option;
import io.vavr.control.Try;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.UUID;

public class ResourceRequestDAO {
    
    public Try<Void> create(ResourceRequest request) {
        return Try.run(() -> {
            String sql = "INSERT INTO TblResourceRequests (RequestID, OrphanageID, UserID, ItemCategory, ItemDescription, QuantityNeeded, QuantityFulfilled, Urgency, Status, DatePosted) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, UUID.randomUUID().toString().substring(0, 10));
                ps.setString(2, request.orphanageId());
                ps.setString(3, request.userId());
                ps.setString(4, request.itemCategory());
                ps.setString(5, request.itemDescription());
                ps.setInt(6, request.quantityNeeded());
                ps.setInt(7, request.quantityFulfilled());
                ps.setString(8, request.urgency());
                ps.setString(9, request.status());
                ps.setTimestamp(10, request.datePosted());
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<List<ResourceRequest>> findByOrphanageId(String orphanageId) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblResourceRequests WHERE OrphanageID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                List<ResourceRequest> requests = List.empty();
                ps.setString(1, orphanageId);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    requests = requests.append(mapToResourceRequest(rs));
                }
                return requests;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Option<ResourceRequest>> findById(String requestId) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblResourceRequests WHERE RequestID = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, requestId);
                ResultSet rs = ps.executeQuery();
                return rs.next() ? Option.of(mapToResourceRequest(rs)) : Option.<ResourceRequest>none();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> update(ResourceRequest request) {
        return Try.run(() -> {
            String sql = "UPDATE TblResourceRequests SET ItemDescription=?, QuantityNeeded=?, QuantityFulfilled=?, Urgency=?, Status=? WHERE RequestID=?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, request.itemDescription());
                ps.setInt(2, request.quantityNeeded());
                ps.setInt(3, request.quantityFulfilled());
                ps.setString(4, request.urgency());
                ps.setString(5, request.status());
                ps.setString(6, request.requestId());
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> delete(String requestId) {
        return Try.run(() -> {
            String sql = "DELETE FROM TblResourceRequests WHERE RequestID=?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, requestId);
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    private static ResourceRequest mapToResourceRequest(ResultSet rs) throws SQLException {
        return new ResourceRequest(
            rs.getString("RequestID"),
            rs.getString("OrphanageID"),
            rs.getString("UserID"),
            rs.getString("ItemCategory"),
            rs.getString("ItemDescription"),
            rs.getInt("QuantityNeeded"),
            rs.getInt("QuantityFulfilled"),
            rs.getString("Urgency"),
            rs.getString("Status"),
            rs.getTimestamp("DatePosted")
        );
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/UserDAO.java
```java
package com.orphanagehub.dao;

import com.orphanagehub.model.User;
import com.orphanagehub.dao.DatabaseManager;
import io.vavr.control.Option;
import io.vavr.control.Try;
import java.sql.*;
import java.util.UUID;

public class UserDAO {
    
    public Try<Void> create(User user) {
        return Try.run(() -> {
            String sql = "INSERT INTO TblUsers (UserID, Username, PasswordHash, Email, UserRole, DateRegistered, FullName, AccountStatus) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, UUID.randomUUID().toString().substring(0, 10));
                ps.setString(2, user.username());
                ps.setString(3, user.passwordHash());
                ps.setString(4, user.email());
                ps.setString(5, user.userRole());
                ps.setTimestamp(6, user.dateRegistered());
                ps.setString(7, user.fullName());
                ps.setString(8, user.accountStatus());
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Option<User>> findByUsername(String username) {
        return Try.of(() -> {
            String sql = "SELECT * FROM TblUsers WHERE Username = ?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, username);
                ResultSet rs = ps.executeQuery();
                return rs.next() ? Option.of(mapToUser(rs)) : Option.<User>none();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> update(User user) {
        return Try.run(() -> {
            String sql = "UPDATE TblUsers SET Username=?, PasswordHash=?, Email=?, UserRole=?, FullName=?, AccountStatus=? WHERE UserID=?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, user.username());
                ps.setString(2, user.passwordHash());
                ps.setString(3, user.email());
                ps.setString(4, user.userRole());
                ps.setString(5, user.fullName());
                ps.setString(6, user.accountStatus());
                ps.setString(7, user.userId());
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    public Try<Void> delete(String userId) {
        return Try.run(() -> {
            String sql = "DELETE FROM TblUsers WHERE UserID=?";
            try (Connection conn = DatabaseManager.getConnection().get();
                 PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, userId);
                ps.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
    
    private static User mapToUser(ResultSet rs) throws SQLException {
        // Read FullName and AccountStatus with defaults if columns don't exist
        String fullName = null;
        String accountStatus = "Active";
        try {
            fullName = rs.getString("FullName");
        } catch (SQLException ignored) { }
        try {
            accountStatus = rs.getString("AccountStatus");
        } catch (SQLException ignored) { }
        
        return new User(
            rs.getString("UserID"),
            rs.getString("Username"),
            rs.getString("PasswordHash"),
            rs.getString("Email"),
            rs.getString("UserRole"),
            rs.getTimestamp("DateRegistered"),
            fullName,
            accountStatus
        );
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/dao/VolunteerOpportunityDAO.java
```java
package com.orphanagehub.dao;

import com.orphanagehub.model.VolunteerOpportunity;
import io.vavr.collection.List;
import io.vavr.control.Option;
import io.vavr.control.Try;
import java.sql.*;
import java.util.UUID;

public class VolunteerOpportunityDAO {
    
    public Try<Void> create(VolunteerOpportunity opportunity) {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.withResources(() -> conn)
                .of(connection -> {
                    String sql = "INSERT INTO TblVolunteerOpportunities (OpportunityID, OrphanageID, SkillRequired, Location, TimeCommitment, Status) VALUES (?, ?, ?, ?, ?, ?)";
                    try (PreparedStatement ps = connection.prepareStatement(sql)) {
                        ps.setString(1, UUID.randomUUID().toString().substring(0, 10));
                        ps.setString(2, opportunity.orphanageId());
                        ps.setString(3, opportunity.skillRequired());
                        ps.setString(4, opportunity.location());
                        ps.setString(5, opportunity.timeCommitment().getOrNull());
                        ps.setString(6, opportunity.status());
                        ps.executeUpdate();
                    }
                    return null;
                }));
    }
    
    public Try<Option<VolunteerOpportunity>> findById(String id) {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.withResources(() -> conn)
                .of(connection -> {
                    String sql = "SELECT * FROM TblVolunteerOpportunities WHERE OpportunityID = ?";
                    try (PreparedStatement ps = connection.prepareStatement(sql)) {
                        ps.setString(1, id);
                        ResultSet rs = ps.executeQuery();
                        return rs.next() ? Option.of(mapToVolunteerOpportunity(rs)) : Option.<VolunteerOpportunity>none();
                    }
                }));
    }
    
    public Try<List<VolunteerOpportunity>> findByOrphanageId(String orphanageId) {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.withResources(() -> conn)
                .of(connection -> {
                    String sql = "SELECT * FROM TblVolunteerOpportunities WHERE OrphanageID = ?";
                    List<VolunteerOpportunity> opportunities = List.empty();
                    try (PreparedStatement ps = connection.prepareStatement(sql)) {
                        ps.setString(1, orphanageId);
                        ResultSet rs = ps.executeQuery();
                        while (rs.next()) {
                            opportunities = opportunities.append(mapToVolunteerOpportunity(rs));
                        }
                    }
                    return opportunities;
                }));
    }
    
    public Try<List<VolunteerOpportunity>> findAll() {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.withResources(() -> conn)
                .of(connection -> {
                    String sql = "SELECT * FROM TblVolunteerOpportunities";
                    List<VolunteerOpportunity> opportunities = List.empty();
                    try (PreparedStatement ps = connection.prepareStatement(sql)) {
                        ResultSet rs = ps.executeQuery();
                        while (rs.next()) {
                            opportunities = opportunities.append(mapToVolunteerOpportunity(rs));
                        }
                    }
                    return opportunities;
                }));
    }
    
    public Try<Void> update(VolunteerOpportunity opportunity) {
        return Option.of(opportunity.opportunityId())
                .toTry(() -> new IllegalArgumentException("Opportunity ID required for update"))
                .flatMap(id -> DatabaseManager.getConnection()
                    .flatMap(conn -> Try.withResources(() -> conn)
                        .of(connection -> {
                            String sql = "UPDATE TblVolunteerOpportunities SET OrphanageID = ?, SkillRequired = ?, Location = ?, TimeCommitment = ?, Status = ? WHERE OpportunityID = ?";
                            try (PreparedStatement ps = connection.prepareStatement(sql)) {
                                ps.setString(1, opportunity.orphanageId());
                                ps.setString(2, opportunity.skillRequired());
                                ps.setString(3, opportunity.location());
                                ps.setString(4, opportunity.timeCommitment().getOrNull());
                                ps.setString(5, opportunity.status());
                                ps.setString(6, id);
                                ps.executeUpdate();
                            }
                            return null;
                        })));
    }
    
    public Try<Void> delete(String id) {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.withResources(() -> conn)
                .of(connection -> {
                    String sql = "DELETE FROM TblVolunteerOpportunities WHERE OpportunityID = ?";
                    try (PreparedStatement ps = connection.prepareStatement(sql)) {
                        ps.setString(1, id);
                        ps.executeUpdate();
                    }
                    return null;
                }));
    }
    
    private VolunteerOpportunity mapToVolunteerOpportunity(ResultSet rs) throws SQLException {
        return new VolunteerOpportunity(
            rs.getString("OpportunityID"),
            rs.getString("OrphanageID"),
            rs.getString("SkillRequired"),
            rs.getString("Location"),
            Option.of(rs.getString("TimeCommitment")),
            rs.getString("Status")
        );
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AdminService;
import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.function.BiConsumer;

public class AdminDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final AdminService adminService;
    private DefaultTableModel verificationModel;
    private DefaultTableModel userModel;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPROVE_BG = new Color(60, 179, 113);
    private static final Color BUTTON_APPROVE_HOVER_BG = new Color(70, 190, 123);
    private static final Color BUTTON_REJECT_BG = new Color(192, 57, 43);
    private static final Color BUTTON_REJECT_HOVER_BG = new Color(231, 76, 60);
    private static final Color BUTTON_SUSPEND_BG = BUTTON_REJECT_BG;
    private static final Color BUTTON_SUSPEND_HOVER_BG = BUTTON_REJECT_HOVER_BG;

    public AdminDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.adminService = new AdminService();
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
        loadData();
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2699");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(TITLE_COLOR_DARK);
        JLabel nameLabel = new JLabel("Administrator Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        
        String adminUsername = SessionManager.getInstance()
            .getAttribute("currentUser")
            .map(Object::toString)
            .getOrElse("Admin");
        
        JLabel userLabel = new JLabel("Admin User: " + adminUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(BUTTON_REJECT_BG);
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_BG); }
        });
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo("Home");
        });
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        
        tabbedPane.addTab("Orphanage Verification", createVerificationTab());
        tabbedPane.addTab("User Management", createUserManagementTab());
        tabbedPane.addTab("System Overview", createSystemOverviewTab());
        
        return tabbedPane;
    }

    private JPanel createVerificationTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        String[] columnNames = {"Orphanage Name", "Contact", "Email", "Registered", "Status", "Actions"};
        verificationModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(verificationModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createUserManagementTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        searchPanel.setOpaque(false);
        
        JLabel lblSearchUser = new JLabel("Search User:");
        JTextField txtUserSearch = new JTextField(20);
        JLabel lblUserRole = new JLabel("Role:");
        JComboBox<String> cmbUserRole = new JComboBox<>(new String[]{"Any Role", "Admin", "OrphanageStaff", "Donor", "Volunteer"});
        JButton btnUserSearch = new JButton("Search");
        
        styleFormLabel(lblSearchUser);
        styleTextField(txtUserSearch);
        styleFormLabel(lblUserRole);
        styleComboBox(cmbUserRole);
        styleActionButton(btnUserSearch, "Find users");
        
        searchPanel.add(lblSearchUser);
        searchPanel.add(txtUserSearch);
        searchPanel.add(lblUserRole);
        searchPanel.add(cmbUserRole);
        searchPanel.add(btnUserSearch);
        panel.add(searchPanel, BorderLayout.NORTH);
        
        String[] columnNames = {"Username", "Email", "Role", "Status", "Registered", "Actions"};
        userModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(userModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createSystemOverviewTab() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 30, 25, 30));
        
        panel.add(createOverviewStat("Total Registered Users:", "157"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Verified Orphanages:", "34"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Pending Verification:", "3"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Open Resource Requests:", "48"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Active Volunteers:", "22"));
        panel.add(Box.createVerticalGlue());
        
        return panel;
    }

    private Component createOverviewStat(String labelText, String valueText) {
        JPanel statPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statPanel.setOpaque(false);
        JLabel label = new JLabel(labelText);
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 16));
        label.setForeground(TEXT_COLOR_DARK);
        JLabel value = new JLabel(valueText);
        value.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        value.setForeground(TITLE_COLOR_DARK);
        statPanel.add(label);
        statPanel.add(value);
        return statPanel;
    }

    private void loadData() {
        // Load mock data for verification
        verificationModel.setRowCount(0);
        verificationModel.addRow(new Object[]{"New Hope Center", "Alice Smith", "alice@newhope.org", "2024-05-10", "Pending", "Actions"});
        verificationModel.addRow(new Object[]{"Future Stars", "Bob Jones", "bob@futurestars.net", "2024-05-08", "Pending", "Actions"});
        verificationModel.addRow(new Object[]{"Safe Haven Kids", "Charlie P.", "contact@safehaven.com", "2024-04-20", "Verified", "Actions"});
        
        // Load mock data for users
        userModel.setRowCount(0);
        userModel.addRow(new Object[]{"staff_user", "staff@example.com", "OrphanageStaff", "Active", "2024-01-15", "Actions"});
        userModel.addRow(new Object[]{"donor_user", "donor@mail.net", "Donor", "Active", "2024-02-10", "Actions"});
        userModel.addRow(new Object[]{"volunteer_A", "vol@provider.org", "Volunteer", "Active", "2024-03-01", "Actions"});
        userModel.addRow(new Object[]{"admin_user", "admin@orphanagehub.com", "Admin", "Active", "2023-10-01", "Actions"});
    }

    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, 
            "Error loading data: " + message, 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JTextField field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p=new EmptyBorder(4,6,4,6); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); 
        field.setCaretColor(Color.LIGHT_GRAY); 
    }
    
    private void styleComboBox(JComboBox<?> comboBox) { 
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        comboBox.setForeground(INPUT_FG_DARK); 
        comboBox.setBackground(INPUT_BG_DARK); 
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1)); 
    }
    
    private void styleTable(JTable table) { 
        table.setBackground(TABLE_CELL_BG); 
        table.setForeground(TABLE_CELL_FG); 
        table.setGridColor(TABLE_GRID_COLOR); 
        table.setRowHeight(28); 
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        table.setFillsViewportHeight(true); 
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG); 
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG); 
        table.setShowGrid(true); 
        table.setIntercellSpacing(new Dimension(0,1)); 
        JTableHeader h=table.getTableHeader(); 
        h.setBackground(TABLE_HEADER_BG); 
        h.setForeground(TABLE_HEADER_FG); 
        h.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); 
        h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
    }
    
    private void styleScrollPane(JScrollPane scrollPane) { 
        scrollPane.setOpaque(false); 
        scrollPane.getViewport().setOpaque(false); 
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        applyScrollbarUI(scrollPane.getVerticalScrollBar()); 
        applyScrollbarUI(scrollPane.getHorizontalScrollBar()); 
    }
    
    private void applyScrollbarUI(JScrollBar scrollBar) { 
        scrollBar.setUI(new BasicScrollBarUI() { 
            @Override protected void configureScrollBarColors(){
                this.thumbColor=BUTTON_BG_DARK; 
                this.trackColor=DARK_BG_END;
            } 
            @Override protected JButton createDecreaseButton(int o){return createZeroButton();} 
            @Override protected JButton createIncreaseButton(int o){return createZeroButton();} 
            private JButton createZeroButton(){
                JButton b=new JButton(); 
                b.setPreferredSize(new Dimension(0,0)); 
                return b;
            } 
        }); 
        scrollBar.setUnitIncrement(16); 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        btn.setBackground(BUTTON_BG_DARK); 
        Border p=new EmptyBorder(6,12,6,12); 
        btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),p)); 
        btn.addMouseListener(new MouseAdapter() { 
            @Override public void mouseEntered(MouseEvent e){
                if(btn.getBackground().equals(BUTTON_BG_DARK)){
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override public void mouseExited(MouseEvent e){
                if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){
                    btn.setBackground(BUTTON_BG_DARK);
                }
            } 
        }); 
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
```java
// src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.Donation;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.service.DonorService;
import io.vavr.control.Try;
import io.vavr.collection.List;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class DonorDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final String donorUsername = "donor_user";
    private final DonorService donorService = new DonorService();
    private final OrphanageDAO orphanageDAO = new OrphanageDAO();
    private JTable resultsTable;
    private DefaultTableModel donationModel;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_SEARCH_BG = new Color(72, 149, 239);
    private static final Color BUTTON_SEARCH_HOVER_BG = new Color(92, 169, 249);

    public DonorDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);
        
        resultsTable = createResultsTable();
        JScrollPane scrollPane = new JScrollPane(resultsTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\uD83E\uDEC2");
        iconLabel.setFont(new Font("Segoe UI Symbol", Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Donor Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("User: " + donorUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        
        JLabel lblSearch = new JLabel("Search:");
        styleFormLabel(lblSearch);
        JTextField txtSearch = new JTextField(20);
        styleTextField(txtSearch);
        
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"};
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);
        
        JLabel lblFilterCategory = new JLabel("Need Category:");
        styleFormLabel(lblFilterCategory);
        String[] categories = {"Any Category", "Food", "Clothing", "Education", "Medical", "Funding"};
        JComboBox<String> cmbCategory = new JComboBox<>(categories);
        styleComboBox(cmbCategory);
        
        JButton btnSearch = new JButton("Apply Filters");
        styleActionButton(btnSearch, "Find orphanages or requests matching criteria");
        btnSearch.setBackground(BUTTON_SEARCH_BG);
        btnSearch.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_BG); }
        });
        btnSearch.addActionListener(e -> loadOrphanageData());
        
        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterCategory);
        panel.add(cmbCategory);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        
        return panel;
    }

    private void loadOrphanageData() {
        // Use Try for functional error handling
        Try<List<Orphanage>> orphanagesTry = orphanageDAO.findAll()
            .map(List::ofAll);
            
        orphanagesTry
            .onSuccess(orphanages -> {
                donationModel.setRowCount(0);
                orphanages.forEach(o -> 
                    donationModel.addRow(new Object[]{
                        o.name(),  // FIXED: Use name() instead of orphanageName()
                        o.address(),
                        "Various Needs", // This would come from resource requests
                        "View Details"
                    })
                );
            })
            .onFailure(ex -> {
                JOptionPane.showMessageDialog(this, 
                    "Failed to load orphanages: " + ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            });
    }

    private JTable createResultsTable() {
        String[] columnNames = {"Orphanage Name", "Location", "Key Needs", "Actions"};
        Object[][] data = {
            {"Hope Children's Home", "City A", "Food, Winter Clothing", "View Details"},
            {"Bright Future Orphanage", "City B", "School Supplies, Funding", "View Details"},
            {"Little Angels Shelter", "City A", "Medical Supplies", "View Details"},
            {"Sunshine House", "Region C", "Food, Volunteers", "View Details"},
            {"New Dawn Center", "City B", "Clothing (All Ages)", "View Details"}
        };
        
        donationModel = new DefaultTableModel(data, columnNames);
        JTable table = new JTable(donationModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 3; }
        };
        styleTable(table);
        
        table.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer(BUTTON_SEARCH_BG));
        table.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox(), BUTTON_SEARCH_BG, () -> {
            int selectedRow = table.convertRowIndexToModel(table.getEditingRow());
            String orphanageName = (String) table.getModel().getValueAt(selectedRow, 0);
            JOptionPane.showMessageDialog(this, "View Details for: " + orphanageName, "View Details", JOptionPane.INFORMATION_MESSAGE);
        }));
        
        table.getColumnModel().getColumn(0).setPreferredWidth(200);
        table.getColumnModel().getColumn(1).setPreferredWidth(120);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(120);
        
        return table;
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JTextField field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p = new EmptyBorder(4, 6, 4, 6); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1), p)); 
        field.setCaretColor(Color.LIGHT_GRAY); 
    }
    
    private void styleComboBox(JComboBox<?> comboBox) { 
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        comboBox.setForeground(INPUT_FG_DARK); 
        comboBox.setBackground(INPUT_BG_DARK); 
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1)); 
        
        Object p = comboBox.getUI().getAccessibleChild(comboBox, 0); 
        if (p instanceof JPopupMenu) {
            JPopupMenu pm = (JPopupMenu) p;
            pm.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
            for (Component comp : pm.getComponents()) {
                if (comp instanceof JScrollPane) {
                    JScrollPane sp = (JScrollPane) comp;
                    sp.getViewport().setBackground(INPUT_BG_DARK);
                    applyScrollbarUI(sp.getVerticalScrollBar()); 
                    Component l = sp.getViewport().getView(); 
                    if (l instanceof JList) {
                        ((JList<?>) l).setBackground(INPUT_BG_DARK);
                        ((JList<?>) l).setForeground(INPUT_FG_DARK);
                        ((JList<?>) l).setSelectionBackground(BUTTON_BG_DARK);
                        ((JList<?>) l).setSelectionForeground(BUTTON_FG_DARK);
                    }
                }
            }
        }
    }
    
    private void styleTable(JTable table) { 
        table.setBackground(TABLE_CELL_BG); 
        table.setForeground(TABLE_CELL_FG); 
        table.setGridColor(TABLE_GRID_COLOR); 
        table.setRowHeight(28); 
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        table.setFillsViewportHeight(true); 
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG); 
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG); 
        table.setShowGrid(true); 
        table.setIntercellSpacing(new Dimension(0, 1)); 
        
        JTableHeader h = table.getTableHeader(); 
        h.setBackground(TABLE_HEADER_BG); 
        h.setForeground(TABLE_HEADER_FG); 
        h.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14)); 
        h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        h.setReorderingAllowed(true); 
        h.setResizingAllowed(true); 
        
        DefaultTableCellRenderer r = new DefaultTableCellRenderer(); 
        r.setHorizontalAlignment(SwingConstants.LEFT); 
        r.setVerticalAlignment(SwingConstants.CENTER); 
        r.setBorder(new EmptyBorder(2, 5, 2, 5)); 
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(r);
        } 
    }
    
    private void styleScrollPane(JScrollPane scrollPane) { 
        scrollPane.setOpaque(false); 
        scrollPane.getViewport().setOpaque(false); 
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        applyScrollbarUI(scrollPane.getVerticalScrollBar()); 
        applyScrollbarUI(scrollPane.getHorizontalScrollBar()); 
    }
    
    private void applyScrollbarUI(JScrollBar scrollBar) { 
        scrollBar.setUI(new BasicScrollBarUI() { 
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK; 
                this.trackColor = DARK_BG_END;
            } 
            @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); } 
            @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); } 
            private JButton createZeroButton() {
                JButton b = new JButton();
                b.setPreferredSize(new Dimension(0, 0));
                b.setMaximumSize(new Dimension(0, 0));
                b.setMinimumSize(new Dimension(0, 0));
                return b;
            } 
            @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
                g.setColor(thumbColor);
                g.fillRect(r.x, r.y, r.width, r.height);
            } 
            @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
                g.setColor(trackColor);
                g.fillRect(r.x, r.y, r.width, r.height);
            } 
        }); 
        scrollBar.setUnitIncrement(16); 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        btn.setBackground(BUTTON_BG_DARK); 
        Border p = new EmptyBorder(6, 12, 6, 12); 
        btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()), p)); 
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        }); 
    }

    static class ButtonRenderer extends JButton implements TableCellRenderer {
        private final Color defaultBg;
        
        public ButtonRenderer(Color background) {
            setOpaque(true);
            this.defaultBg = background;
            setForeground(BUTTON_FG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
        }
        
        @Override 
        public Component getTableCellRendererComponent(JTable t, Object v, boolean s, boolean f, int r, int c) {
            setText((v == null) ? "" : v.toString());
            setBackground(s ? defaultBg.brighter() : defaultBg);
            return this;
        }
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private final Runnable action;
        private final Color bgColor;
        
        public ButtonEditor(JCheckBox c, Color bg, Runnable act) {
            super(c);
            this.action = act;
            this.bgColor = bg;
            button = new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTON_FG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.addActionListener(e -> fireEditingStopped());
        }
        
        @Override 
        public Component getTableCellEditorComponent(JTable t, Object v, boolean s, int r, int c) {
            label = (v == null) ? "" : v.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }
        
        @Override 
        public Object getCellEditorValue() {
            if (isPushed && action != null) {
                action.run();
            }
            isPushed = false;
            return label;
        }
        
        @Override 
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }
        
        @Override 
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/HomePanel.java
```java
// src/main/java/com/orphanagehub/gui/HomePanel.java
package com.orphanagehub.gui;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.util.function.Consumer;

public class HomePanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final JRadioButton radDonor;
    private final JRadioButton radOrphanageStaff;
    private final JRadioButton radVolunteer;
    private final JRadioButton radAdmin;
    private final ButtonGroup roleGroup;
    
    // Define colors locally for better encapsulation
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color FALLBACK_BG_DARK = new Color(60, 60, 60);

    public HomePanel(OrphanageHubApp app) {
        this.mainApp = app;
        setBorder(new EmptyBorder(30, 40, 30, 40));
        setLayout(new BorderLayout(20, 20));
        
        // Initialize radio buttons as final
        this.radDonor = new JRadioButton("Donor", true);
        this.radOrphanageStaff = new JRadioButton("Orphanage Staff");
        this.radVolunteer = new JRadioButton("Volunteer");
        this.radAdmin = new JRadioButton("Admin");
        this.roleGroup = new ButtonGroup();
        
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // Title
        JLabel lblTitle = new JLabel("Welcome to OrphanageHub", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        lblTitle.setBorder(new EmptyBorder(0, 0, 25, 0));
        add(lblTitle, BorderLayout.NORTH);
        
        // Center Panel with Image and Description
        JPanel centerPanel = new JPanel(new BorderLayout(30, 0));
        centerPanel.setOpaque(false);
        
        // Image Label
        JLabel lblImage = createImageLabel();
        centerPanel.add(lblImage, BorderLayout.WEST);
        
        // Description
        String htmlDesc = "<html><body style='width:350px; font-family: Sans-Serif; font-size: 14pt; color: rgb(200,200,200);'>"
                + "<p><b>A better world starts with care.</b></p>"
                + "<p>OrphanageHub connects orphanages with the donors and volunteers needed "
                + "to create lasting change for vulnerable children.</p>"
                + "</body></html>";
        JLabel lblDesc = new JLabel(htmlDesc);
        lblDesc.setVerticalAlignment(SwingConstants.CENTER);
        lblDesc.setHorizontalAlignment(SwingConstants.LEFT);
        lblDesc.setOpaque(false);
        lblDesc.setBorder(new EmptyBorder(0, 10, 0, 0));
        centerPanel.add(lblDesc, BorderLayout.CENTER);
        
        add(centerPanel, BorderLayout.CENTER);
        
        // South Panel with Role Selection and Buttons
        JPanel southPanel = new JPanel(new BorderLayout(10, 20));
        southPanel.setOpaque(false);
        
        // Role Panel
        JPanel rolePanel = createRolePanel();
        southPanel.add(rolePanel, BorderLayout.CENTER);
        
        // Button Panel
        JPanel buttonPanel = createButtonPanel();
        southPanel.add(buttonPanel, BorderLayout.SOUTH);
        
        add(southPanel, BorderLayout.SOUTH);
    }

    private JLabel createImageLabel() {
        JLabel lblImage = new JLabel();
        Dimension imageSize = new Dimension(220, 220);
        lblImage.setPreferredSize(imageSize);
        lblImage.setMinimumSize(imageSize);
        lblImage.setMaximumSize(imageSize);
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        lblImage.setVerticalAlignment(SwingConstants.CENTER);
        lblImage.setOpaque(false);
        
        URL imageURL = getClass().getResource("home.png");
        if (imageURL != null) {
            ImageIcon icon = new ImageIcon(imageURL);
            if (icon.getImageLoadStatus() == MediaTracker.COMPLETE && icon.getIconWidth() > 0) {
                Image img = icon.getImage().getScaledInstance(imageSize.width, imageSize.height, Image.SCALE_SMOOTH);
                lblImage.setIcon(new ImageIcon(img));
                lblImage.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK, 1));
            } else {
                setFallbackImageStyleDark(lblImage);
            }
        } else {
            setFallbackImageStyleDark(lblImage);
        }
        return lblImage;
    }

    private JPanel createRolePanel() {
        JPanel rolePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 25, 10));
        rolePanel.setOpaque(false);
        
        TitledBorder titledBorder = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(BORDER_COLOR_DARK),
                " Select Your Role ",
                TitledBorder.CENTER,
                TitledBorder.DEFAULT_POSITION,
                new Font(Font.SANS_SERIF, Font.BOLD, 15),
                TITLE_COLOR_DARK
        );
        rolePanel.setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10)));
        
        // Style radio buttons
        styleRadioButton(radDonor, "Select if you wish to donate or view needs.");
        styleRadioButton(radOrphanageStaff, "Select if you manage an orphanage profile.");
        styleRadioButton(radVolunteer, "Select if you want to find volunteer opportunities.");
        styleRadioButton(radAdmin, "Select if you are an administrator.");
        
        // Add to button group
        roleGroup.add(radDonor);
        roleGroup.add(radOrphanageStaff);
        roleGroup.add(radVolunteer);
        roleGroup.add(radAdmin);
        
        // Add role change listener using functional approach
        Consumer<JRadioButton> roleListener = button -> {
            if (button.isSelected()) {
                mainApp.setLastSelectedRole(getRoleFromButton(button));
            }
        };
        
        radDonor.addActionListener(e -> roleListener.accept(radDonor));
        radOrphanageStaff.addActionListener(e -> roleListener.accept(radOrphanageStaff));
        radVolunteer.addActionListener(e -> roleListener.accept(radVolunteer));
        radAdmin.addActionListener(e -> roleListener.accept(radAdmin));
        
        // Add to panel
        rolePanel.add(radDonor);
        rolePanel.add(radOrphanageStaff);
        rolePanel.add(radVolunteer);
        rolePanel.add(radAdmin);
        
        return rolePanel;
    }

    private JPanel createButtonPanel() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 5));
        buttonPanel.setOpaque(false);
        buttonPanel.setBorder(new EmptyBorder(15, 0, 10, 0));
        
        JButton btnLogin = new JButton("Login");
        JButton btnRegister = new JButton("Register");
        
        styleActionButton(btnLogin, "Proceed to login with your existing account.");
        styleActionButton(btnRegister, "Create a new account based on your selected role.");
        
        btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL));
        btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL));
        
        buttonPanel.add(btnLogin);
        buttonPanel.add(btnRegister);
        
        return buttonPanel;
    }

    private void setFallbackImageStyleDark(JLabel label) {
        label.setText("<html><div style='text-align: center; color: #AAAAAA;'>Image<br>Not Found<br>(home.png)</div></html>");
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 14));
        label.setForeground(new Color(170, 170, 170));
        label.setBorder(BorderFactory.createDashedBorder(BORDER_COLOR_DARK, 5, 5));
        label.setOpaque(true);
        label.setBackground(FALLBACK_BG_DARK);
    }

    private void styleRadioButton(JRadioButton rb, String tooltip) {
        rb.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        rb.setForeground(TEXT_COLOR_DARK);
        rb.setOpaque(false);
        rb.setToolTipText(tooltip);
        rb.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setBackground(BUTTON_BG_DARK);
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
        
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    private String getRoleFromButton(JRadioButton button) {
        if (button == radDonor) return "Donor";
        if (button == radOrphanageStaff) return "OrphanageStaff";
        if (button == radVolunteer) return "Volunteer";
        if (button == radAdmin) return "Admin";
        return "Unknown";
    }

    public String getSelectedRole() {
        if (radDonor.isSelected()) return "Donor";
        if (radOrphanageStaff.isSelected()) return "OrphanageStaff";
        if (radVolunteer.isSelected()) return "Volunteer";
        if (radAdmin.isSelected()) return "Admin";
        return "Unknown";
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/LoginPanel.java
```java
// src/main/java/com/orphanagehub/gui/LoginPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import com.orphanagehub.service.AuthService;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class LoginPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final AuthService authService = new AuthService();
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color LINK_COLOR = new Color(100, 180, 255);

    public LoginPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new GridBagLayout());
        setBorder(new EmptyBorder(40, 60, 40, 60));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Title
        JLabel lblTitle = new JLabel("User Login", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        gbc.gridx = 0; 
        gbc.gridy = 0; 
        gbc.gridwidth = 2; 
        gbc.weightx = 1.0; 
        gbc.insets = new Insets(0, 5, 25, 5);
        add(lblTitle, gbc);
        
        gbc.gridwidth = 1; 
        gbc.insets = new Insets(8, 5, 8, 5);

        // Username
        JLabel lblUsername = new JLabel("Username:"); 
        styleFormLabel(lblUsername);
        gbc.gridx = 0; 
        gbc.gridy = 1; 
        gbc.anchor = GridBagConstraints.EAST; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.weightx = 0;
        add(lblUsername, gbc);
        
        txtUsername = new JTextField(20); 
        styleTextField(txtUsername);
        gbc.gridx = 1; 
        gbc.gridy = 1; 
        gbc.anchor = GridBagConstraints.WEST; 
        gbc.fill = GridBagConstraints.HORIZONTAL; 
        gbc.weightx = 1.0;
        add(txtUsername, gbc);

        // Password
        JLabel lblPassword = new JLabel("Password:"); 
        styleFormLabel(lblPassword);
        gbc.gridx = 0; 
        gbc.gridy = 2; 
        gbc.anchor = GridBagConstraints.EAST; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.weightx = 0;
        add(lblPassword, gbc);
        
        txtPassword = new JPasswordField(20); 
        styleTextField(txtPassword);
        gbc.gridx = 1; 
        gbc.gridy = 2; 
        gbc.anchor = GridBagConstraints.WEST; 
        gbc.fill = GridBagConstraints.HORIZONTAL; 
        gbc.weightx = 1.0;
        add(txtPassword, gbc);

        // Login Button
        JButton btnLogin = new JButton("Login"); 
        styleActionButton(btnLogin, "Authenticate and access your dashboard");
        gbc.gridx = 0; 
        gbc.gridy = 3; 
        gbc.gridwidth = 2; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(20, 5, 10, 5);
        add(btnLogin, gbc);

        // Links Panel
        JPanel linksPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0)); 
        linksPanel.setOpaque(false);
        
        JLabel lblForgotPassword = createHyperlinkLabel("Forgot Password?"); 
        lblForgotPassword.setToolTipText("Click here to reset your password");
        lblForgotPassword.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseClicked(MouseEvent e) { 
                JOptionPane.showMessageDialog(LoginPanel.this, 
                    "Password reset functionality not yet implemented.", 
                    "Forgot Password", 
                    JOptionPane.INFORMATION_MESSAGE); 
            }
        });
        
        JLabel lblRegister = createHyperlinkLabel("Need an account? Register"); 
        lblRegister.setToolTipText("Click here to go to the registration page");
        lblRegister.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseClicked(MouseEvent e) { 
                mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); 
            }
        });
        
        linksPanel.add(lblForgotPassword); 
        linksPanel.add(lblRegister);
        gbc.gridx = 0; 
        gbc.gridy = 4; 
        gbc.gridwidth = 2; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(5, 5, 15, 5);
        add(linksPanel, gbc);

        // Back Button
        JButton btnBack = new JButton("Back"); 
        styleActionButton(btnBack, "Return to the welcome screen"); 
        btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() { 
            @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); } 
            @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        gbc.gridx = 0; 
        gbc.gridy = 5; 
        gbc.gridwidth = 2; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(10, 5, 5, 5);
        add(btnBack, gbc);

        // Login action with functional error handling
        btnLogin.addActionListener(e -> handleLogin());
    }
    
    private void handleLogin() {
        String username = txtUsername.getText().trim();
        char[] password = txtPassword.getPassword();
        
        if (username.isEmpty() || password.length == 0) {
            JOptionPane.showMessageDialog(this, 
                "Username and Password are required.", 
                "Login Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Use Try monad for functional error handling
        Try<User> authResult = authService.authenticate(username, new String(password));
        
        authResult
            .onSuccess(user -> {
                String target = getDashboardForRole(user.userRole());
                SwingUtilities.invokeLater(() -> {
                    clearPasswordField();
                    mainApp.showDashboard(target);
                });
            })
            .onFailure(ex -> {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, 
                        "Invalid credentials or authentication error", 
                        "Login Failed", 
                        JOptionPane.ERROR_MESSAGE);
                    clearPasswordField();
                    txtUsername.requestFocusInWindow();
                });
            });
        
        // Clear password array for security
        java.util.Arrays.fill(password, ' ');
    }
    
    private String getDashboardForRole(String role) {
        return switch (role) {
            case "OrphanageStaff" -> OrphanageHubApp.ORPHANAGE_DASHBOARD_PANEL;
            case "Donor" -> OrphanageHubApp.DONOR_DASHBOARD_PANEL;
            case "Volunteer" -> OrphanageHubApp.VOLUNTEER_DASHBOARD_PANEL;
            case "Admin" -> OrphanageHubApp.ADMIN_DASHBOARD_PANEL;
            default -> OrphanageHubApp.HOME_PANEL;
        };
    }
    
    private void clearPasswordField() {
        txtPassword.setText("");
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JComponent field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p = new EmptyBorder(5, 8, 5, 8); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1), p)); 
        if (field instanceof JTextField) {
            ((JTextField) field).setCaretColor(Color.LIGHT_GRAY); 
        } else if (field instanceof JPasswordField) {
            ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
        }
    }
    
    private JLabel createHyperlinkLabel(String text) { 
        JLabel l = new JLabel("<html><u>" + text + "</u></html>"); 
        l.setForeground(LINK_COLOR); 
        l.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12)); 
        l.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        return l; 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14)); 
        btn.setPreferredSize(new Dimension(130, 40)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setBackground(BUTTON_BG_DARK); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        Border l = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()); 
        Border p = new EmptyBorder(5, 15, 5, 15); 
        btn.setBorder(new CompoundBorder(l, p)); 
        btn.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override 
            public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            } 
        }); 
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.model.ResourceRequest;
import com.orphanagehub.service.OrphanageService;
import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import io.vavr.control.Option;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.time.LocalDateTime;

public class OrphanageDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final OrphanageService orphanageService;
    private DefaultTableModel resourceModel;
    private JTable resourceTable;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color ACCENT_COLOR_ORANGE = new Color(230, 145, 56);
    private static final Color ACCENT_COLOR_BLUE = new Color(72, 149, 239);
    private static final Color ACCENT_COLOR_GREEN = new Color(87, 190, 106);

    public OrphanageDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.orphanageService = new OrphanageService();
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2302");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(135, 206, 250));
        
        String orphanageName = SessionManager.getInstance()
            .getAttribute("orphanageName")
            .map(Object::toString)
            .getOrElse("Orphanage Dashboard");
            
        JLabel nameLabel = new JLabel(orphanageName);
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        
        String username = SessionManager.getInstance()
            .getAttribute("currentUsername")
            .map(Object::toString)
            .getOrElse("staff_user");
            
        JLabel userLabel = new JLabel("User: " + username);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
            @Override protected void installDefaults() {
                super.installDefaults();
                lightHighlight = TAB_BG_SELECTED;
                shadow = BORDER_COLOR_DARK;
                darkShadow = DARK_BG_END;
                focus = TAB_BG_SELECTED;
            }
            @Override protected void paintTabBackground(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) {
                g.setColor(isSelected ? TAB_BG_SELECTED : TAB_BG_UNSELECTED);
                g.fillRoundRect(x, y, w, h + 5, 5, 5);
            }
            @Override protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) { }
            @Override protected void paintContentBorder(Graphics g, int tabPlacement, int selectedIndex) {
                int width = tabPane.getWidth();
                int height = tabPane.getHeight();
                Insets insets = tabPane.getInsets();
                int tabAreaHeight = calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
                int x = insets.left;
                int y = insets.top + tabAreaHeight - 1;
                int w = width - insets.right - insets.left;
                int h = height - insets.top - insets.bottom - y;
                g.setColor(BORDER_COLOR_DARK);
                g.drawRect(x, y, w - 1, h - 1);
            }
        });
        
        tabbedPane.addTab("Overview", createOverviewTab());
        tabbedPane.addTab("Resource Requests", createResourceRequestsTab());
        tabbedPane.addTab("Donations", createPlaceholderTab("Donations Management"));
        tabbedPane.addTab("Volunteers", createPlaceholderTab("Volunteer Management"));
        tabbedPane.addTab("Orphanage Profile", createPlaceholderTab("Orphanage Profile Editor"));
        return tabbedPane;
    }

    private JPanel createOverviewTab() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 25, 25, 25));
        panel.add(createStatCard("Active Requests", "12", ACCENT_COLOR_ORANGE));
        panel.add(createStatCard("Pending Donations", "3", ACCENT_COLOR_BLUE));
        panel.add(createStatCard("Active Volunteers", "8", ACCENT_COLOR_GREEN));
        return panel;
    }

    private JPanel createStatCard(String title, String value, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout(5, 5));
        card.setBackground(TAB_BG_UNSELECTED);
        card.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),
                new EmptyBorder(15, 20, 15, 20)
        ));
        JLabel valueLabel = new JLabel(value, SwingConstants.CENTER);
        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 36));
        valueLabel.setForeground(TITLE_COLOR_DARK);
        card.add(valueLabel, BorderLayout.CENTER);
        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        titleLabel.setForeground(TEXT_COLOR_DARK);
        card.add(titleLabel, BorderLayout.SOUTH);
        return card;
    }

    private JPanel createResourceRequestsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        toolbar.setOpaque(false);
        
        JButton btnAdd = new JButton("Add Request");
        JButton btnEdit = new JButton("Edit Selected");
        JButton btnDelete = new JButton("Delete Selected");
        
        styleActionButton(btnAdd, "Create a new resource request");
        styleActionButton(btnEdit, "Modify the selected request");
        styleActionButton(btnDelete, "Remove the selected request");
        
        btnDelete.setBackground(new Color(192, 57, 43));
        btnDelete.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnDelete.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnDelete.setBackground(new Color(192, 57, 43)); }
        });
        
        btnAdd.addActionListener(e -> showAddResourceDialog());
        
        toolbar.add(btnAdd);
        toolbar.add(btnEdit);
        toolbar.add(btnDelete);
        panel.add(toolbar, BorderLayout.NORTH);
        
        String[] columnNames = {"ID", "Category", "Description", "Needed", "Fulfilled", "Urgency", "Status"};
        resourceModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        resourceTable = new JTable(resourceModel);
        styleTable(resourceTable);
        
        JScrollPane scrollPane = new JScrollPane(resourceTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        loadResourceRequests();
        
        return panel;
    }

    private void showAddResourceDialog() {
        JDialog dialog = new JDialog((Frame)SwingUtilities.getWindowAncestor(this), "Add Resource Request", true);
        dialog.setLayout(new GridBagLayout());
        dialog.setSize(400, 350);
        dialog.setLocationRelativeTo(this);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(new JLabel("Category:"), gbc);
        JComboBox<String> cmbCategory = new JComboBox<>(new String[]{"Food", "Clothing", "Education", "Medical", "Other"});
        gbc.gridx = 1;
        dialog.add(cmbCategory, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(new JLabel("Description:"), gbc);
        JTextField txtDescription = new JTextField(20);
        gbc.gridx = 1;
        dialog.add(txtDescription, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(new JLabel("Quantity Needed:"), gbc);
        JSpinner spnQuantity = new JSpinner(new SpinnerNumberModel(1, 1, 1000, 1));
        gbc.gridx = 1;
        dialog.add(spnQuantity, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(new JLabel("Urgency:"), gbc);
        JComboBox<String> cmbUrgency = new JComboBox<>(new String[]{"Low", "Medium", "High", "Critical"});
        gbc.gridx = 1;
        dialog.add(cmbUrgency, gbc);
        
        JPanel buttonPanel = new JPanel();
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");
        
        btnSave.addActionListener(e -> {
            String category = (String) cmbCategory.getSelectedItem();
            String description = txtDescription.getText().trim();
            int qty = (Integer) spnQuantity.getValue();
            String urgency = (String) cmbUrgency.getSelectedItem();
            
            if (description.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Please enter a description", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            SessionManager.getInstance().getAttribute("currentOrphanageId")
                .map(Object::toString)
                .forEach(orphanageId -> {
                    String userId = SessionManager.getInstance().getAttribute("currentUserId")
                        .map(Object::toString)
                        .getOrElse("unknown");
                    
                    ResourceRequest request = new ResourceRequest(
                        null,  // ID will be generated by database
                        orphanageId,
                        userId,
                        category,
                        description,
                        qty,   // quantityNeeded
                        0,     // quantityFulfilled (starts at 0)
                        urgency,
                        "Open",
                        Timestamp.valueOf(LocalDateTime.now())
                    );
                    
                    orphanageService.manageResourceRequest(request)
                        .onSuccess(v -> {
                            resourceModel.addRow(new Object[]{
                                request.requestId(),
                                request.itemCategory(),
                                request.itemDescription(),
                                request.quantityNeeded(),
                                request.quantityFulfilled(),
                                request.urgency(),
                                request.status()
                            });
                            dialog.dispose();
                            JOptionPane.showMessageDialog(this, "Resource request added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        })
                        .onFailure(ex -> 
                            JOptionPane.showMessageDialog(dialog, "Failed to add request: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE)
                        );
                });
        });
        
        btnCancel.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);
        
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);
        
        dialog.setVisible(true);
    }

    private void loadResourceRequests() {
        SessionManager.getInstance().getAttribute("currentOrphanageId")
            .map(Object::toString)
            .forEach(orphanageId -> 
                orphanageService.getRequests(orphanageId)
                    .onSuccess(requests -> {
                        resourceModel.setRowCount(0);
                        requests.forEach(r -> 
                            resourceModel.addRow(new Object[]{
                                r.requestId(),
                                r.itemCategory(),
                                r.itemDescription(),
                                r.quantityNeeded(),
                                r.quantityFulfilled(),
                                r.urgency(),
                                r.status()
                            })
                        );
                    })
                    .onFailure(ex -> 
                        JOptionPane.showMessageDialog(this, "Failed to load requests: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE)
                    )
            );
    }

    private JPanel createPlaceholderTab(String title) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        JLabel label = new JLabel(title + " - Content Area", SwingConstants.CENTER);
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 18));
        label.setForeground(TEXT_COLOR_DARK);
        panel.add(label);
        return panel;
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLE_CELL_BG);
        table.setForeground(TABLE_CELL_FG);
        table.setGridColor(TABLE_GRID_COLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG);
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0,1));
        
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLE_HEADER_BG);
        header.setForeground(TABLE_HEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
        table.getColumnModel().getColumn(0).setPreferredWidth(60);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setPreferredWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(80);
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(4).setPreferredWidth(80);
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(5).setPreferredWidth(100);
        table.getColumnModel().getColumn(6).setPreferredWidth(100);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }
        });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),
                padding));
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            }
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        });
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
```java
// src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;
import java.util.Optional;

public class OrphanageHubApp extends JFrame {

    private final CardLayout cardLayout;
    private final JPanel mainPanel;
    
    // Immutable role tracking using Optional for null safety
    private volatile String lastSelectedRole = "Donor"; // Default role

    // Panel Instances (keep references)
    private HomePanel homePanel;
    private LoginPanel loginPanel;
    private RegistrationPanel registrationPanel;
    private OrphanageDashboardPanel orphanageDashboardPanel;
    private DonorDashboardPanel donorDashboardPanel;
    private VolunteerDashboardPanel volunteerDashboardPanel;
    private AdminDashboardPanel adminDashboardPanel;

    // Panel names for CardLayout
    public static final String HOME_PANEL = "Home";
    public static final String LOGIN_PANEL = "Login";
    public static final String REGISTRATION_PANEL = "Registration";
    public static final String ORPHANAGE_DASHBOARD_PANEL = "OrphanageDashboard";
    public static final String DONOR_DASHBOARD_PANEL = "DonorDashboard";
    public static final String VOLUNTEER_DASHBOARD_PANEL = "VolunteerDashboard";
    public static final String ADMIN_DASHBOARD_PANEL = "AdminDashboard";

    public OrphanageHubApp() {
        super("OrphanageHub");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set Nimbus Look and Feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("CRITICAL FAILURE: Cannot set Nimbus Look and Feel. UI may appear incorrect.");
        }

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
        
        initComponents(); // Initialize components and layout

        // Set initial size
        setPreferredSize(new Dimension(900, 700));
        pack();
        setMinimumSize(new Dimension(750, 550));
        setLocationRelativeTo(null);
        setResizable(true);
    }

    private void initComponents() {
        // Instantiate CORE panels immediately
        homePanel = new HomePanel(this);
        loginPanel = new LoginPanel(this);
        registrationPanel = new RegistrationPanel(this);
        // Dashboard panels are instantiated on demand via showDashboard()

        // Add core panels to the CardLayout container
        mainPanel.add(homePanel, HOME_PANEL);
        mainPanel.add(loginPanel, LOGIN_PANEL);
        mainPanel.add(registrationPanel, REGISTRATION_PANEL);

        setContentPane(mainPanel);
    }

    /**
     * Navigates directly to a panel already added to the CardLayout.
     * @param panelName The name constant of the panel to show.
     */
    public void navigateTo(String panelName) {
        System.out.println("Navigating to: " + panelName); // Debug
        cardLayout.show(mainPanel, panelName);
    }

    /**
     * Creates (if necessary) and navigates to a dashboard panel.
     * Handles lazy instantiation of dashboard panels.
     * @param panelName The name constant of the dashboard panel to show.
     */
    public void showDashboard(String panelName) {
        System.out.println("Attempting to show dashboard: " + panelName); // Debug
        
        boolean panelAdded = switch (panelName) {
            case ORPHANAGE_DASHBOARD_PANEL -> {
                if (orphanageDashboardPanel == null) {
                    System.out.println("Creating Orphanage Dashboard Panel...");
                    orphanageDashboardPanel = new OrphanageDashboardPanel(this);
                    mainPanel.add(orphanageDashboardPanel, ORPHANAGE_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case DONOR_DASHBOARD_PANEL -> {
                if (donorDashboardPanel == null) {
                    System.out.println("Creating Donor Dashboard Panel...");
                    donorDashboardPanel = new DonorDashboardPanel(this);
                    mainPanel.add(donorDashboardPanel, DONOR_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case VOLUNTEER_DASHBOARD_PANEL -> {
                if (volunteerDashboardPanel == null) {
                    System.out.println("Creating Volunteer Dashboard Panel...");
                    volunteerDashboardPanel = new VolunteerDashboardPanel(this);
                    mainPanel.add(volunteerDashboardPanel, VOLUNTEER_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case ADMIN_DASHBOARD_PANEL -> {
                if (adminDashboardPanel == null) {
                    System.out.println("Creating Admin Dashboard Panel...");
                    adminDashboardPanel = new AdminDashboardPanel(this);
                    mainPanel.add(adminDashboardPanel, ADMIN_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            default -> {
                System.err.println("Error: Attempted to show unknown or unsupported dashboard panel: " + panelName);
                navigateTo(HOME_PANEL); // Fallback to home screen
                yield false;
            }
        };

        // Revalidate the main panel if a new component was actually added
        if (panelAdded) {
            mainPanel.revalidate();
            System.out.println(panelName + " Added and Revalidated.");
        }

        navigateTo(panelName); // Navigate to the requested panel
    }

    /**
     * Gets the selected role from HomePanel in a null-safe manner.
     * @return The selected role or "Unknown" if homePanel is null.
     */
    public String getSelectedRole() {
        return Optional.ofNullable(homePanel)
                .map(HomePanel::getSelectedRole)
                .orElse(lastSelectedRole); // Use last selected role as fallback
    }

    /**
     * Sets the last selected role for persistence across panel changes.
     * Thread-safe using volatile field.
     * @param role The role to remember.
     */
    public void setLastSelectedRole(String role) {
        if (role != null && !role.trim().isEmpty()) {
            this.lastSelectedRole = role;
            System.out.println("Role updated to: " + role); // Debug
        }
    }

    /**
     * Gets the last selected role.
     * @return The last selected role, never null.
     */
    public String getLastSelectedRole() {
        return lastSelectedRole;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            OrphanageHubApp app = new OrphanageHubApp();
            app.setVisible(true);
        });
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/RegistrationPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class RegistrationPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final RegistrationService registrationService;
    private String currentRole = "User";
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtFullName;
    private JPasswordField txtPassword;
    private JPasswordField txtConfirmPassword;
    private JComboBox<String> cmbOrphanage;
    private JCheckBox chkTerms;
    private JLabel lblTitle;
    private JLabel lblRoleIcon;
    private JPanel orphanagePanel;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTON_REGISTER_BG = new Color(60, 179, 113);
    private static final Color BUTTON_REGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOX_COLOR = new Color(180, 180, 180);

    public RegistrationPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.registrationService = new RegistrationService();
        setLayout(new BorderLayout());
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);

        lblRoleIcon = new JLabel("?");
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblRoleIcon);

        lblTitle = new JLabel("Register as " + currentRole);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblTitle);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 5, 20, 5);
        formPanel.add(titlePanel, gbc);

        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5);

        int gridY = 1;

        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword = new JPasswordField(25));
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword = new JPasswordField(25));

        orphanagePanel = new JPanel(new BorderLayout(5, 0));
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        String[] orphanages = {"Select Orphanage...", "Hope Children's Home", "Bright Future Orphanage", "Little Angels Shelter"};
        cmbOrphanage = new JComboBox<>(orphanages);
        styleComboBox(cmbOrphanage);
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false);

        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(15, 5, 15, 5);
        formPanel.add(chkTerms, gbc);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        btnRegister.setBackground(BUTTON_REGISTER_BG);
        btnRegister.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_BG); }
        });
        btnRegister.addActionListener(e -> registerAction());

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); }
            @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(10, 5, 5, 5);
        formPanel.add(buttonPanel, gbc);

        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }
        });
        verticalScrollBar.setUnitIncrement(16);

        add(scrollPane, BorderLayout.CENTER);
    }

    private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        panel.add(label, gbc);

        styleTextField(field);
        gbc.gridx = 1;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXT_COLOR_DARK);
    }

    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
                padding
        ));
        if (field instanceof JTextField) ((JTextField) field).setCaretColor(Color.LIGHT_GRAY);
        else if (field instanceof JPasswordField) ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
    }

    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOX_COLOR);
        checkBox.setOpaque(false);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
    }

    private void registerAction() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        char[] password = txtPassword.getPassword();
        char[] confirmPassword = txtConfirmPassword.getPassword();

        if (username.isEmpty() || email.isEmpty() || fullName.isEmpty() || password.length == 0) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!java.util.Arrays.equals(password, confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            java.util.Arrays.fill(password, '\0');
            java.util.Arrays.fill(confirmPassword, '\0');
            return;
        }
        if (currentRole.equals("OrphanageStaff") && cmbOrphanage.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Orphanage Staff must select an orphanage.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Using the correct method signature for RegistrationService
        registrationService.register(username, email, fullName, password, confirmPassword, currentRole)
            .onSuccess(user -> {
                // Clear sensitive data
                java.util.Arrays.fill(password, '\0');
                java.util.Arrays.fill(confirmPassword, '\0');
                
                JOptionPane.showMessageDialog(this, 
                    "Registration successful! Please login to continue.", 
                    "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
                clearForm();
                mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
            })
            .onFailure(ex -> {
                // Clear sensitive data
                java.util.Arrays.fill(password, '\0');
                java.util.Arrays.fill(confirmPassword, '\0');
                
                JOptionPane.showMessageDialog(this, 
                    ex.getMessage(), 
                    "Registration Error", 
                    JOptionPane.ERROR_MESSAGE);
            });
    }

    private void clearForm() {
        txtUsername.setText("");
        txtEmail.setText("");
        txtFullName.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        chkTerms.setSelected(false);
        if (cmbOrphanage != null) {
            cmbOrphanage.setSelectedIndex(0);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        
        // Get role from HomePanel
        currentRole = mainApp.getSelectedRole();
        
        lblTitle.setText("Register as " + currentRole);

        switch (currentRole) {
            case "Donor":
                lblRoleIcon.setText("\u2764");
                lblRoleIcon.setForeground(new Color(255, 105, 180));
                break;
            case "OrphanageStaff":
                lblRoleIcon.setText("\u2302");
                lblRoleIcon.setForeground(new Color(135, 206, 250));
                break;
            case "Volunteer":
                lblRoleIcon.setText("\u2605");
                lblRoleIcon.setForeground(new Color(255, 215, 0));
                break;
            default:
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLE_COLOR_DARK);
                break;
        }

        boolean isStaff = currentRole.equals("OrphanageStaff");
        orphanagePanel.setVisible(isStaff);

        revalidate();
        repaint();
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class VolunteerDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    
    private final transient OrphanageHubApp mainApp;
    
    private JLabel userLabel;
    private DefaultTableModel opportunitiesModel;
    private DefaultTableModel applicationsModel;
    private JTextField txtSkills;
    private JComboBox<String> cmbLocation;
    private JComboBox<String> cmbTime;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPLY_BG = new Color(87, 190, 106);
    private static final Color BUTTON_APPLY_HOVER_BG = new Color(97, 200, 116);

    public VolunteerDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.addTab("Browse Opportunities", createBrowseTab());
        tabbedPane.addTab("My Applications", createApplicationsTab());
        tabbedPane.addTab("Profile", createProfileTab());
        add(tabbedPane, BorderLayout.CENTER);
        
        SwingUtilities.invokeLater(() -> {
            updateUserLabel();
            loadOpportunities();
            loadApplications();
        });
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2605");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Volunteer Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("Welcome, Volunteer");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo("Home"));
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private void updateUserLabel() {
        SessionManager.getInstance().getAttribute("currentUser")
            .map(user -> "Welcome, " + user.toString())
            .peek(userLabel::setText)
            .onEmpty(() -> userLabel.setText("Welcome, Volunteer"));
    }

    private JPanel createBrowseTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 15));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 20, 20, 20));
        
        JPanel searchFilterPanel = createSearchFilterPanel();
        panel.add(searchFilterPanel, BorderLayout.NORTH);
        
        String[] columnNames = {"Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Status"};
        opportunitiesModel = new DefaultTableModel(columnNames, 0);
        JTable opportunitiesTable = new JTable(opportunitiesModel);
        styleTable(opportunitiesTable);
        
        opportunitiesTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = opportunitiesTable.getSelectedRow();
                    if (row >= 0) {
                        showApplyDialog(row);
                    }
                }
            }
        });
        
        JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        
        JButton btnApply = new JButton("Apply to Selected");
        styleActionButton(btnApply, "Apply to the selected opportunity");
        btnApply.setBackground(BUTTON_APPLY_BG);
        btnApply.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnApply.setBackground(BUTTON_APPLY_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnApply.setBackground(BUTTON_APPLY_BG); }
        });
        btnApply.addActionListener(e -> {
            int row = opportunitiesTable.getSelectedRow();
            if (row >= 0) {
                showApplyDialog(row);
            } else {
                showErrorMessage("Please select an opportunity to apply");
            }
        });
        
        buttonPanel.add(btnApply);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        
        JLabel lblLocation = new JLabel("Location:");
        styleFormLabel(lblLocation);
        cmbLocation = new JComboBox<>(new String[]{"Any Location", "City A", "City B", "Region C"});
        styleComboBox(cmbLocation);
        
        JLabel lblSkills = new JLabel("Skills:");
        styleFormLabel(lblSkills);
        txtSkills = new JTextField(15);
        styleTextField(txtSkills);
        
        JLabel lblTime = new JLabel("Commitment:");
        styleFormLabel(lblTime);
        cmbTime = new JComboBox<>(new String[]{"Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"});
        styleComboBox(cmbTime);
        
        JButton btnSearch = new JButton("Find Opportunities");
        styleActionButton(btnSearch, "Search for volunteer roles matching criteria");
        btnSearch.addActionListener(e -> performSearch());
        
        panel.add(lblLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblSkills);
        panel.add(txtSkills);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblTime);
        panel.add(cmbTime);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        
        return panel;
    }

    private JPanel createApplicationsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        String[] columnNames = {"Application Date", "Orphanage", "Opportunity", "Status", "Interview Date", "Actions"};
        applicationsModel = new DefaultTableModel(columnNames, 0);
        JTable applicationsTable = new JTable(applicationsModel);
        styleTable(applicationsTable);
        
        JScrollPane scrollPane = new JScrollPane(applicationsTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel statusPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statusPanel.setOpaque(false);
        statusPanel.setBorder(new CompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 0, 0, BORDER_COLOR_DARK),
            new EmptyBorder(10, 5, 5, 5)
        ));
        
        JLabel lblStatus = new JLabel("Total Applications: 0 | Pending: 0 | Accepted: 0 | Rejected: 0");
        lblStatus.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 13));
        lblStatus.setForeground(TEXT_COLOR_DARK);
        statusPanel.add(lblStatus);
        panel.add(statusPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createProfileTab() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField nameField = new JTextField(20);
        JTextField emailField = new JTextField(20);
        JTextArea skillsArea = new JTextArea(3, 20);
        JTextArea experienceArea = new JTextArea(4, 20);
        JComboBox<String> availabilityCombo = new JComboBox<>(new String[]{"Weekends", "Weekdays", "Flexible", "Event-Based"});
        
        int row = 0;
        
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Full Name:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        panel.add(emailField, gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Skills:"), gbc);
        gbc.gridx = 1;
        panel.add(new JScrollPane(skillsArea), gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Experience:"), gbc);
        gbc.gridx = 1;
        panel.add(new JScrollPane(experienceArea), gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Availability:"), gbc);
        gbc.gridx = 1;
        panel.add(availabilityCombo, gbc);
        
        row++;
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Save Profile");
        styleActionButton(saveButton, "Save your profile changes");
        saveButton.addActionListener(e -> saveProfile());
        buttonPanel.add(saveButton);
        
        gbc.gridx = 0; gbc.gridy = row;
        gbc.gridwidth = 2;
        panel.add(buttonPanel, gbc);
        
        styleTextField(nameField);
        styleTextField(emailField);
        styleTextArea(skillsArea);
        styleTextArea(experienceArea);
        styleComboBox(availabilityCombo);
        
        return panel;
    }

    private void loadOpportunities() {
        opportunitiesModel.setRowCount(0);
        opportunitiesModel.addRow(new Object[]{
            "Hope Children's Home", "Weekend Tutor", "City A", "Teaching", "Weekends", "Open"
        });
        opportunitiesModel.addRow(new Object[]{
            "Bright Future", "Event Helper", "City B", "Organizing", "Event-Based", "Open"
        });
    }

    private void loadApplications() {
        applicationsModel.setRowCount(0);
        applicationsModel.addRow(new Object[]{
            "2024-01-15", "Hope Children's Home", "Weekend Tutor", "Pending", "TBD", "View"
        });
    }

    private void performSearch() {
        loadOpportunities();
    }

    private void showApplyDialog(int row) {
        String orphanage = opportunitiesModel.getValueAt(row, 0).toString();
        String opportunity = opportunitiesModel.getValueAt(row, 1).toString();
        
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Apply for Opportunity", true);
        dialog.setLayout(new GridBagLayout());
        dialog.setSize(450, 400);
        dialog.setLocationRelativeTo(this);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JLabel titleLabel = new JLabel("Applying for: " + opportunity);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        
        JLabel orphanageLabel = new JLabel("At: " + orphanage);
        
        JTextArea coverLetterArea = new JTextArea(8, 30);
        JTextField availabilityField = new JTextField(20);
        
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.gridwidth = 2;
        dialog.add(titleLabel, gbc);
        
        gbc.gridy = 1;
        dialog.add(orphanageLabel, gbc);
        
        gbc.gridwidth = 1;
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(new JLabel("Cover Letter:"), gbc);
        gbc.gridx = 1;
        dialog.add(new JScrollPane(coverLetterArea), gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(new JLabel("Availability:"), gbc);
        gbc.gridx = 1;
        dialog.add(availabilityField, gbc);
        
        JPanel buttonPanel = new JPanel();
        JButton applyButton = new JButton("Submit Application");
        JButton cancelButton = new JButton("Cancel");
        
        applyButton.addActionListener(e -> {
            submitApplication(orphanage, opportunity, coverLetterArea.getText(), availabilityField.getText());
            dialog.dispose();
        });
        
        cancelButton.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(applyButton);
        buttonPanel.add(cancelButton);
        
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);
        
        dialog.setVisible(true);
    }

    private void submitApplication(String orphanage, String opportunity, String coverLetter, String availability) {
        showSuccessMessage("Application submitted successfully!");
        loadApplications();
    }

    private void saveProfile() {
        showSuccessMessage("Profile saved successfully!");
    }

    private void showSuccessMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXT_COLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(4, 6, 4, 6);
        field.setBorder(new CompoundBorder(
            BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
            padding
        ));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleTextArea(JTextArea area) {
        area.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        area.setForeground(INPUT_FG_DARK);
        area.setBackground(INPUT_BG_DARK);
        area.setBorder(new EmptyBorder(4, 6, 4, 6));
        area.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLE_CELL_BG);
        table.setForeground(TABLE_CELL_FG);
        table.setGridColor(TABLE_GRID_COLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG);
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0, 1));
        
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLE_HEADER_BG);
        header.setForeground(TABLE_HEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);
        renderer.setVerticalAlignment(SwingConstants.CENTER);
        renderer.setBorder(new EmptyBorder(2, 5, 2, 5));
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton b = new JButton();
                b.setPreferredSize(new Dimension(0, 0));
                return b;
            }
        });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(new CompoundBorder(
            BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),
            padding
        ));
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            }
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        });
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/gui/WelcomePanel.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WelcomePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(WelcomePanel.class);

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

    public WelcomePanel(Runnable registerAction, Runnable loginAction) {
        setLayout(new BorderLayout());

        JPanel contentPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        contentPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Welcome to OrphanageHub");
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLECOLOR_DARK);

        JButton btnRegister = createButton("Register", registerAction);
        JButton btnLogin = createButton("Login", loginAction);

        contentPanel.add(lblTitle);
        contentPanel.add(btnRegister);
        contentPanel.add(btnLogin);

        add(contentPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private JButton createButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        button.setPreferredSize(new Dimension(150, 50));
        button.setForeground(BUTTONFG_DARK);
        button.setBackground(BUTTONBG_DARK);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(e -> action.run());
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(BUTTONHOVER_BG_DARK);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(BUTTONBG_DARK);
            }
        });
        return button;
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/Donation.java
```java
package com.orphanagehub.model;

import io.vavr.control.Option;

/**
 * Represents a Donation (added for Phase 1 completeness).
 * Immutable.
 */
public record Donation(String donationId, String donorId, String orphanageId, String itemCategory,
                       Option<String> itemDescription, Option<Integer> amount, String status,
                       java.sql.Timestamp dateDonated) {

    /**
     * Gets formatted details.
     * @return Details string.
     */
    public String getDetails() {
        return "Donation to " + orphanageId + ": " + itemCategory + " (" + itemDescription.getOrElse("Monetary: " + amount.getOrElse(0)) + ")";
    }
}


```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/Orphanage.java
```java
package com.orphanagehub.model;

import io.vavr.control.Option;

/**
 * Represents an Orphanage, as per Phase 2 UML.
 * Immutable with getters/setters via with-methods (FP style).
 */
public record Orphanage(String orphanageId, String name, String address, String contactPerson,
                        Option<String> contactEmail, Option<String> contactPhone, String verificationStatus) {

    public static final String ORPHANAGE_TYPE = "Standard"; // UML constant

    /**
     * Gets formatted details.
     * @return Details string.
     */
    public String getDetails() {
        return name + " at " + address + ", Contact: " + contactPerson;
    }

    // Immutable setter (returns new instance)
    public Orphanage withName(String newName) {
        return new Orphanage(orphanageId, newName, address, contactPerson, contactEmail, contactPhone, verificationStatus);
    }

    public Orphanage withAddress(String newAddress) {
        return new Orphanage(orphanageId, name, newAddress, contactPerson, contactEmail, contactPhone, verificationStatus);
    }

    public Orphanage withContactPerson(String newContact) {
        return new Orphanage(orphanageId, name, address, newContact, contactEmail, contactPhone, verificationStatus);
    }

    public Orphanage withVerificationStatus(String newStatus) {
        return new Orphanage(orphanageId, name, address, contactPerson, contactEmail, contactPhone, newStatus);
    }

    public Orphanage withOrphanageId(String newId) {
        return new Orphanage(newId, name, address, contactPerson, contactEmail, contactPhone, verificationStatus);
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/OrphanageInfo.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.model;

public class OrphanageInfo {
    private String orphanageID;
    private String address;

    public String getOrphanageID() {
        return orphanageID;
    }

    public void setOrphanageID(String orphanageID) {
        this.orphanageID = orphanageID;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/ResourceRequest.java
```java
package com.orphanagehub.model;

/**
 * Represents a ResourceRequest, as per Phase 2 UML.
 * Immutable with update method.
 */
public record ResourceRequest(String requestId, String orphanageId, String userId, String itemCategory,
                              String itemDescription, int quantityNeeded, int quantityFulfilled,
                              String urgency, String status, java.sql.Timestamp datePosted) {

    public static final String DEFAULT_STATUS = "Open"; // UML constant

    /**
     * Gets formatted request details.
     * @return Details string.
     */
    public String getRequestDetails() {
        return itemDescription + " (Needed: " + quantityNeeded + ", Fulfilled: " + quantityFulfilled + "), Status: " + status;
    }

    /**
     * Updates status immutably.
     * @param newStatus The new status.
     * @return New instance with updated status.
     */
    public ResourceRequest updateStatus(String newStatus) {
        return new ResourceRequest(requestId, orphanageId, userId, itemCategory, itemDescription,
                quantityNeeded, quantityFulfilled, urgency, newStatus, datePosted);
    }

    public ResourceRequest withQuantityFulfilled(int newQuantity) {
        return new ResourceRequest(requestId, orphanageId, userId, itemCategory, itemDescription,
                quantityNeeded, newQuantity, urgency, status, datePosted);
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/User.java
```java
package com.orphanagehub.model;

import io.vavr.control.Option;

/**
 * Represents a User.
 * Immutable record for safety.
 */
public record User(String userId, String username, String passwordHash, String email, String userRole, java.sql.Timestamp dateRegistered, String fullName, String accountStatus) {

    /**
     * Gets the user's full details as a string.
     * @return Formatted details.
     */
    public String getDetails() {
        return "User: " + username + " (" + userRole + "), Email: " + email;
    }

    public User withAccountStatus(String newStatus) {
        return new User(userId, username, passwordHash, email, userRole, dateRegistered, fullName, newStatus);
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/model/VolunteerOpportunity.java
```java
package com.orphanagehub.model;

import io.vavr.control.Option;

/**
 * Represents a VolunteerOpportunity (added for Phase 1 completeness).
 * Immutable.
 */
public record VolunteerOpportunity(String opportunityId, String orphanageId, String skillRequired,
                                   String location, Option<String> timeCommitment, String status) {

    /**
     * Gets formatted details.
     * @return Details string.
     */
    public String getDetails() {
        return "Opportunity at " + orphanageId + ": " + skillRequired + " in " + location;
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/AdminService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.dao.DatabaseManager;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.User;
import io.vavr.collection.List;
import io.vavr.control.Try;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

import java.util.HashMap;

/**
 * Service for admin operations.
 * Handles user management, verifications, and reports.
 */
public class AdminService {

    private final UserDAO userDAO = new UserDAO();
    private final OrphanageDAO orphanageDAO = new OrphanageDAO();

    /**
     * Manages users (suspend/activate).
     * @param user The User to manage.
     * @param active New status (true/false).
     * @return Try<Void> - success on update, failure on error.
     */
    public Try<Void> manageUser(User user, boolean active) {
        // Assuming User record has withAccountStatus method or similar; adjust if needed
        User updatedUser = user.withAccountStatus(active ? "Active" : "Suspended");
        return userDAO.update(updatedUser);
    }

    /**
     * Verifies an orphanage.
     * @param orphanageId The ID to verify.
     * @param status New verification status.
     * @return Try<Void> - success on update, failure on error.
     */
    public Try<Void> verifyOrphanage(String orphanageId, String status) {
        return orphanageDAO.findById(orphanageId)
                .flatMap(opt -> opt.toTry(() -> new IllegalArgumentException("Orphanage not found")))
                .<Orphanage>map(o -> o.withVerificationStatus(status))
                .flatMap(orphanageDAO::update).map(o -> (Void) null);
    }

    /**
     * Generates a system report using Jasper.
     * @param reportType The type (e.g., "users").
     * @return Try<String> - path to exported PDF on success.
     */
    public Try<String> generateReport(String reportType) {
        return DatabaseManager.getConnection()
            .flatMap(conn -> Try.of(() -> {
                HashMap<String, Object> params = new HashMap<>(); // Dynamic params
                JasperPrint print = JasperFillManager.fillReport("reports/" + reportType + ".jasper", params, conn);
                String path = "reports/" + reportType + "_report.pdf";
                JasperExportManager.exportReportToPdfFile(print, path);
                return path;
            }));
    }

    // Additional: Get pending verifications
    public Try<List<Orphanage>> getPendingVerifications() {
        return orphanageDAO.findByVerificationStatus("Pending").map(List::ofAll);
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/AuthService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.model.User;
import io.vavr.control.Try;
import org.mindrot.jbcrypt.BCrypt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AuthService {
    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
    private UserDAO userDAO = new UserDAO();
    
    public Try<User> authenticate(String username, String password) {
        return userDAO.findByUsername(username)
            .flatMap(opt -> opt.toTry(() -> new IllegalArgumentException("User not found")))
            .filter(user -> BCrypt.checkpw(password, user.passwordHash()))
            .onFailure(ex -> logger.warn("Authentication failed for user: {}", username));
    }
    
    public Try<String> getUserRole(String username) {
        return userDAO.findByUsername(username)
            .flatMap(opt -> opt.toTry(() -> new IllegalArgumentException("User not found")))
            .map(User::userRole);
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/AuthenticationService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.model.User;
import com.orphanagehub.util.PasswordUtil;
import com.orphanagehub.util.SessionManager;
import com.orphanagehub.util.ValidationUtil;
import io.vavr.control.Try;

/**
 * Service for authentication operations.
 * Handles login and role retrieval with FP error handling.
 */
public class AuthenticationService {

    private final UserDAO userDAO = new UserDAO();

    /**
     * Authenticates a user with username and password.
     * @param username The username.
     * @param password The password (char[] for security).
     * @return Try<User> - the authenticated User on success, failure on error or invalid credentials.
     */
    public Try<User> authenticate(String username, char[] password) {
        return ValidationUtil.isValidUsername.apply(username)
                .flatMap(valid -> userDAO.findByUsername(username))
                .flatMap(optUser -> optUser.toTry(() -> new IllegalArgumentException("User not found")))
                .flatMap(user -> PasswordUtil.verify(password, user.passwordHash()) 
                        ? Try.success(user) 
                        : Try.failure(new IllegalArgumentException("Invalid password")));
    }

    /**
     * Gets the role for a username after authentication.
     * @param username The username.
     * @return Try<String> - the user's role on success, failure on error.
     */
    public Try<String> getUserRole(String username) {
        return userDAO.findByUsername(username)
                .map(optUser -> optUser.map(User::userRole))
                .flatMap(optRole -> optRole.toTry(() -> new IllegalArgumentException("Role not found")));
    }

    // Overload for role-based login (fixes earlier mismatch)
    public Try<User> authenticate(String username, char[] password, String expectedRole) {
        return authenticate(username, password)
                .flatMap(user -> user.userRole().equals(expectedRole) 
                        ? Try.success(user) 
                        : Try.failure(new IllegalArgumentException("Role mismatch")));
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/DonorService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.DonationDAO;
import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.model.Donation;
import com.orphanagehub.model.Orphanage;
import io.vavr.control.Try;
import org.locationtech.jts.geom.Point;

/**
 * Service for donor operations.
 * Handles donations and orphanage search.
 */
public class DonorService {

    private final DonationDAO donationDAO = new DonationDAO();
    private final OrphanageDAO orphanageDAO = new OrphanageDAO();

    /**
     * Makes a donation to an orphanage.
     * @param donation The Donation to record.
     * @return Try<Void> - success on record, failure on error.
     */
    public Try<Void> makeDonation(Donation donation) {
        return donationDAO.create(donation);
    }

    /**
     * Searches orphanages by location (using JTS for geo).
     * @param location The search location (e.g., Point).
     * @param radius The search radius in km.
     * @return Try<List<Orphanage>> - list of matching orphanages.
     */
    public Try<io.vavr.collection.List<Orphanage>> searchByLocation(Point location, double radius) {
        // For now, return all orphanages as location-based filtering requires actual geocoding API
        return orphanageDAO.findAll()
                .map(io.vavr.collection.List::ofAll)
                .map(all -> {
                    // TODO: Implement actual geocoding when API is available
                    // For demonstration, we'll return all orphanages within the "radius"
                    // In production, this would filter based on actual coordinates
                    return all.filter(o -> {
                        Point orphanageLocation = geocode(o.address());
                        if (orphanageLocation == null || location == null) {
                            // If we can't geocode, include the orphanage by default
                            return true;
                        }
                        return distanceTo(location, orphanageLocation) <= radius;
                    });
                });
    }

    // Helper: Geocode address (stub for future implementation)
    private Point geocode(String address) {
        // TODO: Integrate with actual geocoding service (Google Maps, OpenStreetMap, etc.)
        // For now, return null to indicate geocoding not available
        // In production, this would call an API to convert address to lat/lon coordinates
        return null;
    }

    // Helper: Calculate distance (efficient Haversine formula)
    private double distanceTo(Point p1, Point p2) {
        if (p1 == null || p2 == null) return Double.MAX_VALUE;
        double lat1 = p1.getY(), lon1 = p1.getX(), lat2 = p2.getY(), lon2 = p2.getX();
        double dLat = Math.toRadians(lat2 - lat1), dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        return 6371 * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // km
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/OrphanageService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.dao.ResourceRequestDAO;
import com.orphanagehub.dao.VolunteerOpportunityDAO;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.ResourceRequest;
import com.orphanagehub.model.VolunteerOpportunity;
import com.orphanagehub.util.ValidationUtil;
import io.vavr.collection.List;
import io.vavr.control.Try;

/**
 * Service for orphanage-related operations.
 * Manages profiles, requests, and opportunities.
 */
public class OrphanageService {

    private final OrphanageDAO orphanageDAO = new OrphanageDAO();
    private final ResourceRequestDAO requestDAO = new ResourceRequestDAO();
    private final VolunteerOpportunityDAO opportunityDAO = new VolunteerOpportunityDAO();

    /**
     * Creates or updates an orphanage profile.
     * @param orphanage The Orphanage to save.
     * @return Try<Void> - success on save, failure on error.
     */
    public Try<Void> saveProfile(Orphanage orphanage) {
        return orphanageDAO.findById(orphanage.orphanageId())
                .flatMap(opt -> opt.isDefined() ? orphanageDAO.update(orphanage).map(o -> (Void) null) : orphanageDAO.create(orphanage).map(o -> (Void) null));
    }

    /**
     * Adds or edits a resource request.
     * @param request The ResourceRequest to manage.
     * @return Try<Void> - success on operation, failure on error.
     */
    public Try<Void> manageResourceRequest(ResourceRequest request) {
        return Try.of(() -> {
                    if (request.quantityNeeded() <= 0) {
                        throw new IllegalArgumentException("Quantity needed must be positive");
                    }
                    return true;
                })
                .flatMap(valid -> (request.requestId() != null && !request.requestId().isEmpty()) ? requestDAO.update(request) : requestDAO.create(request));
    }

    /**
     * Gets all requests for an orphanage.
     * @param orphanageId The ID to filter.
     * @return Try<List<ResourceRequest>> - immutable list of requests.
     */
    public Try<List<ResourceRequest>> getRequests(String orphanageId) {
        return requestDAO.findByOrphanageId(orphanageId);
    }

    /**
     * Posts or manages a volunteer opportunity.
     * @param opportunity The VolunteerOpportunity to post.
     * @return Try<Void> - success on post, failure on error.
     */
    public Try<Void> manageVolunteerOpportunity(VolunteerOpportunity opportunity) {
        return (opportunity.opportunityId() != null && !opportunity.opportunityId().isEmpty()) ? 
            opportunityDAO.update(opportunity) : 
            opportunityDAO.create(opportunity);
    }

    // Additional: Acknowledge donation (Phase 1) - update request fulfilled
    public Try<Void> acknowledgeDonation(String requestId, int fulfilledAmount) {
        return requestDAO.findById(requestId)
                .flatMap(optReq -> optReq.toTry(() -> new IllegalArgumentException("Request not found")))
                .<ResourceRequest>map(req -> req.withQuantityFulfilled(req.quantityFulfilled() + fulfilledAmount))
                .flatMap(requestDAO::update);
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/RegistrationService.java
```java
package com.orphanagehub.service;

import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.model.User;
import com.orphanagehub.util.PasswordUtil;
import com.orphanagehub.util.ValidationUtil;
import io.vavr.control.Try;

/**
 * Service for registration operations.
 * Handles user creation with checks.
 */
public class RegistrationService {

    private final UserDAO userDAO = new UserDAO();

    /**
     * Registers a new user.
     * @param username Username.
     * @param email Email.
     * @param fullName Full name (unused here; extend User if needed).
     * @param password Password (char[]).
     * @param confirmPassword Confirmation (char[]).
     * @param role Role.
     * @return Try<User> - created User on success, failure on error (e.g., mismatch, taken).
     */
    public Try<User> register(String username, String email, String fullName, char[] password, char[] confirmPassword, String role) {
        return Try.sequence(io.vavr.collection.List.of(
                ValidationUtil.isValidUsername.apply(username),
                ValidationUtil.isValidEmail.apply(email),
                Try.of(() -> java.util.Arrays.equals(password, confirmPassword) ? true : Try.failure(new IllegalArgumentException("Passwords mismatch")).get())
        )).flatMap(seq -> isUsernameAvailable(username))
          .flatMap(avail -> avail ? isEmailAvailable(email) : Try.failure(new IllegalArgumentException("Username taken")))
          .flatMap(avail -> avail ? Try.success(true) : Try.failure(new IllegalArgumentException("Email taken")))
          .map(valid -> new User(null, username, PasswordUtil.hash(password), email, role, new java.sql.Timestamp(System.currentTimeMillis()), fullName, "Active"))
          .flatMap(user -> userDAO.create(user).map(v -> user))
          .flatMap(user -> userDAO.findByUsername(user.username()).map(opt -> opt.getOrElse((User)null))); // Return created
    }

    /**
     * Checks if username is available.
     * @param username The username.
     * @return Try<Boolean> - true if available.
     */
    public Try<Boolean> isUsernameAvailable(String username) {
        return userDAO.findByUsername(username).map(opt -> opt.isEmpty());
    }

    /**
     * Checks if email is available.
     * @param email The email.
     * @return Try<Boolean> - true if available.
     */
    public Try<Boolean> isEmailAvailable(String email) {
        // Assume add findByEmail to UserDAO
        return Try.success(true); // Stub; implement similarly
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/service/ServiceException.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.service;

public class ServiceException extends Exception {
    private static final long serialVersionUID = 1L;
    
    public ServiceException(String message) {
        super(message);
    }

    public ServiceException(String message, Throwable cause) {
        super(message, cause);
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/tools/DbDoctor.java
```java
package com.orphanagehub.tools;

import com.orphanagehub.dao.DatabaseManager;
import io.vavr.control.Try;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;

/**
 * Database diagnostic tool to verify database connectivity and schema.
 */
public class DbDoctor {
    public static void main(String[] args) {
        System.out.println("╔══════════════════════════════════════════════════╗");
        System.out.println("║        Database Doctor - Health Check Tool        ║");
        System.out.println("╚══════════════════════════════════════════════════╝\n");
        
        System.out.println("[1] Testing database connection...");
        
        Try<Connection> connectionTry = DatabaseManager.getConnection();
        
        if (connectionTry.isSuccess()) {
            System.out.println("✓ Database connection successful!");
            
            try (Connection conn = connectionTry.get()) {
                DatabaseMetaData meta = conn.getMetaData();
                System.out.println("\n[2] Database Information:");
                System.out.println("   Product: " + meta.getDatabaseProductName());
                System.out.println("   Version: " + meta.getDatabaseProductVersion());
                System.out.println("   Driver:  " + meta.getDriverName() + " v" + meta.getDriverVersion());
                
                System.out.println("\n[3] Checking required tables:");
                checkTable(meta, "TblUsers");
                checkTable(meta, "TblOrphanages");
                checkTable(meta, "TblResourceRequests");
                checkTable(meta, "TblDonations");
                checkTable(meta, "TblVolunteerOpportunities");
                
                System.out.println("\n[4] Database schema verification:");
                verifyUserTableColumns(conn);
                
                System.out.println("\n✓ All checks completed successfully!");
                
            } catch (SQLException e) {
                System.err.println("✗ Error during health check: " + e.getMessage());
                System.exit(1);
            }
        } else {
            System.err.println("✗ Database connection failed!");
            System.err.println("   Error: " + connectionTry.getCause().getMessage());
            System.err.println("\nTroubleshooting tips:");
            System.err.println("  1. Check if database file exists: db/OrphanageHub.accdb");
            System.err.println("  2. Ensure UCanAccess driver is in classpath");
            System.err.println("  3. Verify file permissions on database file");
            System.exit(1);
        }
    }
    
    private static void checkTable(DatabaseMetaData meta, String tableName) {
        try (ResultSet tables = meta.getTables(null, null, tableName, null)) {
            if (tables.next()) {
                System.out.println("   ✓ " + tableName + " exists");
            } else {
                System.out.println("   ✗ " + tableName + " NOT FOUND");
            }
        } catch (SQLException e) {
            System.err.println("   ✗ Error checking " + tableName + ": " + e.getMessage());
        }
    }
    
    private static void verifyUserTableColumns(Connection conn) {
        String[] requiredColumns = {
            "UserID", "Username", "PasswordHash", "Email", "UserRole", 
            "DateRegistered", "FullName", "AccountStatus"
        };
        
        System.out.println("   Checking TblUsers columns:");
        for (String column : requiredColumns) {
            if (columnExists(conn, "TblUsers", column)) {
                System.out.println("     ✓ " + column);
            } else {
                System.out.println("     ✗ " + column + " missing");
            }
        }
    }
    
    private static boolean columnExists(Connection conn, String tableName, String columnName) {
        try {
            DatabaseMetaData meta = conn.getMetaData();
            try (ResultSet columns = meta.getColumns(null, null, tableName, columnName)) {
                return columns.next();
            }
        } catch (SQLException e) {
            return false;
        }
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/tools/DbShell.java
```java
package com.orphanagehub.tools;

import com.orphanagehub.dao.DatabaseManager;
import io.vavr.control.Try;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

/**
 * CLI shell for executing SQL queries.
 * Interactive mode for dev.
 */
public class DbShell {

    /**
     * Executes a SQL query.
     * @param sql The SQL statement.
     * @return Try<String> - result set as string on success.
     */
    public static Try<String> executeQuery(String sql) {
        return DatabaseManager.getConnection()
                .flatMap(conn -> Try.of(() -> {
                    try (conn; Statement stmt = conn.createStatement()) {
                        boolean hasResultSet = stmt.execute(sql);
                        if (hasResultSet) {
                            ResultSet rs = stmt.getResultSet();
                            StringBuilder sb = new StringBuilder();
                            int columnCount = rs.getMetaData().getColumnCount();
                            while (rs.next()) {
                                for (int i = 1; i <= columnCount; i++) {
                                    sb.append(rs.getString(i));
                                    if (i < columnCount) sb.append(", ");
                                }
                                sb.append("\n");
                            }
                            return sb.toString();
                        } else {
                            return "Update count: " + stmt.getUpdateCount();
                        }
                    }
                }));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Database Shell - Enter SQL queries (type 'exit' to quit):");
        String sql;
        while (true) {
            System.out.print("SQL> ");
            sql = scanner.nextLine();
            if (sql.equalsIgnoreCase("exit")) {
                break;
            }
            executeQuery(sql)
                .onSuccess(System.out::println)
                .onFailure(e -> System.err.println("Error: " + e.getMessage()));
        }
        scanner.close();
        System.out.println("Goodbye!");
    }
}
```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/tools/DbTest.java
```java
package com.orphanagehub.tools;

import com.orphanagehub.dao.DatabaseManager;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DbTest {
    public static void main(String[] args) {
        System.out.println("Testing database connection...");
        
        DatabaseManager.getConnection()
            .onSuccess(conn -> {
                try {
                    System.out.println("✓ Connection successful");
                    
                    // Verify database details
                    DatabaseMetaData meta = conn.getMetaData();
                    System.out.println("Database: " + meta.getDatabaseProductName());
                    System.out.println("Version: " + meta.getDatabaseProductVersion());
                    
                    // Test a simple query
                    conn.createStatement().executeQuery("SELECT 1");
                    System.out.println("✓ Query execution successful");
                    
                    // Verify connection pooling
                    System.out.println("✓ Connection pool is active");
                    
                    conn.close();
                    System.out.println("✓ Connection closed successfully");
                } catch (SQLException e) {
                    System.err.println("✗ Error during test: " + e.getMessage());
                    e.printStackTrace();
                }
            })
            .onFailure(ex -> {
                System.err.println("✗ Connection failed: " + ex.getMessage());
                ex.printStackTrace();
            });
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/util/EdtGuard.java
```java

package com.orphanagehub.util;

import javax.swing.SwingUtilities;

public class EdtGuard {
    
    public static void runOnEdt(Runnable runnable) {
        if (SwingUtilities.isEventDispatchThread()) {
            runnable.run();
        } else {
            SwingUtilities.invokeLater(runnable);
        }
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/util/GlobalExceptionHandler.java
```java
package com.orphanagehub.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;

/**
 * Global handler for uncaught exceptions.
 * Logs and shows user-friendly messages.
 */
public class GlobalExceptionHandler implements Thread.UncaughtExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        logger.error("Uncaught exception in thread: {}", t.getName(), e);
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE));
    }

    /**
     * Installs the global handler.
     */
    public static void install() {
        Thread.setDefaultUncaughtExceptionHandler(new GlobalExceptionHandler());
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/util/PasswordUtil.java
```java
package com.orphanagehub.util;

import io.vavr.control.Option;
import io.vavr.control.Try;
import org.mindrot.jbcrypt.BCrypt;

import javax.swing.*;
import java.util.regex.Pattern;

/**
 * Utility for password hashing and verification using BCrypt.
 * Provides secure storage and comparison of passwords.
 */
public class PasswordUtil {

    private static final int WORK_FACTOR = 12; // Balanced security vs performance

    /**
     * Hashes a plain-text password using BCrypt.
     * @param plainPassword The password to hash (char[] for security).
     * @return The hashed password as a String.
     */
    public static String hash(char[] plainPassword) {
        return BCrypt.hashpw(new String(plainPassword), BCrypt.gensalt(WORK_FACTOR));
    }

    /**
     * Verifies a plain-text password against a stored hash.
     * @param plainPassword The input password (char[]).
     * @param hashedPassword The stored hash.
     * @return True if matches, false otherwise.
     */
    public static boolean verify(char[] plainPassword, String hashedPassword) {
        return BCrypt.checkpw(new String(plainPassword), hashedPassword);
    }
}


```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/util/SessionManager.java
```java
package com.orphanagehub.util;

import io.vavr.control.Option;
import java.util.HashMap;
import java.util.Map;

public class SessionManager {
    private static SessionManager instance;
    private Map<String, Object> attributes = new HashMap<>();
    
    private SessionManager() {}
    
    public static SessionManager getInstance() {
        if (instance == null) {
            instance = new SessionManager();
        }
        return instance;
    }
    
    public void setAttribute(String key, Object value) {
        attributes.put(key, value);
    }
    
    public Option<Object> getAttribute(String key) {
        return Option.of(attributes.get(key));
    }
    
    public void clear() {
        attributes.clear();
    }
}

```

------------------------------------------------------------

### File: src/main/java/com/orphanagehub/util/ValidationUtil.java
```java
package com.orphanagehub.util;

import io.vavr.Function1;
import io.vavr.control.Try;
import java.util.regex.Pattern;

public class ValidationUtil {
    
    private static final Pattern EMAIL_PATTERN = 
        Pattern.compile("^[A-Za-z0-9+_.-]+@(.+)$");
    
    private static final Pattern USERNAME_PATTERN = 
        Pattern.compile("^[a-zA-Z0-9_]{3,20}$");
    
    public static final Function1<String, Try<Boolean>> isValidEmail = email ->
        Try.of(() -> EMAIL_PATTERN.matcher(email).matches());
    
    public static final Function1<String, Try<Boolean>> isValidUsername = username ->
        Try.of(() -> USERNAME_PATTERN.matcher(username).matches());
    
    public static boolean isNotEmpty(String str) {
        return str != null && !str.trim().isEmpty();
    }
}


```

------------------------------------------------------------

### File: src/src/main/java/com/orphanagehub/tools/DbDoctor.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.tools;

import com.orphanagehub.dao.DatabaseManager;
import java.sql.Connection;

public class DbDoctor {
    public static void main(String[] args) {
        System.out.println("🩺 Checking database connectivity...");
        try (Connection conn = DatabaseManager.getConnection()) {
            if (conn != null && !conn.isClosed()) {
                System.out.println("\n✅ SUCCESS: Connection to the database was established successfully.");
            } else {
                 System.out.println("\n❌ FAILED: Connection returned null or was immediately closed.");
            }
        } catch (Exception e) {
            System.err.println("\n❌ FAILED: Could not connect to the database.");
            System.err.println("   Error Type: " + e.getClass().getSimpleName());
            System.err.println("   Message: " + e.getMessage());
            System.exit(1);
        }
    }
}

```

------------------------------------------------------------

### File: src/src/main/java/com/orphanagehub/tools/DbShell.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.tools;

import com.orphanagehub.dao.DatabaseManager;
import java.sql.*;

public class DbShell {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Usage: make db:sql q=\"YOUR_QUERY\"");
            System.exit(1);
        }
        String query = args[0];
        System.out.println("Executing: " + query);
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement()) {
            boolean hasResultSet = stmt.execute(query);
            if (hasResultSet) {
                try (ResultSet rs = stmt.getResultSet()) {
                    ResultSetMetaData meta = rs.getMetaData();
                    int colCount = meta.getColumnCount();
                    for (int i = 1; i <= colCount; i++) {
                        System.out.printf("%-25s", meta.getColumnName(i));
                    }
                    System.out.println("\n" + "-".repeat(colCount * 25));
                    while (rs.next()) {
                        for (int i = 1; i <= colCount; i++) {
                            System.out.printf("%-25s", rs.getString(i));
                        }
                        System.out.println();
                    }
                }
            } else {
                System.out.println("Query OK, " + stmt.getUpdateCount() + " rows affected.");
            }
        } catch (SQLException e) {
            System.err.println("Query failed: " + e.getMessage());
            System.exit(1);
        }
    }
}

```

================================================================================
## 4. RESOURCES
================================================================================

### File: src/main/resources/app.properties
```properties
# Database Configuration
db.url=jdbc:ucanaccess://db/OrphanageHub.accdb;newDatabaseVersion=V2010;memory=true;openExclusive=false

# Application Settings
app.name=OrphanageHub
app.version=1.0.0

# Security Settings
password.min.length=8
session.timeout.minutes=30

```

### File: src/main/resources/app.properties
```properties
# Database Configuration
db.url=jdbc:ucanaccess://db/OrphanageHub.accdb;newDatabaseVersion=V2010;memory=true;openExclusive=false

# Application Settings
app.name=OrphanageHub
app.version=1.0.0

# Security Settings
password.min.length=8
session.timeout.minutes=30

```

================================================================================
## 5. DATABASE CONFIGURATION
================================================================================

### File: db/details_database.txt
```text
=== Database Schema Details ===
Database Path: C:\Transfer\final_phase2\OrphanageHub.accdb
Extracted On: 08/28/2025 11:12:13

Total User Tables:   

--- Tables List ---

Table: TblOrphanages
Columns (Count: 8):
  - OrphanageID | Type: Text | Size: 10 | Nullable: No | Default: None | Position: 1
  - UserID | Type: Text | Size: 10 | Nullable: Yes | Default: None | Position: 2
  - Name | Type: Text | Size: 100 | Nullable: Yes | Default: None | Position: 3
  - Address | Type: Text | Size: 255 | Nullable: Yes | Default: None | Position: 4
  - ContactPerson | Type: Text | Size: 100 | Nullable: Yes | Default: None | Position: 5
  - ContactEmail | Type: Text | Size: 100 | Nullable: Yes | Default: None | Position: 6
  - ContactPhone | Type: Text | Size: 20 | Nullable: Yes | Default: None | Position: 7
  - VerificationStatus | Type: Text | Size: 20 | Nullable: Yes | Default: None | Position: 8

No Indexes Found.

Error fetching relationships: Exception calling "GetSchema" with "1" argument(s): "The requested collection (ReferentialConstraints) is not defined."

Sample Data (First 5 Rows):
  Row 1: OrphanageID: ORPH01 | UserID: U002 | Name: Hope Childrens Home | Address: 123 Charity Lane | ContactPerson: Alice Smith | ContactEmail: contact@hope.org | ContactPhone: 555-0101 | VerificationStatus: Verified
  Row 2: OrphanageID: ORPH02 | UserID: U001 | Name: Sunshine Shelter | Address: 456 Kindness Ave | ContactPerson: Bob Ray | ContactEmail: contact@sunshine.org | ContactPhone: 555-0102 | VerificationStatus: Pending

Table: TblResourceRequests
Columns (Count: 10):
  - RequestID | Type: Text | Size: 10 | Nullable: No | Default: None | Position: 1
  - OrphanageID | Type: Text | Size: 10 | Nullable: Yes | Default: None | Position: 2
  - UserID | Type: Text | Size: 10 | Nullable: Yes | Default: None | Position: 3
  - ItemCategory | Type: Text | Size: 50 | Nullable: Yes | Default: None | Position: 4
  - ItemDescription | Type: Text | Size: N/A | Nullable: Yes | Default: None | Position: 5
  - QuantityNeeded | Type: Long Integer | Size:  | Nullable: Yes | Default: None | Position: 6
  - QuantityFulfilled | Type: Long Integer | Size:  | Nullable: Yes | Default: None | Position: 7
  - Urgency | Type: Text | Size: 20 | Nullable: Yes | Default: None | Position: 8
  - Status | Type: Text | Size: 20 | Nullable: Yes | Default: None | Position: 9
  - DatePosted | Type: Date/Time | Size:  | Nullable: Yes | Default: None | Position: 10

No Indexes Found.

Error fetching relationships: Exception calling "GetSchema" with "1" argument(s): "The requested collection (ReferentialConstraints) is not defined."

Sample Data (First 5 Rows):
  Row 1: RequestID: REQ01 | OrphanageID: ORPH01 | UserID: U002 | ItemCategory: Food | ItemDescription: Canned vegetables and rice | QuantityNeeded: 100 | QuantityFulfilled: 20 | Urgency: High | Status: Open | DatePosted: 05/01/2024 15:00:00
  Row 2: RequestID: REQ02 | OrphanageID: ORPH01 | UserID: U002 | ItemCategory: Clothing | ItemDescription: Winter jackets for ages 5-12 | QuantityNeeded: 50 | QuantityFulfilled: 50 | Urgency: Medium | Status: Fulfilled | DatePosted: 05/02/2024 10:00:00
  Row 3: RequestID: REQ03 | OrphanageID: ORPH02 | UserID: U001 | ItemCategory: Medical | ItemDescription: Diapers and baby formula | QuantityNeeded: 200 | QuantityFulfilled: 0 | Urgency: High | Status: Open | DatePosted: 05/10/2024 08:00:00

Table: TblUsers
Columns (Count: 6):
  - UserID | Type: Text | Size: 10 | Nullable: No | Default: None | Position: 1
  - Username | Type: Text | Size: 50 | Nullable: Yes | Default: None | Position: 2
  - PasswordHash | Type: Text | Size: 255 | Nullable: Yes | Default: None | Position: 3
  - Email | Type: Text | Size: 100 | Nullable: Yes | Default: None | Position: 4
  - UserRole | Type: Text | Size: 20 | Nullable: Yes | Default: None | Position: 5
  - DateRegistered | Type: Date/Time | Size:  | Nullable: Yes | Default: None | Position: 6

No Indexes Found.

Error fetching relationships: Exception calling "GetSchema" with "1" argument(s): "The requested collection (ReferentialConstraints) is not defined."

Sample Data (First 5 Rows):
  Row 1: UserID: U001 | Username: admin | PasswordHash: hash_admin_pw | Email: admin@app.com | UserRole: Admin | DateRegistered: 01/01/2024 10:00:00
  Row 2: UserID: U002 | Username: staff_hope | PasswordHash: hash_staff_pw | Email: staff@hope.org | UserRole: OrphanageStaff | DateRegistered: 02/15/2024 11:30:00
  Row 3: UserID: U003 | Username: donor_jane | PasswordHash: hash_donor_pw | Email: jane.d@email.com | UserRole: Donor | DateRegistered: 03/20/2024 09:00:00
  Row 4: UserID: U004 | Username: vol_sam | PasswordHash: hash_vol_pw | Email: sam.g@email.com | UserRole: Volunteer | DateRegistered: 04/10/2024 14:00:00

```

### Database Files:
```
db/template.accdb (0.66 MB)
db/OrphanageHub.accdb (0.66 MB)
```

================================================================================
## 6. SCRIPTS
================================================================================

### Available Scripts:
```
scripts/db_manager.py (743 bytes)
scripts/doctor_chimera.py (25136 bytes)
scripts/fix_all_panels.sh (1042 bytes)
scripts/fix_errors.py (5147 bytes)
scripts/fix_syntax.py (3390 bytes)
scripts/geo_cache.py (218 bytes)
scripts/log_analyzer.py (1855 bytes)
scripts/parse_errors.py (21857 bytes)
scripts/quick_patch.sh (1663 bytes)
scripts/refactor_logging.py (3860 bytes)
scripts/sanitize_sources.py (1786 bytes)
scripts/section_build.py (12837 bytes)
scripts/smart.py (12053 bytes)
scripts/verify_setup.py (2760 bytes)
```

================================================================================
## 7. BUILD ERRORS
================================================================================

### Recent Compilation Errors:
```
  location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[33,70] cannot find symbol
  symbol:   variable BUTTON_HOVER_BG_DARK
  location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[188,20] cannot find symbol
  symbol:   method setLastSelectedRole(java.lang.String)
  location: variable mainApp of type com.orphanagehub.gui.OrphanageHubApp
[INFO] 9 errors 
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  7.030 s
[INFO] Finished at: 2025-09-06T08:43:41+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.13.0:compile (default-compile) on project OrphanageHub: Compilation failure: Compilation failure: 
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[26,63] cannot find symbol
[ERROR]   symbol:   variable DARK_BG_START
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[27,61] cannot find symbol
[ERROR]   symbol:   variable DARK_BG_END
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[28,66] cannot find symbol
[ERROR]   symbol:   variable TITLE_COLOR_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[29,65] cannot find symbol
[ERROR]   symbol:   variable TEXT_COLOR_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[30,67] cannot find symbol
[ERROR]   symbol:   variable BORDER_COLOR_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[31,64] cannot find symbol
[ERROR]   symbol:   variable BUTTON_BG_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[32,64] cannot find symbol
[ERROR]   symbol:   variable BUTTON_FG_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[33,70] cannot find symbol
[ERROR]   symbol:   variable BUTTON_HOVER_BG_DARK
[ERROR]   location: class com.orphanagehub.gui.OrphanageHubApp
[ERROR] /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui/HomePanel.java:[188,20] cannot find symbol
[ERROR]   symbol:   method setLastSelectedRole(java.lang.String)
[ERROR]   location: variable mainApp of type com.orphanagehub.gui.OrphanageHubApp
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

```

================================================================================
## 8. PROJECT STATISTICS
================================================================================

### Code Metrics:
- Total Java Files: 38
- Total Lines of Code: 4690

### File Count by Type:
```
.java files: 49
.xml files: 5
.properties files: 3
```

================================================================================
## 9. PROJECT SPECIFICATIONS
================================================================================

### Problem Statement:
- Orphanages face resource management and transparency challenges
- Need centralized system for tracking donations and volunteers

### Solution:
- Java Swing desktop application
- MS Access database backend
- Multi-role user system

### Target Users:
1. Orphanage Administrators
2. Donors
3. Volunteers
4. System Administrators

### Core Features:
- User authentication and role management
- Resource request tracking
- Donation management
- Volunteer opportunity coordination
- Reporting and analytics

### Technical Stack:
- Java 17+
- Maven 3.8+
- MS Access (via UCanAccess)
- Java Swing GUI

### Database Tables:
- TblUsers
- TblOrphanages
- TblResourceRequests
- TblDonations
- TblVolunteerOpportunities
- TblInventory

================================================================================
## 10. DOCUMENTATION
================================================================================

### File: README.md
```markdown
\# OrphanageHub



A professional desktop application for managing orphanage operations, donations, and resource allocation, built with Java Swing and featuring an advanced development workflow with section-based compilation for 10-15x faster development cycles.



\## 📋 Table of Contents



\- \[Overview](#overview)

\- \[Features](#features)

\- \[System Requirements](#system-requirements)

\- \[Installation](#installation)

\- \[Quick Start](#quick-start)

\- \[Ultra-Fast Development Workflow](#ultra-fast-development-workflow)

\- \[Complete Command Reference](#complete-command-reference)

\- \[Project Architecture](#project-architecture)

\- \[Database Management](#database-management)

\- \[Testing](#testing)# OrphanageHub



A professional desktop application for managing orphanage operations, donations, and resource allocation, built with Java Swing and featuring an advanced development workflow with section-based compilation for 10-15x faster development cycles.



\## 📋 Table of Contents



\- \[Overview](#overview)

\- \[Features](#features)

\- \[System Requirements](#system-requirements)

\- \[Installation](#installation)

\- \[Quick Start](#quick-start)

\- \[Ultra-Fast Development Workflow](#ultra-fast-development-workflow)

\- \[Complete Command Reference](#complete-command-reference)

\- \[Project Architecture](#project-architecture)

\- \[Database Management](#database-management)

\- \[Testing](#testing)

\- \[Debugging Guide](#debugging-guide)

\- \[Code Quality Standards](#code-quality-standards)

\- \[Python Scripts Documentation](#python-scripts-documentation)

\- \[Performance Benchmarks](#performance-benchmarks)

\- \[Troubleshooting](#troubleshooting)

\- \[Contributing](#contributing)

\- \[Support](#support)

\- \[License](#license)



\## Overview



OrphanageHub is a comprehensive management system for orphanage operations, providing:



\- \*\*Multi-role authentication\*\* with secure user management

\- \*\*Resource management\*\* with real-time tracking

\- \*\*Donation processing\*\* with automated receipts

\- \*\*Volunteer coordination\*\* with scheduling

\- \*\*Administrative dashboards\*\* with reporting



The development environment features a revolutionary section-based compilation system that reduces build times by 90% and provides instant feedback during development.



\## Features



\### Application Features



| Feature | Description |

|---------|-------------|

| \*\*Authentication\*\* | Secure multi-role login (Admin, Donor, Volunteer, Staff) |

| \*\*User Management\*\* | Complete CRUD operations with role-based access |

| \*\*Orphanage Management\*\* | Registration, profile management, resource allocation |

| \*\*Donation System\*\* | Payment processing, receipt generation, donor history |

| \*\*Volunteer Portal\*\* | Schedule management, hour tracking, task assignments |

| \*\*Reporting\*\* | Analytics dashboards, export capabilities |



\### Development Features



| Feature | Description |

|---------|-------------|

| \*\*Section Compilation\*\* | Compile only changed modules (10-15x faster) |

| \*\*Watch Mode\*\* | Auto-recompile on file save with live dashboard |

| \*\*Smart Caching\*\* | Content-based hash caching per section |

| \*\*Dependency Tracking\*\* | Automatic downstream recompilation |

| \*\*Debug Tools\*\* | Thread dumps, heap analysis, remote debugging |

| \*\*Quality Enforcement\*\* | Automated formatting and static analysis |



\## System Requirements



\### Minimum Requirements

\- \*\*Java JDK\*\*: Version 17 (exactly - enforced by Maven)

\- \*\*Maven\*\*: Version 3.8 or higher

\- \*\*Python\*\*: Version 3.9 or higher

\- \*\*RAM\*\*: 4GB minimum

\- \*\*Disk Space\*\*: 500MB for application + dependencies



\### Operating System

\- \*\*Linux\*\*: Ubuntu 20.04+, Debian 11+, Fedora 34+, Kali 2021.1+

\- \*\*macOS\*\*: 11.0 (Big Sur) or later

\- \*\*Windows\*\*: 10/11 (WSL2 recommended for best experience)



\### Database

\- \*\*MS Access\*\*: .accdb file format

\- \*\*JDBC Driver\*\*: UCanAccess 5.0.1 (managed by Maven)



\## Installation



\### Step 1: Verify Prerequisites



```bash

\\# Check Java version (must show 17)

java --version



\\# Check Maven version (must be 3.8+)

mvn --version



\\# Check Python version (must be 3.9+)

python3 --version



\\# Check Make (Linux/macOS/WSL)

make --version

```



\### Step 2: Clone Repository



```bash

\\# Clone the repository

git clone https://github.com/yourusername/OrphanageHub\\\_PAT2025.git

cd OrphanageHub\\\_PAT2025

```



\### Step 3: Initial Setup



```bash

\\# Create required directories

mkdir -p db logs target/section-classes



\\# Run automated setup (creates Python venv, installs dependencies)

make setup



\\# Verify setup completed successfully

python3 scripts/verify\\\_setup.py

```



\### Step 4: Database Setup



```bash

\\# Option A: Use existing database

cp /path/to/your/OrphanageHub.accdb db/OrphanageHub.accdb



\\# Option B: Start with template database

cp db/template.accdb db/OrphanageHub.accdb



\\# Verify database connectivity

make db-ping

```



\## Quick Start



\### Fastest Path to Running Application (2 minutes)



```bash

\\# 1. Compile with section compiler (3-5 seconds)

make section-compile



\\# 2. Run the application (instant)

make section-run



\\# Or combine both:

make section-compile \\\&\\\& make section-run

```



\### Traditional Maven Approach (slower but comprehensive)



```bash

\\# Full Maven build and run (30-45 seconds)

make run

```



\## Ultra-Fast Development Workflow



\### The Game-Changing Two-Terminal Setup



This workflow provides near-instant feedback, making Java development feel as responsive as interpreted languages.



\#### Terminal 1: Live Compilation Dashboard

```bash

make section-watch

```



This starts an intelligent watcher that:

\- ✅ Monitors all Java files in `src/main/java/`

\- ✅ Auto-detects which section changed

\- ✅ Recompiles only affected sections

\- ✅ Shows compilation status per module

\- ✅ Displays errors with file and line numbers

\- ✅ Updates timing statistics



\#### Terminal 2: Instant Application Launch

```bash

make section-run

```



Since Terminal 1 has already compiled the code, this launches instantly (<1 second).



\### Section Architecture



The project is divided into logical sections with defined dependencies:



```

┌──────────────────────────────────────────┐

│                   util                    │ (No dependencies)

└────────────────┬─────────────────────────┘

\&nbsp;                │

┌────────────────▼─────────────────────────┐

│                  model                    │ (Depends on: util)

└────────────────┬─────────────────────────┘

\&nbsp;                │

┌────────────────▼─────────────────────────┐

│                   dao                     │ (Depends on: model, util)

└─────┬───────────────────────┬─────────────┘

\&nbsp;     │                       │

┌─────▼──────┐         ┌─────▼─────────────┐

│   tools    │         │     service        │ (Depends on: dao, model, util)

└────────────┘         └─────┬──────────────┘

\&nbsp;                            │

\&nbsp;                     ┌──────▼─────────────┐

\&nbsp;                     │       gui           │ (Depends on: service, dao, model, util)

\&nbsp;                     └─────────────────────┘

```



\### Performance Comparison



| Operation | Traditional Maven | Section Compiler | Improvement | Time Saved |

|-----------|------------------|------------------|-------------|------------|

| Full Build | 45 seconds | 5 seconds | \*\*9x faster\*\* | 40 seconds |

| Single File Change | 30 seconds | 2 seconds | \*\*15x faster\*\* | 28 seconds |

| No Changes | 15 seconds | 0.1 seconds | \*\*150x faster\*\* | 14.9 seconds |

| Application Launch | 8 seconds | <1 second | \*\*8x faster\*\* | 7 seconds |



\## Complete Command Reference



\### Development Workflow Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make section-compile` | Compile changed sections only | 2-3s |

| `make section-watch` | Start watch mode with dashboard | Continuous |

| `make section-run` | Run using compiled classes | <1s |

| `make section-clean` | Remove section-compiled classes | Instant |

| `make section-rebuild` | Force rebuild all sections | 5s |



\### Traditional Maven Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make build` | Full Maven package | 30s |

| `make run` | Maven compile and run | 45s |

| `make clean` | Maven clean | 2s |

| `make compile` | Maven compile only | 20s |



\### Quality \& Testing Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make format` | Apply Google Java Format | 3s |

| `make check` | Run format check + SpotBugs | 10s |

| `make test` | Run all JUnit tests | 15s |

| `make test-single TEST=UserDAOTest` | Run specific test | 5s |

| `make ci` | Complete CI pipeline | 60s |



\### Debugging Commands



| Command | Description | Usage |

|---------|-------------|-------|

| `make debug` | Start with debug port 5005 | For IDE attachment |

| `make jdb` | Connect CLI debugger | Interactive debugging |

| `make pid` | Get application PID | Process management |

| `make thread-dump` | Generate thread dump | Diagnose freezes |

| `make heap-dump` | Generate heap histogram | Memory analysis |

| `make diagnose` | Full diagnostic report | Complete analysis |



\### Database Commands



| Command | Description | Example |

|---------|-------------|---------|

| `make db-ping` | Test connectivity | `make db-ping` |

| `make db-reset` | Reset from template | `make db-reset` |

| `make db-backup` | Create backup | `make db-backup` |

| `make db-sql` | Execute SQL query | `make db-sql q="SELECT \\\* FROM TblUsers"` |



\### Utility Commands



| Command | Description |

|---------|-------------|

| `make setup` | One-time project setup |

| `make python-setup` | Setup Python environment |

| `make verify` | Verify installation |

| `make help` | Show all commands |



\## Project Architecture



\### Directory Structure



```

OrphanageHub\\\_PAT2025/

│

├── src/

│   ├── main/

│   │   ├── java/com/orphanagehub/

│   │   │   ├── util/                  # Utilities (no dependencies)

│   │   │   │   ├── EdtGuard.java

│   │   │   │   ├── GlobalExceptionHandler.java

│   │   │   │   ├── PasswordUtil.java

│   │   │   │   └── ValidationUtil.java

│   │   │   │

│   │   │   ├── model/                 # Data models (depends on util)

│   │   │   │   ├── User.java

│   │   │   │   ├── Orphanage.java

│   │   │   │   ├── Donation.java

│   │   │   │   ├── ResourceRequest.java

│   │   │   │   └── OrphanageInfo.java

│   │   │   │

│   │   │   ├── dao/                   # Data access (depends on model, util)

│   │   │   │   ├── DatabaseManager.java

│   │   │   │   ├── UserDAO.java

│   │   │   │   ├── OrphanageDAO.java

│   │   │   │   ├── DonationDAO.java

│   │   │   │   └── ResourceRequestDAO.java

│   │   │   │

│   │   │   ├── service/               # Business logic (depends on dao, model, util)

│   │   │   │   ├── AuthService.java

│   │   │   │   ├── AdminService.java

│   │   │   │   ├── DonorService.java

│   │   │   │   ├── OrphanageService.java

│   │   │   │   └── RegistrationService.java

│   │   │   │

│   │   │   ├── gui/                   # UI layer (depends on service, dao, model, util)

│   │   │   │   ├── OrphanageHubApp.java

│   │   │   │   ├── LoginPanel.java

│   │   │   │   ├── HomePanel.java

│   │   │   │   ├── AdminDashboardPanel.java

│   │   │   │   ├── DonorDashboardPanel.java

│   │   │   │   └── VolunteerDashboardPanel.java

│   │   │   │

│   │   │   └── tools/                 # CLI tools (depends on dao, model, util)

│   │   │       ├── DbDoctor.java

│   │   │       └── DbShell.java

│   │   │

│   │   └── resources/

│   │       ├── app.properties

│   │       └── images/

│   │

│   └── test/

│       └── java/com/orphanagehub/

│           ├── dao/

│           ├── service/

│           └── util/

│

├── scripts/                            # Python automation

│   ├── section\\\_build.py               # Section compiler engine

│   ├── db\\\_manager.py                  # Database utilities

│   ├── log\\\_analyzer.py                # Log analysis

│   ├── verify\\\_setup.py                # Setup verification

│   ├── requirements.txt               # Python dependencies

│   └── .venv/                         # Python virtual environment

│

├── db/                                 # Database files

│   ├── OrphanageHub.accdb            # Main database

│   └── template.accdb                # Clean template

│

├── logs/                              # Application logs

│   ├── orphanagehub.log              # Main application log

│   ├── thread-dump-\\\*.txt             # Thread dumps

│   └── heap-histo-\\\*.txt              # Heap histograms

│

├── target/                            # Build output

│   ├── section-classes/              # Section compiler output

│   │   ├── util/

│   │   ├── model/

│   │   ├── dao/

│   │   ├── service/

│   │   ├── gui/

│   │   └── tools/

│   ├── classes/                      # Maven output

│   └── OrphanageHub-1.0.jar         # Packaged application

│

├── .gitignore                         # Git ignore rules

├── Makefile                          # Command automation

├── pom.xml                           # Maven configuration

├── README.md                         # This file

└── LICENSE                           # MIT License

```



\### Package Dependencies Graph



```mermaid

graph TD

\&nbsp;   util\\\[com.orphanagehub.util]

\&nbsp;   model\\\[com.orphanagehub.model]

\&nbsp;   dao\\\[com.orphanagehub.dao]

\&nbsp;   service\\\[com.orphanagehub.service]

\&nbsp;   gui\\\[com.orphanagehub.gui]

\&nbsp;   tools\\\[com.orphanagehub.tools]

\&nbsp;   

\&nbsp;   model --> util

\&nbsp;   dao --> model

\&nbsp;   dao --> util

\&nbsp;   service --> dao

\&nbsp;   service --> model

\&nbsp;   service --> util

\&nbsp;   gui --> service

\&nbsp;   gui --> dao

\&nbsp;   gui --> model

\&nbsp;   gui --> util

\&nbsp;   tools --> dao

\&nbsp;   tools --> model

\&nbsp;   tools --> util

```



\## Database Management



\### Database Schema



```sql

-- Core Tables

TblUsers                    -- User accounts and authentication

TblOrphanages              -- Orphanage profiles and information

TblDonations               -- Donation records and receipts

TblResourceRequests        -- Resource needs and requests

TblVolunteers              -- Volunteer profiles and hours



-- Lookup Tables

TblRoles                   -- User role definitions

TblDonationTypes          -- Types of donations

TblResourceCategories     -- Resource categorization

```



\### Database Configuration



Location: `src/main/resources/app.properties`



```properties

\\# Database Configuration

db.url=jdbc:ucanaccess://db/OrphanageHub.accdb

db.driver=net.sf.ucanaccess.jdbc.UcanaccessDriver

db.showSQL=false

db.pool.size=10

db.timeout=30



\\# Application Configuration

app.name=OrphanageHub

app.version=1.0.0

app.debug=false

```



\### Database Operations



```bash

\\# Test connectivity

make db-ping



\\# Reset to clean state (warning: deletes all data)

make db-reset



\\# Create backup

make db-backup



\\# Run SQL queries

make db-sql q="SELECT COUNT(\\\*) FROM TblUsers"

make db-sql q="SELECT \\\* FROM TblOrphanages WHERE City='Mumbai'"



\\# Interactive SQL shell

java -cp "$(make classpath)" com.orphanagehub.tools.DbShell

```



\## Testing



\### Test Structure



```

src/test/java/com/orphanagehub/

├── dao/

│   ├── UserDAOTest.java

│   ├── OrphanageDAOTest.java

│   └── DonationDAOTest.java

├── service/

│   ├── AuthServiceTest.java

│   ├── AdminServiceTest.java

│   └── DonorServiceTest.java

└── util/

\&nbsp;   ├── ValidationUtilTest.java

\&nbsp;   └── PasswordUtilTest.java

```



\### Running Tests



```bash

\\# Run all tests

make test



\\# Run specific test class

make test-single TEST=UserDAOTest



\\# Run with coverage report

mvn test jacoco:report

open target/site/jacoco/index.html



\\# Run tests in watch mode (re-runs on file change)

mvn test -Dmaven.test.failure.ignore=true -Dtest=\\\*Test -DforkCount=0

```



\### Writing Tests



```java

@Test

public void testUserAuthentication() {

\&nbsp;   // Arrange

\&nbsp;   String username = "testuser";

\&nbsp;   String password = "SecurePass123!";

\&nbsp;   User testUser = new User(username, PasswordUtil.hash(password), "Admin");

\&nbsp;   userDAO.create(testUser);

\&nbsp;   

\&nbsp;   // Act

\&nbsp;   User authenticated = authService.authenticate(username, password);

\&nbsp;   

\&nbsp;   // Assert

\&nbsp;   assertNotNull(authenticated);

\&nbsp;   assertEquals(username, authenticated.getUsername());

\&nbsp;   assertEquals("Admin", authenticated.getRole());

}

```



\## Debugging Guide



\### Common Debugging Scenarios



\#### Scenario 1: Application Won't Start



```bash

\\# Step 1: Check Java version

java --version  # Must be exactly 17



\\# Step 2: Verify database connection

make db-ping



\\# Step 3: Check for port conflicts

lsof -i :5005  # Debug port

lsof -i :8080  # Application port (if applicable)



\\# Step 4: Review logs

tail -f logs/orphanagehub.log

```



\#### Scenario 2: UI Freeze/Unresponsive



```bash

\\# Step 1: Get application PID

make pid



\\# Step 2: Generate thread dump

make thread-dump



\\# Step 3: Analyze EDT thread

grep -A 20 "AWT-EventQueue" logs/thread-dump-\\\*.txt



\\# Common fix: Ensure long operations use SwingWorker

```



\#### Scenario 3: Memory Issues/OutOfMemoryError



```bash

\\# Step 1: Generate heap histogram

make heap-dump



\\# Step 2: Analyze top memory consumers

head -30 logs/heap-histo-\\\*.txt



\\# Step 3: Increase heap size if needed

export MAVEN\\\_OPTS="-Xmx2048m -Xms512m"



\\# Step 4: Generate full heap dump for deep analysis

jcmd $(make pid) GC.heap\\\_dump heap.hprof

jhat heap.hprof  # Browse at http://localhost:7000

```



\#### Scenario 4: Compilation Errors



```bash

\\# Step 1: Clean all build artifacts

make section-clean

make clean



\\# Step 2: Force rebuild

make section-rebuild



\\# Step 3: If specific section fails

make section-compile 2>\\\&1 | grep -A 5 "error:"



\\# Step 4: Verify dependencies

mvn dependency:tree

```



\### IDE Debugging Setup



\#### Visual Studio Code



1\. Install "Extension Pack for Java"

2\. Create `.vscode/launch.json`:



```json

{

\&nbsp;   "version": "0.2.0",

\&nbsp;   "configurations": \\\[

\&nbsp;       {

\&nbsp;           "type": "java",

\&nbsp;           "name": "Debug OrphanageHub",

\&nbsp;           "request": "attach",

\&nbsp;           "hostName": "localhost",

\&nbsp;           "port": 5005

\&nbsp;       }

\&nbsp;   ]

}

```



3\. Run `make debug`

4\. Press F5 to attach debugger



\#### IntelliJ IDEA



1\. Run → Edit Configurations

2\. Add New Configuration → Remote JVM Debug

3\. Settings:

   - Host: localhost

   - Port: 5005

   - Command line arguments: (auto-generated)

4\. Run `make debug`

5\. Click Debug button



\#### Eclipse



1\. Run → Debug Configurations

2\. Remote Java Application → New

3\. Settings:

   - Project: OrphanageHub

   - Host: localhost

   - Port: 5005

4\. Run `make debug`

5\. Click Debug



\### Command-Line Debugging (jdb)



```bash

\\# Terminal 1: Start application in debug mode

make debug



\\# Terminal 2: Connect debugger

make jdb



\\# JDB commands:

stop in com.orphanagehub.gui.LoginPanel.login

run

print username

locals

where

step

cont

exit

```



\## Code Quality Standards



\### Enforced Standards



1\. \*\*Google Java Format\*\* - Automatically applied

2\. \*\*SpotBugs\*\* - Static analysis for bugs

3\. \*\*Line Length\*\* - Maximum 100 characters

4\. \*\*Indentation\*\* - 4 spaces (no tabs)



\### Running Quality Checks



```bash

\\# Format all code

make format



\\# Check formatting without changing

make check



\\# Run all quality checks

make ci

```



\### Coding Conventions



```java

// Package naming: all lowercase

package com.orphanagehub.service;



// Class naming: PascalCase

public class UserService {

\&nbsp;   

\&nbsp;   // Constants: UPPER\\\_SNAKE\\\_CASE

\&nbsp;   private static final int MAX\\\_LOGIN\\\_ATTEMPTS = 3;

\&nbsp;   

\&nbsp;   // Fields: camelCase with prefix

\&nbsp;   private final UserDAO userDAO;

\&nbsp;   private String currentUser;

\&nbsp;   

\&nbsp;   // Methods: camelCase

\&nbsp;   public User authenticateUser(String username, String password) {

\&nbsp;       // Implementation

\&nbsp;   }

\&nbsp;   

\&nbsp;   // JavaDoc for public methods

\&nbsp;   /\\\*\\\*

\&nbsp;    \\\* Authenticates a user against the database.

\&nbsp;    \\\* 

\&nbsp;    \\\* @param username the username to check

\&nbsp;    \\\* @param password the plain text password

\&nbsp;    \\\* @return the authenticated User or null

\&nbsp;    \\\* @throws AuthenticationException if database error occurs

\&nbsp;    \\\*/

\&nbsp;   public User authenticate(String username, String password) 

\&nbsp;           throws AuthenticationException {

\&nbsp;       // Implementation

\&nbsp;   }

}

```



\## Python Scripts Documentation



\### section\_build.py



The core engine for fast compilation.



\*\*Features:\*\*

\- Section-based compilation with dependency tracking

\- Content-based hash caching

\- Watch mode with auto-recompilation

\- Error aggregation and reporting



\*\*Usage:\*\*

```bash

\\# Compile changed sections

python3 scripts/section\\\_build.py



\\# Force rebuild all

python3 scripts/section\\\_build.py -f



\\# Watch mode

python3 scripts/section\\\_build.py -w



\\# Clean artifacts

python3 scripts/section\\\_build.py -c



\\# Run specific section

python3 scripts/section\\\_build.py -r gui

```



\### db\_manager.py



Database lifecycle management utility.



\*\*Usage:\*\*

```bash

\\# Reset database from template

python3 scripts/db\\\_manager.py reset



\\# Create backup

python3 scripts/db\\\_manager.py backup



\\# Restore from backup

python3 scripts/db\\\_manager.py restore backup-20240101.accdb



\\# Verify connectivity

python3 scripts/db\\\_manager.py ping

```



\### log\_analyzer.py



Log parsing and analysis tool.



\*\*Usage:\*\*

```bash

\\# Analyze all logs

python3 scripts/log\\\_analyzer.py



\\# Analyze specific date range

python3 scripts/log\\\_analyzer.py --from 2024-01-01 --to 2024-01-31



\\# Generate HTML report

python3 scripts/log\\\_analyzer.py --output report.html



\\# Show only errors

python3 scripts/log\\\_analyzer.py --level ERROR

```



\### verify\_setup.py



Installation verification script.



\*\*Usage:\*\*

```bash

\\# Check all requirements

python3 scripts/verify\\\_setup.py



\\# Auto-fix common issues

python3 scripts/verify\\\_setup.py --fix



\\# Verbose output

python3 scripts/verify\\\_setup.py -v

```



\## Performance Benchmarks



\### Compilation Performance



| Metric | Traditional Maven | Section Compiler | Improvement |

|--------|------------------|------------------|-------------|

| Full Clean Build | 45 seconds | 5 seconds | \*\*9x faster\*\* |

| Incremental Build (1 file) | 30 seconds | 2 seconds | \*\*15x faster\*\* |

| No Changes | 15 seconds | 0.1 seconds | \*\*150x faster\*\* |

| Large Refactor (10 files) | 35 seconds | 4 seconds | \*\*8.75x faster\*\* |



\### Memory Usage



| Component | Maven Build | Section Build | Savings |

|-----------|-------------|---------------|---------|

| Peak Memory | 512 MB | 128 MB | 384 MB |

| Average Memory | 350 MB | 80 MB | 270 MB |

| Minimum Required | 256 MB | 64 MB | 192 MB |



\### Developer Productivity



| Metric | Before | After | Improvement |

|--------|--------|-------|-------------|

| Daily Compilations | 50 | 200+ | 4x more |

| Average Wait Time | 30s | 2s | 93% reduction |

| Time to First Run | 2 min | 15s | 87% reduction |

| Debug Setup Time | 3 min | 30s | 83% reduction |



\## Troubleshooting



\### Installation Issues



| Problem | Solution |

|---------|----------|

| "Java 17 not found" | Install exactly JDK 17, not 11 or 21 |

| "Maven not found" | Install Maven 3.8+ or use `./mvnw` |

| "Python not found" | Install Python 3.9+ and ensure it's in PATH |

| "make: command not found" | Windows: Use WSL2 or Git Bash |



\### Compilation Issues



| Problem | Solution |

|---------|----------|

| "Cannot find symbol" | Run `make section-rebuild` |

| "Package does not exist" | Check `pom.xml` dependencies |

| "Duplicate class" | Run `make clean \\\&\\\& make section-clean` |

| Watch mode not detecting | Install watchdog: `pip install watchdog` |



\### Runtime Issues



| Problem | Solution |

|---------|----------|

| "ClassNotFoundException" | Rebuild: `make section-rebuild` |

| "NoClassDefFoundError" | Check classpath: `make classpath` |

| Database locked | Kill process and remove `\\\*.laccdb` files |

| UI frozen | Check EDT violations in logs |



\### Platform-Specific Issues



\#### Windows (Native)

```batch

REM Use mvnw.cmd instead of mvnw

mvnw.cmd clean package



REM Use python instead of python3

python scripts/section\\\_build.py

```



\#### WSL2/Linux

```bash

\\# Increase file watchers for watch mode

echo fs.inotify.max\\\_user\\\_watches=524288 | sudo tee -a /etc/sysctl.conf

sudo sysctl -p



\\# Fix line endings if cloned on Windows

find . -type f -name "\\\*.java" -exec dos2unix {} \\\\;

```



\#### macOS

```bash

\\# If mvnw fails with permission denied

chmod +x mvnw



\\# Install command line tools if missing

xcode-select --install

```



\## Contributing



\### Getting Started



1\. \*\*Fork the repository\*\* on GitHub

2\. \*\*Clone your fork\*\*:

   ```bash

   git clone https://github.com/yourusername/OrphanageHub\_PAT2025.git

   cd OrphanageHub\_PAT2025

   ```

3\. \*\*Set up upstream\*\*:

   ```bash

   git remote add upstream https://github.com/original/OrphanageHub\_PAT2025.git

   ```

4\. \*\*Create feature branch\*\*:

   ```bash

   git checkout -b feature/your-feature-name

   ```



\### Development Process



1\. \*\*Start watch mode\*\*:

   ```bash

   make section-watch

   ```

2\. \*\*Make your changes\*\* in your IDE

3\. \*\*Test your changes\*\*:

   ```bash

   make test

   ```

4\. \*\*Format your code\*\*:

   ```bash

   make format

   ```

5\. \*\*Commit with meaningful message\*\*:

   ```bash

   git commit -m "feat(module): add new feature

 

   - Detailed description

   - Another detail

 

   Closes #123"

   ```



\### Pull Request Guidelines



1\. \*\*Update your branch\*\*:

   ```bash

   git fetch upstream

   git rebase upstream/main

   ```

2\. \*\*Push to your fork\*\*:

   ```bash

   git push origin feature/your-feature-name

   ```

3\. \*\*Create Pull Request\*\* on GitHub

4\. \*\*Ensure CI passes\*\* (all checks green)

5\. \*\*Address review feedback\*\*

6\. \*\*Squash commits\*\* if requested



\### Commit Message Format



```

type(scope): subject



body



footer

```



\*\*Types:\*\*

\- `feat`: New feature

\- `fix`: Bug fix

\- `docs`: Documentation

\- `style`: Formatting

\- `refactor`: Code restructuring

\- `test`: Adding tests

\- `chore`: Maintenance



\*\*Example:\*\*

```

feat(auth): implement two-factor authentication



\\- Added TOTP generation and validation

\\- Updated login flow to check 2FA

\\- Added QR code generation for setup

\\- Created backup codes system



Closes #456

Refs #123

```



\## Support



\### Getting Help



\- \*\*Documentation\*\*: This README and JavaDoc

\- \*\*Issues\*\*: \[GitHub Issues](https://github.com/yourusername/OrphanageHub\_PAT2025/issues)

\- \*\*Discussions\*\*: \[GitHub Discussions](https://github.com/yourusername/OrphanageHub\_PAT2025/discussions)

\- \*\*Wiki\*\*: \[Project Wiki](https://github.com/yourusername/OrphanageHub\_PAT2025/wiki)



\### Reporting Bugs



Please include:

1\. \*\*Environment\*\*: OS, Java version, Maven version

2\. \*\*Steps to reproduce\*\*: Exact commands run

3\. \*\*Expected behavior\*\*: What should happen

4\. \*\*Actual behavior\*\*: What actually happened

5\. \*\*Logs\*\*: Relevant portions from `logs/`

6\. \*\*Screenshots\*\*: For UI issues



\*\*Bug Report Template:\*\*

```markdown

\\### Environment

\\- OS: Ubuntu 22.04

\\- Java: 17.0.8

\\- Maven: 3.9.4

\\- Python: 3.10.6



\\### Steps to Reproduce

1\\. Run `make section-compile`

2\\. Change UserDAO.java

3\\. Run `make section-compile` again



\\### Expected Behavior

Should recompile only dao section



\\### Actual Behavior

Recompiles all sections



\\### Logs

\\\[Attach relevant logs]

```



\### Feature Requests



Include:

1\. \*\*Use case\*\*: Why is this needed?

2\. \*\*Proposed solution\*\*: How should it work?

3\. \*\*Alternatives considered\*\*: Other approaches

4\. \*\*Additional context\*\*: Mockups, examples



\## License



MIT License



Copyright (c) 2024 OrphanageHub Contributors



Permission is hereby granted, free of charge, to any person obtaining a copy

of this software and associated documentation files (the "Software"), to deal

in the Software without restriction, including without limitation the rights

to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

copies of the Software, and to permit persons to whom the Software is

furnished to do so, subject to the following conditions:



The above copyright notice and this permission notice shall be included in all

copies or substantial portions of the Software.



THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

SOFTWARE.



---



\## Quick Reference Card



\### Essential Commands

```bash

\\# Development

make section-watch          # Start live compilation

make section-run            # Run application



\\# Quality

make format                 # Format code

make test                   # Run tests



\\# Debugging  

make debug                  # Start debug mode

make thread-dump            # Diagnose freezes



\\# Database

make db-ping                # Test connection

make db-reset               # Reset database

```



\### Keyboard Shortcuts

```bash

\\# Terminal

Ctrl+C                      # Stop current process

Ctrl+Z                      # Suspend to background

fg                          # Resume suspended process



\\# JDB Debugger

where                       # Show stack trace

locals                      # Show local variables

print <var>                 # Print variable value

cont                        # Continue execution

```



\### Performance Tips

1\. Keep `make section-watch` running always

2\. Use `make section-run` instead of `make run`

3\. Clean periodically: `make section-clean`

4\. Increase heap for large projects: `export MAVEN\\\_OPTS="-Xmx2g"`



---



\*\*Built with ❤️ for social impact\*\*



\*Version 1.0.0\*



\- \[Debugging Guide](#debugging-guide)

\- \[Code Quality Standards](#code-quality-standards)

\- \[Python Scripts Documentation](#python-scripts-documentation)

\- \[Performance Benchmarks](#performance-benchmarks)

\- \[Troubleshooting](#troubleshooting)

\- \[Contributing](#contributing)

\- \[Support](#support)

\- \[License](#license)



\## Overview



OrphanageHub is a comprehensive management system for orphanage operations, providing:



\- \*\*Multi-role authentication\*\* with secure user management

\- \*\*Resource management\*\* with real-time tracking

\- \*\*Donation processing\*\* with automated receipts

\- \*\*Volunteer coordination\*\* with scheduling

\- \*\*Administrative dashboards\*\* with reporting



The development environment features a revolutionary section-based compilation system that reduces build times by 90% and provides instant feedback during development.



\## Features



\### Application Features



| Feature | Description |

|---------|-------------|

| \*\*Authentication\*\* | Secure multi-role login (Admin, Donor, Volunteer, Staff) |

| \*\*User Management\*\* | Complete CRUD operations with role-based access |

| \*\*Orphanage Management\*\* | Registration, profile management, resource allocation |

| \*\*Donation System\*\* | Payment processing, receipt generation, donor history |

| \*\*Volunteer Portal\*\* | Schedule management, hour tracking, task assignments |

| \*\*Reporting\*\* | Analytics dashboards, export capabilities |



\### Development Features



| Feature | Description |

|---------|-------------|

| \*\*Section Compilation\*\* | Compile only changed modules (10-15x faster) |

| \*\*Watch Mode\*\* | Auto-recompile on file save with live dashboard |

| \*\*Smart Caching\*\* | Content-based hash caching per section |

| \*\*Dependency Tracking\*\* | Automatic downstream recompilation |

| \*\*Debug Tools\*\* | Thread dumps, heap analysis, remote debugging |

| \*\*Quality Enforcement\*\* | Automated formatting and static analysis |



\## System Requirements



\### Minimum Requirements

\- \*\*Java JDK\*\*: Version 17 (exactly - enforced by Maven)

\- \*\*Maven\*\*: Version 3.8 or higher

\- \*\*Python\*\*: Version 3.9 or higher

\- \*\*RAM\*\*: 4GB minimum

\- \*\*Disk Space\*\*: 500MB for application + dependencies



\### Operating System

\- \*\*Linux\*\*: Ubuntu 20.04+, Debian 11+, Fedora 34+, Kali 2021.1+

\- \*\*macOS\*\*: 11.0 (Big Sur) or later

\- \*\*Windows\*\*: 10/11 (WSL2 recommended for best experience)



\### Database

\- \*\*MS Access\*\*: .accdb file format

\- \*\*JDBC Driver\*\*: UCanAccess 5.0.1 (managed by Maven)



\## Installation



\### Step 1: Verify Prerequisites



```bash

\\# Check Java version (must show 17)

java --version



\\# Check Maven version (must be 3.8+)

mvn --version



\\# Check Python version (must be 3.9+)

python3 --version



\\# Check Make (Linux/macOS/WSL)

make --version

```



\### Step 2: Clone Repository



```bash

\\# Clone the repository

git clone https://github.com/yourusername/OrphanageHub\\\_PAT2025.git

cd OrphanageHub\\\_PAT2025

```



\### Step 3: Initial Setup



```bash

\\# Create required directories

mkdir -p db logs target/section-classes



\\# Run automated setup (creates Python venv, installs dependencies)

make setup



\\# Verify setup completed successfully

python3 scripts/verify\\\_setup.py

```



\### Step 4: Database Setup



```bash

\\# Option A: Use existing database

cp /path/to/your/OrphanageHub.accdb db/OrphanageHub.accdb



\\# Option B: Start with template database

cp db/template.accdb db/OrphanageHub.accdb



\\# Verify database connectivity

make db-ping

```



\## Quick Start



\### Fastest Path to Running Application (2 minutes)



```bash

\\# 1. Compile with section compiler (3-5 seconds)

make section-compile



\\# 2. Run the application (instant)

make section-run



\\# Or combine both:

make section-compile \\\&\\\& make section-run

```



\### Traditional Maven Approach (slower but comprehensive)



```bash

\\# Full Maven build and run (30-45 seconds)

make run

```



\## Ultra-Fast Development Workflow



\### The Game-Changing Two-Terminal Setup



This workflow provides near-instant feedback, making Java development feel as responsive as interpreted languages.



\#### Terminal 1: Live Compilation Dashboard

```bash

make section-watch

```



This starts an intelligent watcher that:

\- ✅ Monitors all Java files in `src/main/java/`

\- ✅ Auto-detects which section changed

\- ✅ Recompiles only affected sections

\- ✅ Shows compilation status per module

\- ✅ Displays errors with file and line numbers

\- ✅ Updates timing statistics



\#### Terminal 2: Instant Application Launch

```bash

make section-run

```



Since Terminal 1 has already compiled the code, this launches instantly (<1 second).



\### Section Architecture



The project is divided into logical sections with defined dependencies:



```

┌──────────────────────────────────────────┐

│                   util                    │ (No dependencies)

└────────────────┬─────────────────────────┘

\&nbsp;                │

┌────────────────▼─────────────────────────┐

│                  model                    │ (Depends on: util)

└────────────────┬─────────────────────────┘

\&nbsp;                │

┌────────────────▼─────────────────────────┐

│                   dao                     │ (Depends on: model, util)

└─────┬───────────────────────┬─────────────┘

\&nbsp;     │                       │

┌─────▼──────┐         ┌─────▼─────────────┐

│   tools    │         │     service        │ (Depends on: dao, model, util)

└────────────┘         └─────┬──────────────┘

\&nbsp;                            │

\&nbsp;                     ┌──────▼─────────────┐

\&nbsp;                     │       gui           │ (Depends on: service, dao, model, util)

\&nbsp;                     └─────────────────────┘

```



\### Performance Comparison



| Operation | Traditional Maven | Section Compiler | Improvement | Time Saved |

|-----------|------------------|------------------|-------------|------------|

| Full Build | 45 seconds | 5 seconds | \*\*9x faster\*\* | 40 seconds |

| Single File Change | 30 seconds | 2 seconds | \*\*15x faster\*\* | 28 seconds |

| No Changes | 15 seconds | 0.1 seconds | \*\*150x faster\*\* | 14.9 seconds |

| Application Launch | 8 seconds | <1 second | \*\*8x faster\*\* | 7 seconds |



\## Complete Command Reference



\### Development Workflow Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make section-compile` | Compile changed sections only | 2-3s |

| `make section-watch` | Start watch mode with dashboard | Continuous |

| `make section-run` | Run using compiled classes | <1s |

| `make section-clean` | Remove section-compiled classes | Instant |

| `make section-rebuild` | Force rebuild all sections | 5s |



\### Traditional Maven Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make build` | Full Maven package | 30s |

| `make run` | Maven compile and run | 45s |

| `make clean` | Maven clean | 2s |

| `make compile` | Maven compile only | 20s |



\### Quality \& Testing Commands



| Command | Description | Typical Time |

|---------|-------------|--------------|

| `make format` | Apply Google Java Format | 3s |

| `make check` | Run format check + SpotBugs | 10s |

| `make test` | Run all JUnit tests | 15s |

| `make test-single TEST=UserDAOTest` | Run specific test | 5s |

| `make ci` | Complete CI pipeline | 60s |



\### Debugging Commands



| Command | Description | Usage |

|---------|-------------|-------|

| `make debug` | Start with debug port 5005 | For IDE attachment |

| `make jdb` | Connect CLI debugger | Interactive debugging |

| `make pid` | Get application PID | Process management |

| `make thread-dump` | Generate thread dump | Diagnose freezes |

| `make heap-dump` | Generate heap histogram | Memory analysis |

| `make diagnose` | Full diagnostic report | Complete analysis |



\### Database Commands



| Command | Description | Example |

|---------|-------------|---------|

| `make db-ping` | Test connectivity | `make db-ping` |

| `make db-reset` | Reset from template | `make db-reset` |

| `make db-backup` | Create backup | `make db-backup` |

| `make db-sql` | Execute SQL query | `make db-sql q="SELECT \\\* FROM TblUsers"` |



\### Utility Commands



| Command | Description |

|---------|-------------|

| `make setup` | One-time project setup |

| `make python-setup` | Setup Python environment |

| `make verify` | Verify installation |

| `make help` | Show all commands |



\## Project Architecture



\### Directory Structure



```

OrphanageHub\\\_PAT2025/

│

├── src/

│   ├── main/

│   │   ├── java/com/orphanagehub/

│   │   │   ├── util/                  # Utilities (no dependencies)

│   │   │   │   ├── EdtGuard.java

│   │   │   │   ├── GlobalExceptionHandler.java

│   │   │   │   ├── PasswordUtil.java

│   │   │   │   └── ValidationUtil.java

│   │   │   │

│   │   │   ├── model/                 # Data models (depends on util)

│   │   │   │   ├── User.java

│   │   │   │   ├── Orphanage.java

│   │   │   │   ├── Donation.java

│   │   │   │   ├── ResourceRequest.java

│   │   │   │   └── OrphanageInfo.java

│   │   │   │

│   │   │   ├── dao/                   # Data access (depends on model, util)

│   │   │   │   ├── DatabaseManager.java

│   │   │   │   ├── UserDAO.java

│   │   │   │   ├── OrphanageDAO.java

│   │   │   │   ├── DonationDAO.java

│   │   │   │   └── ResourceRequestDAO.java

│   │   │   │

│   │   │   ├── service/               # Business logic (depends on dao, model, util)

│   │   │   │   ├── AuthService.java

│   │   │   │   ├── AdminService.java

│   │   │   │   ├── DonorService.java

│   │   │   │   ├── OrphanageService.java

│   │   │   │   └── RegistrationService.java

│   │   │   │

│   │   │   ├── gui/                   # UI layer (depends on service, dao, model, util)

│   │   │   │   ├── OrphanageHubApp.java

│   │   │   │   ├── LoginPanel.java

│   │   │   │   ├── HomePanel.java

│   │   │   │   ├── AdminDashboardPanel.java

│   │   │   │   ├── DonorDashboardPanel.java

│   │   │   │   └── VolunteerDashboardPanel.java

│   │   │   │

│   │   │   └── tools/                 # CLI tools (depends on dao, model, util)

│   │   │       ├── DbDoctor.java

│   │   │       └── DbShell.java

│   │   │

│   │   └── resources/

│   │       ├── app.properties

│   │       └── images/

│   │

│   └── test/

│       └── java/com/orphanagehub/

│           ├── dao/

│           ├── service/

│           └── util/

│

├── scripts/                            # Python automation

│   ├── section\\\_build.py               # Section compiler engine

│   ├── db\\\_manager.py                  # Database utilities

│   ├── log\\\_analyzer.py                # Log analysis

│   ├── verify\\\_setup.py                # Setup verification

│   ├── requirements.txt               # Python dependencies

│   └── .venv/                         # Python virtual environment

│

├── db/                                 # Database files

│   ├── OrphanageHub.accdb            # Main database

│   └── template.accdb                # Clean template

│

├── logs/                              # Application logs

│   ├── orphanagehub.log              # Main application log

│   ├── thread-dump-\\\*.txt             # Thread dumps

│   └── heap-histo-\\\*.txt              # Heap histograms

│

├── target/                            # Build output

│   ├── section-classes/              # Section compiler output

│   │   ├── util/

│   │   ├── model/

│   │   ├── dao/

│   │   ├── service/

│   │   ├── gui/

│   │   └── tools/

│   ├── classes/                      # Maven output

│   └── OrphanageHub-1.0.jar         # Packaged application

│

├── .gitignore                         # Git ignore rules

├── Makefile                          # Command automation

├── pom.xml                           # Maven configuration

├── README.md                         # This file

└── LICENSE                           # MIT License

```



\### Package Dependencies Graph



```mermaid

graph TD

\&nbsp;   util\\\[com.orphanagehub.util]

\&nbsp;   model\\\[com.orphanagehub.model]

\&nbsp;   dao\\\[com.orphanagehub.dao]

\&nbsp;   service\\\[com.orphanagehub.service]

\&nbsp;   gui\\\[com.orphanagehub.gui]

\&nbsp;   tools\\\[com.orphanagehub.tools]

\&nbsp;   

\&nbsp;   model --> util

\&nbsp;   dao --> model

\&nbsp;   dao --> util

\&nbsp;   service --> dao

\&nbsp;   service --> model

\&nbsp;   service --> util

\&nbsp;   gui --> service

\&nbsp;   gui --> dao

\&nbsp;   gui --> model

\&nbsp;   gui --> util

\&nbsp;   tools --> dao

\&nbsp;   tools --> model

\&nbsp;   tools --> util

```



\## Database Management



\### Database Schema



```sql

-- Core Tables

TblUsers                    -- User accounts and authentication

TblOrphanages              -- Orphanage profiles and information

TblDonations               -- Donation records and receipts

TblResourceRequests        -- Resource needs and requests

TblVolunteers              -- Volunteer profiles and hours



-- Lookup Tables

TblRoles                   -- User role definitions

TblDonationTypes          -- Types of donations

TblResourceCategories     -- Resource categorization

```



\### Database Configuration



Location: `src/main/resources/app.properties`



```properties

\\# Database Configuration

db.url=jdbc:ucanaccess://db/OrphanageHub.accdb

db.driver=net.sf.ucanaccess.jdbc.UcanaccessDriver

db.showSQL=false

db.pool.size=10

db.timeout=30



\\# Application Configuration

app.name=OrphanageHub

app.version=1.0.0

app.debug=false

```



\### Database Operations



```bash

\\# Test connectivity

make db-ping



\\# Reset to clean state (warning: deletes all data)

make db-reset



\\# Create backup

make db-backup



\\# Run SQL queries

make db-sql q="SELECT COUNT(\\\*) FROM TblUsers"

make db-sql q="SELECT \\\* FROM TblOrphanages WHERE City='Mumbai'"



\\# Interactive SQL shell

java -cp "$(make classpath)" com.orphanagehub.tools.DbShell

```



\## Testing



\### Test Structure



```

src/test/java/com/orphanagehub/

├── dao/

│   ├── UserDAOTest.java

│   ├── OrphanageDAOTest.java

│   └── DonationDAOTest.java

├── service/

│   ├── AuthServiceTest.java

│   ├── AdminServiceTest.java

│   └── DonorServiceTest.java

└── util/

\&nbsp;   ├── ValidationUtilTest.java

\&nbsp;   └── PasswordUtilTest.java

```



\### Running Tests



```bash

\\# Run all tests

make test



\\# Run specific test class

make test-single TEST=UserDAOTest



\\# Run with coverage report

mvn test jacoco:report

open target/site/jacoco/index.html



\\# Run tests in watch mode (re-runs on file change)

mvn test -Dmaven.test.failure.ignore=true -Dtest=\\\*Test -DforkCount=0

```



\### Writing Tests



```java

@Test

public void testUserAuthentication() {

\&nbsp;   // Arrange

\&nbsp;   String username = "testuser";

\&nbsp;   String password = "SecurePass123!";

\&nbsp;   User testUser = new User(username, PasswordUtil.hash(password), "Admin");

\&nbsp;   userDAO.create(testUser);

\&nbsp;   

\&nbsp;   // Act

\&nbsp;   User authenticated = authService.authenticate(username, password);

\&nbsp;   

\&nbsp;   // Assert

\&nbsp;   assertNotNull(authenticated);

\&nbsp;   assertEquals(username, authenticated.getUsername());

\&nbsp;   assertEquals("Admin", authenticated.getRole());

}

```



\## Debugging Guide



\### Common Debugging Scenarios



\#### Scenario 1: Application Won't Start



```bash

\\# Step 1: Check Java version

java --version  # Must be exactly 17



\\# Step 2: Verify database connection

make db-ping



\\# Step 3: Check for port conflicts

lsof -i :5005  # Debug port

lsof -i :8080  # Application port (if applicable)



\\# Step 4: Review logs

tail -f logs/orphanagehub.log

```



\#### Scenario 2: UI Freeze/Unresponsive



```bash

\\# Step 1: Get application PID

make pid



\\# Step 2: Generate thread dump

make thread-dump



\\# Step 3: Analyze EDT thread

grep -A 20 "AWT-EventQueue" logs/thread-dump-\\\*.txt



\\# Common fix: Ensure long operations use SwingWorker

```



\#### Scenario 3: Memory Issues/OutOfMemoryError



```bash

\\# Step 1: Generate heap histogram

make heap-dump



\\# Step 2: Analyze top memory consumers

head -30 logs/heap-histo-\\\*.txt



\\# Step 3: Increase heap size if needed

export MAVEN\\\_OPTS="-Xmx2048m -Xms512m"



\\# Step 4: Generate full heap dump for deep analysis

jcmd $(make pid) GC.heap\\\_dump heap.hprof

jhat heap.hprof  # Browse at http://localhost:7000

```



\#### Scenario 4: Compilation Errors



```bash

\\# Step 1: Clean all build artifacts

make section-clean

make clean



\\# Step 2: Force rebuild

make section-rebuild



\\# Step 3: If specific section fails

make section-compile 2>\\\&1 | grep -A 5 "error:"



\\# Step 4: Verify dependencies

mvn dependency:tree

```



\### IDE Debugging Setup



\#### Visual Studio Code



1\. Install "Extension Pack for Java"

2\. Create `.vscode/launch.json`:



```json

{

\&nbsp;   "version": "0.2.0",

\&nbsp;   "configurations": \\\[

\&nbsp;       {

\&nbsp;           "type": "java",

\&nbsp;           "name": "Debug OrphanageHub",

\&nbsp;           "request": "attach",

\&nbsp;           "hostName": "localhost",

\&nbsp;           "port": 5005

\&nbsp;       }

\&nbsp;   ]

}

```



3\. Run `make debug`

4\. Press F5 to attach debugger



\#### IntelliJ IDEA



1\. Run → Edit Configurations

2\. Add New Configuration → Remote JVM Debug

3\. Settings:

   - Host: localhost

   - Port: 5005

   - Command line arguments: (auto-generated)

4\. Run `make debug`

5\. Click Debug button



\#### Eclipse



1\. Run → Debug Configurations

2\. Remote Java Application → New

3\. Settings:

   - Project: OrphanageHub

   - Host: localhost

   - Port: 5005

4\. Run `make debug`

5\. Click Debug



\### Command-Line Debugging (jdb)



```bash

\\# Terminal 1: Start application in debug mode

make debug



\\# Terminal 2: Connect debugger

make jdb



\\# JDB commands:

stop in com.orphanagehub.gui.LoginPanel.login

run

print username

locals

where

step

cont

exit

```



\## Code Quality Standards



\### Enforced Standards



1\. \*\*Google Java Format\*\* - Automatically applied

2\. \*\*SpotBugs\*\* - Static analysis for bugs

3\. \*\*Line Length\*\* - Maximum 100 characters

4\. \*\*Indentation\*\* - 4 spaces (no tabs)



\### Running Quality Checks



```bash

\\# Format all code

make format



\\# Check formatting without changing

make check



\\# Run all quality checks

make ci

```



\### Coding Conventions



```java

// Package naming: all lowercase

package com.orphanagehub.service;



// Class naming: PascalCase

public class UserService {

\&nbsp;   

\&nbsp;   // Constants: UPPER\\\_SNAKE\\\_CASE

\&nbsp;   private static final int MAX\\\_LOGIN\\\_ATTEMPTS = 3;

\&nbsp;   

\&nbsp;   // Fields: camelCase with prefix

\&nbsp;   private final UserDAO userDAO;

\&nbsp;   private String currentUser;

\&nbsp;   

\&nbsp;   // Methods: camelCase

\&nbsp;   public User authenticateUser(String username, String password) {

\&nbsp;       // Implementation

\&nbsp;   }

\&nbsp;   

\&nbsp;   // JavaDoc for public methods

\&nbsp;   /\\\*\\\*

\&nbsp;    \\\* Authenticates a user against the database.

\&nbsp;    \\\* 

\&nbsp;    \\\* @param username the username to check

\&nbsp;    \\\* @param password the plain text password

\&nbsp;    \\\* @return the authenticated User or null

\&nbsp;    \\\* @throws AuthenticationException if database error occurs

\&nbsp;    \\\*/

\&nbsp;   public User authenticate(String username, String password) 

\&nbsp;           throws AuthenticationException {

\&nbsp;       // Implementation

\&nbsp;   }

}

```



\## Python Scripts Documentation



\### section\_build.py



The core engine for fast compilation.



\*\*Features:\*\*

\- Section-based compilation with dependency tracking

\- Content-based hash caching

\- Watch mode with auto-recompilation

\- Error aggregation and reporting



\*\*Usage:\*\*

```bash

\\# Compile changed sections

python3 scripts/section\\\_build.py



\\# Force rebuild all

python3 scripts/section\\\_build.py -f



\\# Watch mode

python3 scripts/section\\\_build.py -w



\\# Clean artifacts

python3 scripts/section\\\_build.py -c



\\# Run specific section

python3 scripts/section\\\_build.py -r gui

```



\### db\_manager.py



Database lifecycle management utility.



\*\*Usage:\*\*

```bash

\\# Reset database from template

python3 scripts/db\\\_manager.py reset



\\# Create backup

python3 scripts/db\\\_manager.py backup



\\# Restore from backup

python3 scripts/db\\\_manager.py restore backup-20240101.accdb



\\# Verify connectivity

python3 scripts/db\\\_manager.py ping

```



\### log\_analyzer.py



Log parsing and analysis tool.



\*\*Usage:\*\*

```bash

\\# Analyze all logs

python3 scripts/log\\\_analyzer.py



\\# Analyze specific date range

python3 scripts/log\\\_analyzer.py --from 2024-01-01 --to 2024-01-31



\\# Generate HTML report

python3 scripts/log\\\_analyzer.py --output report.html



\\# Show only errors

python3 scripts/log\\\_analyzer.py --level ERROR

```



\### verify\_setup.py



Installation verification script.



\*\*Usage:\*\*

```bash

\\# Check all requirements

python3 scripts/verify\\\_setup.py



\\# Auto-fix common issues

python3 scripts/verify\\\_setup.py --fix



\\# Verbose output

python3 scripts/verify\\\_setup.py -v

```



\## Performance Benchmarks



\### Compilation Performance



| Metric | Traditional Maven | Section Compiler | Improvement |

|--------|------------------|------------------|-------------|

| Full Clean Build | 45 seconds | 5 seconds | \*\*9x faster\*\* |

| Incremental Build (1 file) | 30 seconds | 2 seconds | \*\*15x faster\*\* |

| No Changes | 15 seconds | 0.1 seconds | \*\*150x faster\*\* |

| Large Refactor (10 files) | 35 seconds | 4 seconds | \*\*8.75x faster\*\* |



\### Memory Usage



| Component | Maven Build | Section Build | Savings |

|-----------|-------------|---------------|---------|

| Peak Memory | 512 MB | 128 MB | 384 MB |

| Average Memory | 350 MB | 80 MB | 270 MB |

| Minimum Required | 256 MB | 64 MB | 192 MB |



\### Developer Productivity



| Metric | Before | After | Improvement |

|--------|--------|-------|-------------|

| Daily Compilations | 50 | 200+ | 4x more |

| Average Wait Time | 30s | 2s | 93% reduction |

| Time to First Run | 2 min | 15s | 87% reduction |

| Debug Setup Time | 3 min | 30s | 83% reduction |



\## Troubleshooting



\### Installation Issues



| Problem | Solution |

|---------|----------|

| "Java 17 not found" | Install exactly JDK 17, not 11 or 21 |

| "Maven not found" | Install Maven 3.8+ or use `./mvnw` |

| "Python not found" | Install Python 3.9+ and ensure it's in PATH |

| "make: command not found" | Windows: Use WSL2 or Git Bash |



\### Compilation Issues



| Problem | Solution |

|---------|----------|

| "Cannot find symbol" | Run `make section-rebuild` |

| "Package does not exist" | Check `pom.xml` dependencies |

| "Duplicate class" | Run `make clean \\\&\\\& make section-clean` |

| Watch mode not detecting | Install watchdog: `pip install watchdog` |



\### Runtime Issues



| Problem | Solution |

|---------|----------|

| "ClassNotFoundException" | Rebuild: `make section-rebuild` |

| "NoClassDefFoundError" | Check classpath: `make classpath` |

| Database locked | Kill process and remove `\\\*.laccdb` files |

| UI frozen | Check EDT violations in logs |



\### Platform-Specific Issues



\#### Windows (Native)

```batch

REM Use mvnw.cmd instead of mvnw

mvnw.cmd clean package



REM Use python instead of python3

python scripts/section\\\_build.py

```



\#### WSL2/Linux

```bash

\\# Increase file watchers for watch mode

echo fs.inotify.max\\\_user\\\_watches=524288 | sudo tee -a /etc/sysctl.conf

sudo sysctl -p



\\# Fix line endings if cloned on Windows

find . -type f -name "\\\*.java" -exec dos2unix {} \\\\;

```



\#### macOS

```bash

\\# If mvnw fails with permission denied

chmod +x mvnw



\\# Install command line tools if missing

xcode-select --install

```



\## Contributing



\### Getting Started



1\. \*\*Fork the repository\*\* on GitHub

2\. \*\*Clone your fork\*\*:

   ```bash

   git clone https://github.com/yourusername/OrphanageHub\_PAT2025.git

   cd OrphanageHub\_PAT2025

   ```

3\. \*\*Set up upstream\*\*:

   ```bash

   git remote add upstream https://github.com/original/OrphanageHub\_PAT2025.git

   ```

4\. \*\*Create feature branch\*\*:

   ```bash

   git checkout -b feature/your-feature-name

   ```



\### Development Process



1\. \*\*Start watch mode\*\*:

   ```bash

   make section-watch

   ```

2\. \*\*Make your changes\*\* in your IDE

3\. \*\*Test your changes\*\*:

   ```bash

   make test

   ```

4\. \*\*Format your code\*\*:

   ```bash

   make format

   ```

5\. \*\*Commit with meaningful message\*\*:

   ```bash

   git commit -m "feat(module): add new feature

 

   - Detailed description

   - Another detail

 

   Closes #123"

   ```



\### Pull Request Guidelines



1\. \*\*Update your branch\*\*:

   ```bash

   git fetch upstream

   git rebase upstream/main

   ```

2\. \*\*Push to your fork\*\*:

   ```bash

   git push origin feature/your-feature-name

   ```

3\. \*\*Create Pull Request\*\* on GitHub

4\. \*\*Ensure CI passes\*\* (all checks green)

5\. \*\*Address review feedback\*\*

6\. \*\*Squash commits\*\* if requested



\### Commit Message Format



```

type(scope): subject



body



footer

```



\*\*Types:\*\*

\- `feat`: New feature

\- `fix`: Bug fix

\- `docs`: Documentation

\- `style`: Formatting

\- `refactor`: Code restructuring

\- `test`: Adding tests

\- `chore`: Maintenance



\*\*Example:\*\*

```

feat(auth): implement two-factor authentication



\\- Added TOTP generation and validation

\\- Updated login flow to check 2FA

\\- Added QR code generation for setup

\\- Created backup codes system



Closes #456

Refs #123

```



\## Support



\### Getting Help



\- \*\*Documentation\*\*: This README and JavaDoc

\- \*\*Issues\*\*: \[GitHub Issues](https://github.com/yourusername/OrphanageHub\_PAT2025/issues)

\- \*\*Discussions\*\*: \[GitHub Discussions](https://github.com/yourusername/OrphanageHub\_PAT2025/discussions)

\- \*\*Wiki\*\*: \[Project Wiki](https://github.com/yourusername/OrphanageHub\_PAT2025/wiki)



\### Reporting Bugs



Please include:

1\. \*\*Environment\*\*: OS, Java version, Maven version

2\. \*\*Steps to reproduce\*\*: Exact commands run

3\. \*\*Expected behavior\*\*: What should happen

4\. \*\*Actual behavior\*\*: What actually happened

5\. \*\*Logs\*\*: Relevant portions from `logs/`

6\. \*\*Screenshots\*\*: For UI issues



\*\*Bug Report Template:\*\*

```markdown

\\### Environment

\\- OS: Ubuntu 22.04

\\- Java: 17.0.8

\\- Maven: 3.9.4

\\- Python: 3.10.6



\\### Steps to Reproduce

1\\. Run `make section-compile`

2\\. Change UserDAO.java

3\\. Run `make section-compile` again



\\### Expected Behavior

Should recompile only dao section



\\### Actual Behavior

Recompiles all sections



\\### Logs

\\\[Attach relevant logs]

```



\### Feature Requests



Include:

1\. \*\*Use case\*\*: Why is this needed?

2\. \*\*Proposed solution\*\*: How should it work?

3\. \*\*Alternatives considered\*\*: Other approaches

4\. \*\*Additional context\*\*: Mockups, examples



\## License



MIT License



Copyright (c) 2024 OrphanageHub Contributors



Permission is hereby granted, free of charge, to any person obtaining a copy

of this software and associated documentation files (the "Software"), to deal

in the Software without restriction, including without limitation the rights

to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

copies of the Software, and to permit persons to whom the Software is

furnished to do so, subject to the following conditions:



The above copyright notice and this permission notice shall be included in all

copies or substantial portions of the Software.



THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

SOFTWARE.



---



\## Quick Reference Card



\### Essential Commands

```bash

\\# Development

make section-watch          # Start live compilation

make section-run            # Run application



\\# Quality

make format                 # Format code

make test                   # Run tests



\\# Debugging  

make debug                  # Start debug mode

make thread-dump            # Diagnose freezes



\\# Database

make db-ping                # Test connection

make db-reset               # Reset database

```



\### Keyboard Shortcuts

```bash

\\# Terminal

Ctrl+C                      # Stop current process

Ctrl+Z                      # Suspend to background

fg                          # Resume suspended process



\\# JDB Debugger

where                       # Show stack trace

locals                      # Show local variables

print <var>                 # Print variable value

cont                        # Continue execution

```



\### Performance Tips

1\. Keep `make section-watch` running always

2\. Use `make section-run` instead of `make run`

3\. Clean periodically: `make section-clean`

4\. Increase heap for large projects: `export MAVEN\\\_OPTS="-Xmx2g"`



---



\*\*Built with ❤️ for social impact\*\*



\*Version 1.0.0\*




```

### Quick Start:
```bash
# Build
make clean
make compile

# Run
make run

# Test
make test
```

================================================================================
Configuration generated at: 2025-09-06 09:05:41.547632
================================================================================