PROJECT SOURCE CODE EXPORT: OrphanageHub_PAT2025 - Source Code Only
Path: /home/jared/OrphanageHub_PAT2025
Date (UTC): 2025-08-14 01:51:40
============================================================
                    JAVA SOURCE FILES ONLY
============================================================
TABLE OF CONTENTS - SOURCE CODE
================================
Package Structure:
  com.orphanagehub
    ├── util/       (4 files)
    ├── dao/        (5 files)
    ├── model/      (5 files)
    ├── service/    (6 files)
    ├── gui/        (8 files)
    ├── tools/      (2 files)
    └── OrphanageHubApp.java (1 file)

Total Java Source Files: 31
============================================================

################################################################################
#                           MAIN APPLICATION CLASS                             #
################################################################################

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub
║ File: OrphanageHubApp.java
║ Lines: 42
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub;
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */

import com.orphanagehub.util.GlobalExceptionHandler;
import com.orphanagehub.util.EdtGuard;
import com.orphanagehub.views.LoginFrame;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class OrphanageHubApp {
    private static final Logger logger = LoggerFactory.getLogger(OrphanageHubApp.class);

    public static void main(String[] args) {
        // Register global exception handler FIRST
        GlobalExceptionHandler.register();
        
        // Install EDT guard for development
        EdtGuard.install();
        
        logger.info("Starting OrphanageHub application...");
        
        // Set Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            logger.warn("Could not set system look and feel", e);
        }
        
        // Launch the application on the EDT
        SwingUtilities.invokeLater(() -> {
            try {
                LoginFrame loginFrame = new LoginFrame();
                loginFrame.setVisible(true);
                logger.info("Application UI launched successfully");
            } catch (Exception e) {
                logger.error("Failed to launch application UI", e);
            }
        });
    }
}
```

=================================================================================

################################################################################
#                              MODEL LAYER                                     #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ MODEL CLASSES (Domain Objects)
┃ Package: com.orphanagehub.model
┃ Files: 5
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.model
║ File: Donation.java
║ Lines: 22
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.model;

import java.sql.Timestamp;

public class Donation {
  private String id;
  private String donorId;
  private String orphanageId;
  private double amount;
  private Timestamp timestamp;

  public String getId() { return id; }
  public void setId(String id) { this.id = id; }
  public String getDonorId() { return donorId; }
  public void setDonorId(String donorId) { this.donorId = donorId; }
  public String getOrphanageId() { return orphanageId; }
  public void setOrphanageId(String orphanageId) { this.orphanageId = orphanageId; }
  public double getAmount() { return amount; }
  public void setAmount(double amount) { this.amount = amount; }
  public Timestamp getTimestamp() { return timestamp; }
  public void setTimestamp(Timestamp timestamp) { this.timestamp = timestamp; }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.model
║ File: OrphanageInfo.java
║ Lines: 12
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.model;

public class OrphanageInfo {
  private String orphanageID;
  private String address;

  public String getOrphanageID(){ return orphanageID; }
  public void setOrphanageID(String orphanageID){ this.orphanageID = orphanageID; }

  public String getAddress(){ return address; }
  public void setAddress(String address){ this.address = address; }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.model
║ File: Orphanage.java
║ Lines: 12
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.model;

public class Orphanage {
  private String orphanageID;
  private String name;

  public String getOrphanageID() { return orphanageID; }
  public void setOrphanageID(String orphanageID) { this.orphanageID = orphanageID; }

  public String getName() { return name; }
  public void setName(String name) { this.name = name; }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.model
║ File: ResourceRequest.java
║ Lines: 20
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.model;

public class ResourceRequest {
  private String id;
  private String orphanageId;
  private String category;
  private String description;
  private int quantity;

  public String getId(){ return id; }
  public void setId(String id){ this.id = id; }
  public String getOrphanageId(){ return orphanageId; }
  public void setOrphanageId(String orphanageId){ this.orphanageId = orphanageId; }
  public String getCategory(){ return category; }
  public void setCategory(String category){ this.category = category; }
  public String getDescription(){ return description; }
  public void setDescription(String description){ this.description = description; }
  public int getQuantity(){ return quantity; }
  public void setQuantity(int quantity){ this.quantity = quantity; }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.model
║ File: User.java
║ Lines: 34
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.model;

import java.sql.Timestamp;

public class User {
  private String userId;
  private String username;
  private String passwordHash;
  private String email;
  private String userRole;
  private String accountStatus;
  private Timestamp dateRegistered;

  public String getUserId() { return userId; }
  public void setUserId(String userId) { this.userId = userId; }

  public String getUsername() { return username; }
  public void setUsername(String username) { this.username = username; }

  public String getPasswordHash() { return passwordHash; }
  public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }

  public String getEmail() { return email; }
  public void setEmail(String email) { this.email = email; }

  public String getUserRole() { return userRole; }
  public void setUserRole(String userRole) { this.userRole = userRole; }

  public String getAccountStatus() { return accountStatus; }
  public void setAccountStatus(String accountStatus) { this.accountStatus = accountStatus; }

  public Timestamp getDateRegistered() { return dateRegistered; }
  public void setDateRegistered(Timestamp dateRegistered) { this.dateRegistered = dateRegistered; }
}
```

=================================================================================

################################################################################
#                         DATA ACCESS LAYER (DAO)                              #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ DATA ACCESS OBJECTS
┃ Package: com.orphanagehub.dao
┃ Files: 5
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.dao
║ File: DatabaseManager.java
║ Lines: 20
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import java.io.InputStream;

public final class DatabaseManager {
  private DatabaseManager(){}

  public static Connection getConnection() throws SQLException {
    Properties p = new Properties();
    try (InputStream in = DatabaseManager.class.getResourceAsStream("/app.properties")) {
      if (in != null) { p.load(in); }
    } catch (Exception ignore) {}
    String url = p.getProperty("db.url", "jdbc:ucanaccess://db/OrphanageHub.accdb");
    return DriverManager.getConnection(url);
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.dao
║ File: DonationDAO.java
║ Lines: 12
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.dao;

import com.orphanagehub.model.Donation;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DonationDAO {
  public List<Donation> findByDonor(String donorId) throws SQLException {
    return new ArrayList<>();
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.dao
║ File: OrphanageDAO.java
║ Lines: 16
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.dao;

import com.orphanagehub.model.Orphanage;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class OrphanageDAO {
  public List<Orphanage> findAllUnassigned() throws SQLException {
    return new ArrayList<>();
  }
  public void linkUserToOrphanage(String userId, String orphanageId) throws SQLException { }
  public Orphanage findByStaffUserId(String userId) throws SQLException {
    return null;
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.dao
║ File: ResourceRequestDAO.java
║ Lines: 12
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.dao;

import com.orphanagehub.model.ResourceRequest;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ResourceRequestDAO {
  public List<ResourceRequest> findByOrphanageId(String orphanageId) throws SQLException {
    return new ArrayList<>();
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.dao
║ File: UserDAO.java
║ Lines: 14
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.dao;

import com.orphanagehub.model.User;
import java.sql.SQLException;

public class UserDAO {
  public User findByUsername(String username) throws SQLException {
    return null;
  }
  public boolean isFieldTaken(String field, String value) throws SQLException {
    return false;
  }
  public void insert(User user) throws SQLException { }
}
```

=================================================================================

################################################################################
#                           SERVICE LAYER                                      #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ BUSINESS LOGIC SERVICES
┃ Package: com.orphanagehub.service
┃ Files: 6
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: AdminService.java
║ Lines: 5
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

public class AdminService {
  // Admin operations go here
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: AuthService.java
║ Lines: 29
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.model.User;
import com.orphanagehub.util.PasswordUtil;
import com.orphanagehub.util.ValidationUtil;
import java.sql.SQLException;

public class AuthService {
  private final UserDAO userDAO = new UserDAO();

  public User authenticate(String username, String password) throws ServiceException {
    if (!ValidationUtil.isNonEmpty(username) || !ValidationUtil.isNonEmpty(password)) {
      throw new ServiceException("Username and password are required.");
    }
    try {
      User user = userDAO.findByUsername(username);
      if (user == null) throw new ServiceException("Invalid username or password.");
      String hash = PasswordUtil.sha256(password);
      if (!hash.equals(user.getPasswordHash())) throw new ServiceException("Invalid username or password.");
      if (!"Active".equalsIgnoreCase(user.getAccountStatus())) {
        throw new ServiceException("This account has been suspended.");
      }
      return user;
    } catch (SQLException e) {
      throw new ServiceException("A database error occurred during login.", e);
    }
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: DonorService.java
║ Lines: 18
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

import com.orphanagehub.dao.DonationDAO;
import com.orphanagehub.model.Donation;
import java.sql.SQLException;
import java.util.List;

public class DonorService {
  private final DonationDAO donationDAO = new DonationDAO();

  public List<Donation> getDonationsForDonor(String donorId) throws ServiceException {
    try {
      return donationDAO.findByDonor(donorId);
    } catch (SQLException e) {
      throw new ServiceException("Failed to load donations", e);
    }
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: OrphanageService.java
║ Lines: 30
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.dao.ResourceRequestDAO;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.ResourceRequest;
import com.orphanagehub.model.User;
import java.sql.SQLException;
import java.util.List;

public class OrphanageService {
  private final OrphanageDAO orphanageDAO = new OrphanageDAO();
  private final ResourceRequestDAO requestDAO = new ResourceRequestDAO();

  public Orphanage getOrphanageForStaff(User staffUser) throws ServiceException {
    try {
      return orphanageDAO.findByStaffUserId(staffUser.getUserId());
    } catch (SQLException e) {
      throw new ServiceException("Could not load orphanage for staff user.", e);
    }
  }

  public List<ResourceRequest> getRequestsForOrphanage(String orphanageId) throws ServiceException {
    try {
      return requestDAO.findByOrphanageId(orphanageId);
    } catch (SQLException e) {
      throw new ServiceException("Could not load requests.", e);
    }
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: RegistrationService.java
║ Lines: 72
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.dao.UserDAO;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.User;
import com.orphanagehub.util.PasswordUtil;
import com.orphanagehub.util.ValidationUtil;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

public class RegistrationService {
  private final UserDAO userDAO = new UserDAO();
  private final OrphanageDAO orphanageDAO = new OrphanageDAO();

  public User registerUser(String username, String email, String fullName,
                           String password, String confirmPassword, String role,
                           String selectedOrphanageName) throws ServiceException {
    if (!ValidationUtil.isNonEmpty(username) || !ValidationUtil.isNonEmpty(fullName) || !ValidationUtil.isNonEmpty(password)) {
      throw new ServiceException("Username, Full Name, and Password are required.");
    }
    if (!ValidationUtil.isValidEmail(email)) {
      throw new ServiceException("Please enter a valid email address.");
    }
    if (!password.equals(confirmPassword)) {
      throw new ServiceException("Passwords do not match.");
    }
    try {
      if (userDAO.isFieldTaken("Username", username)) {
        throw new ServiceException("This username is already taken.");
      }
      if (userDAO.isFieldTaken("Email", email)) {
        throw new ServiceException("This email is already registered.");
      }
      User newUser = new User();
      newUser.setUserId("USR-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());
      newUser.setUsername(username);
      newUser.setPasswordHash(PasswordUtil.sha256(password));
      newUser.setEmail(email);
      newUser.setUserRole(role);
      newUser.setDateRegistered(new Timestamp(System.currentTimeMillis()));
      newUser.setAccountStatus("Active");
      userDAO.insert(newUser);

      if ("OrphanageStaff".equals(role) && ValidationUtil.isNonEmpty(selectedOrphanageName)) {
        List<Orphanage> orphanages = orphanageDAO.findAllUnassigned();
        Orphanage selected = null;
        for (Orphanage o : orphanages) {
          if (selectedOrphanageName.equals(o.getName())) { selected = o; break; }
        }
        if (selected != null) {
          orphanageDAO.linkUserToOrphanage(newUser.getUserId(), selected.getOrphanageID());
        } else {
          throw new ServiceException("Selected orphanage could not be found or is already assigned.");
        }
      }
      return newUser;
    } catch (SQLException e) {
      throw new ServiceException("Registration failed due to a database error.", e);
    }
  }

  public List<Orphanage> getUnassignedOrphanages() throws ServiceException {
    try {
      return orphanageDAO.findAllUnassigned();
    } catch (SQLException e) {
      throw new ServiceException("Could not load list of orphanages.", e);
    }
  }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.service
║ File: ServiceException.java
║ Lines: 6
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.service;

public class ServiceException extends Exception {
  public ServiceException(String message) { super(message); }
  public ServiceException(String message, Throwable cause) { super(message, cause); }
}
```

=================================================================================

################################################################################
#                     GRAPHICAL USER INTERFACE (GUI)                           #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ GUI COMPONENTS
┃ Package: com.orphanagehub.gui
┃ Files: 8
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: AdminDashboardPanel.java
║ Lines: 374
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.orphanagehub.model.User; // <<< ADD THIS IMPORT;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.event.ActionListener;
import java.util.function.BiConsumer;

public class AdminDashboardPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(AdminDashboardPanel.class);


 private OrphanageHubApp mainApp;
 private User currentUser; // To store the logged-in user's data
 private JLabel userLabel; // To update the user's name on the display

 // Define Colors(Consider shared constants)
 private static final Color DARKBGSTART = new Color(45, 52, 54);
 private static final Color DARKBGEND = new Color(35, 42, 44);
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
 private static final Color INPUTBG_DARK = new Color(60, 60, 60);
 private static final Color INPUTFG_DARK = new Color(220, 220, 220);
 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
 private static final Color TAB_BGSELECTED = new Color(70, 80, 82);
 private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
 private static final Color TAB_FG = TITLECOLOR_DARK;
 private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
 private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
 private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
 private static final Color TABLECELLBG = new Color(55, 62, 64);
 private static final Color TABLECELLFG = TEXTCOLOR_DARK;
 private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
 private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
 // Action Button Colors
 private static final Color BUTTONAPPROVEBG = new Color(60, 179, 113); // Green;
 private static final Color BUTTONAPPROVEHOVER_BG = new Color(70, 190, 123);
 private static final Color BUTTONREJECTBG = new Color(192, 57, 43); // Red;
 private static final Color BUTTONREJECTHOVER_BG = new Color(231, 76, 60);
 private static final Color BUTTONSUSPEND_BG = BUTTONREJECTBG; // Use same red for suspend;
 private static final Color BUTTONSUSPEND_HOVER_BG = BUTTONREJECTHOVER_BG;

 public AdminDashboardPanel(OrphanageHubApp app) {
 this.mainApp = app;
 setLayout(new BorderLayout(0, 0) );
 initComponents();
 }

 // - - - ADDED METHOD-- -
 / **
 * Sets the currently logged-in admin user for this panel.
 * This method updates the UI with the user's information.
 * @param user The logged-in admin.
 * /
 public void setAdminUser(User user) {
 this.currentUser = user;
 if(user != null) {
 this.userLabel.setText( "Admin User: " + user.getUsername();
 }
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 private void initComponents() {
 // - - - Header Panel-- -
 JPanel headerPanel = createHeaderPanel();
 add(headerPanel, BorderLayout.NORTH);

 // - - - Tabbed Pane for Content-- -
 JTabbedPane tabbedPane = createTabbedPane();
 add(tabbedPane, BorderLayout.CENTER);
 }

 // - - - Helper Methods-- -
 private JPanel createHeaderPanel() {
 JPanel headerPanel = new JPanel(new BorderLayout(10, 0) );
 headerPanel.setOpaque(false);
 headerPanel.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),;
 new EmptyBorder(10, 20, 10, 20);
 ) );

 // Left side: Role Icon and Title
 JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0) );
 titleGroup.setOpaque(false);
 JLabel iconLabel = new JLabel(" \u2699"); // Gear symbol;
 iconLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 22) );
 iconLabel.setForeground(TITLECOLOR_DARK);
 JLabel nameLabel = new JLabel("Administrator Dashboard");
 nameLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 20) );
 nameLabel.setForeground(TITLECOLOR_DARK);
 titleGroup.add(iconLabel);
 titleGroup.add(nameLabel);
 headerPanel.add(titleGroup, BorderLayout.WEST);

 // Right side: User info and Logout Button
 JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0) );
 userGroup.setOpaque(false);
        
 // Initialize the class field userLabel here
 userLabel = new JLabel("Welcome, Admin");
 userLabel.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 userLabel.setForeground(TEXTCOLOR_DARK);

 JButton btnLogout = new JButton("Logout");
 styleActionButton(btnLogout, "Logout and return to welcome screen" );
 btnLogout.setPreferredSize(new Dimension(100, 30) );
 btnLogout.setBackground(BUTTONREJECTBG);
 btnLogout.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(BUTTONREJECTHOVER_BG); }
 @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(BUTTONREJECTBG); }
 });
 btnLogout.addActionListener(e -> mainApp.logout();
 userGroup.add(userLabel);
 userGroup.add(btnLogout);
 headerPanel.add(userGroup, BorderLayout.EAST);

 return headerPanel;
 }

 private JTabbedPane createTabbedPane() {
 JTabbedPane tabbedPane = new JTabbedPane();
 tabbedPane.setOpaque(false);
 tabbedPane.setForeground(TAB_FG);
 tabbedPane.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
 @Override protected void installDefaults() { super.installDefaults(); lightHighlight=TAB_BGSELECTED; shadow=BORDERCOLOR_DARK; darkShadow=DARKBGEND; focus=TAB_BGSELECTED; }
 @Override protected void paintTabBackground(Graphics g, int p, int i, int x, int y, int w, int h, boolean s) { g.setColor(s ? TAB_BGSELECTED : TAB_BG_UNSELECTED); g.fillRoundRect(x, y, w, h+5, 5, 5); }
 @Override protected void paintTabBorder(Graphics g, int p, int i, int x, int y, int w, int h, boolean s) { / * Minimal border * / }
 @Override protected void paintContentBorder(Graphics g, int p, int i) { int w=tabPane.getWidth(); int h=tabPane.getHeight(); Insets ins=tabPane.getInsets(); int th=calculateTabAreaHeight(p, runCount, maxTabHeight); int x=ins.left; int y=ins.top+th- (lightHighlight.getAlpha()>0?1:0); int cw=w-ins.right-ins.left; int ch=h-ins.top-ins.bottom-y; g.setColor(BORDERCOLOR_DARK); g.drawRect(x, y, cw-1, ch-1); }
 });

 // Create and add tabs
 tabbedPane.addTab( "Orphanage Verification", createVerificationTab();
 tabbedPane.addTab( "User Management", createUserManagementTab();
 tabbedPane.addTab( "System Overview", createSystemOverviewTab();

 return tabbedPane;
 }

 // - - - Tab Creation Methods-- -
 private JPanel createVerificationTab() {
 JPanel panel = new JPanel(new BorderLayout(10, 10) );
 panel.setOpaque(false);
 panel.setBorder(new EmptyBorder(15, 15, 15, 15) );

 // Verification Table
 String[ ] columnNames = {"Orphanage Name", "Contact", "Email", "Registered", "Status", "Actions"};
 Object[ ] [ ] data = {
 {"New Hope Center", "Alice Smith", "alice@newhope.org", "2025-05-10", "Pending", "Verify"},
 {"Future Stars", "Bob Jones", "bob@futurestars.net", "2025-05-08", "Pending", "Verify"},
 {"Safe Haven Kids", "Charlie P.", "contact@safehaven.com", "2025-04-20", "Verified", "View"},
 {"Distant Dreams", "Diana Ross", "info@distdreams.org", "2025-05-11", "Pending", "Verify"}
 };

 JTable table = new JTable(data, columnNames) {
 @Override public boolean isCellEditable(int row, int column) { return column == 5; }
 };
 styleTable(table);

 // Action Column Renderer/Editor
 JPanel buttonPanelRenderer = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0) );
 buttonPanelRenderer.setOpaque(false);
 JButton approveBtnRend = new JButton(" \u2713"); // Check mark;
 JButton rejectBtnRend = new JButton(" \u2715"); // X mark;
 JButton detailsBtnRend = new JButton("..."); // Details;
 styleMiniButton(approveBtnRend, BUTTONAPPROVEBG);
 styleMiniButton(rejectBtnRend, BUTTONREJECTBG);
 styleMiniButton(detailsBtnRend, BUTTONBG_DARK);
 buttonPanelRenderer.add(approveBtnRend);
 buttonPanelRenderer.add(rejectBtnRend);
 buttonPanelRenderer.add(detailsBtnRend);

 table.getColumnModel().getColumn(5).setCellRenderer( (tbl, value, isSelected, hasFocus, row, column) -> buttonPanelRenderer);

 table.getColumnModel().getColumn(5).setCellEditor(new ActionPanelEditor(new JCheckBox(), (actionCommand, row) -> {
 String orphanageName = (String) table.getModel().getValueAt(row, 0);
 switch(actionCommand) {
 case "approve":
 JOptionPane.showMessageDialog(this, "Approve: " + orphanageName, "Approve", JOptionPane.INFORMATIONMESSAGE);
 break;
 case "reject":
 if(JOptionPane.showConfirmDialog(this, "Reject " + orphanageName + " ?", "Confirm Reject", JOptionPane.YESNOOPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YESOPTION) {
 JOptionPane.showMessageDialog(this, "Reject: " + orphanageName, "Reject", JOptionPane.INFORMATIONMESSAGE);
 }
 break;
 case "details":
 JOptionPane.showMessageDialog(this, "View Details for: " + orphanageName, "Details", JOptionPane.INFORMATIONMESSAGE);
 break;
 }
 }) );

 table.getColumnModel().getColumn(0).setPreferredWidth(180);
 table.getColumnModel().getColumn(1).setPreferredWidth(120);
 table.getColumnModel().getColumn(2).setPreferredWidth(180);
 table.getColumnModel().getColumn(3).setPreferredWidth(100);
 table.getColumnModel().getColumn(4).setPreferredWidth(80);
 table.getColumnModel().getColumn(5).setPreferredWidth(120);
 table.setRowHeight(approveBtnRend.getPreferredSize().height + 4);

 JScrollPane scrollPane = new JScrollPane(table);
 styleScrollPane(scrollPane);
 panel.add(scrollPane, BorderLayout.CENTER);

 return panel;
 }

 private JPanel createUserManagementTab() {
 JPanel panel = new JPanel(new BorderLayout(10, 10) );
 panel.setOpaque(false);
 panel.setBorder(new EmptyBorder(15, 15, 15, 15) );

 // User Search/Filter
 JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5) );
 searchPanel.setOpaque(false);

 JLabel lblSearchUser = new JLabel("Search User:");
 JTextField txtUserSearch = new JTextField(20);
 JLabel lblUserRole = new JLabel("Role:");
 JComboBox<String> cmbUserRole = new JComboBox<>(new String[ ]{"Any Role", "Admin", "OrphanageStaff", "Donor", "Volunteer"});
 JButton btnUserSearch = new JButton("Search");

 styleFormLabel(lblSearchUser);
 styleTextField(txtUserSearch);
 styleFormLabel(lblUserRole);
 styleComboBox(cmbUserRole);
 styleActionButton(btnUserSearch, "Find users" );

 searchPanel.add(lblSearchUser);
 searchPanel.add(txtUserSearch);
 searchPanel.add(lblUserRole);
 searchPanel.add(cmbUserRole);
 searchPanel.add(btnUserSearch);

 panel.add(searchPanel, BorderLayout.NORTH);

 // User Table
 String[ ] columnNames = {"Username", "Email", "Role", "Status", "Registered", "Actions"};
 Object[ ] [ ] data = {
 {"staff_user", "staff@example.com", "OrphanageStaff", "Active", "2025-01-15", "Manage"},
 {"donor_user", "donor@mail.net", "Donor", "Active", "2025-02-10", "Manage"},
 {"volunteerA", "vol@provider.org", "Volunteer", "Active", "2025-03-01", "Manage"},
 {"old_staff", "old@example.com", "OrphanageStaff", "Suspended", "2024-11-20", "Manage"},
 {"admin_user", "admin@orphanagehub.com", "Admin", "Active", "2024-10-01", "Manage"}
 };

 JTable table = new JTable(data, columnNames) {
 @Override public boolean isCellEditable(int row, int column) { return column == 5; }
 };
 styleTable(table);

 // Action Column Renderer/Editor(Similar to verification tab)
 JPanel userActionPanelRenderer = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0) );
 userActionPanelRenderer.setOpaque(false);
 JButton activateBtnRend = new JButton(" \u2713");
 JButton suspendBtnRend = new JButton(" \u2715");
 JButton viewBtnRend = new JButton("...");
 styleMiniButton(activateBtnRend, BUTTONAPPROVEBG);
 styleMiniButton(suspendBtnRend, BUTTONSUSPEND_BG);
 styleMiniButton(viewBtnRend, BUTTONBG_DARK);
 userActionPanelRenderer.add(activateBtnRend);
 userActionPanelRenderer.add(suspendBtnRend);
 userActionPanelRenderer.add(viewBtnRend);
        
 table.getColumnModel().getColumn(5).setCellRenderer( (tbl, value, isSelected, hasFocus, row, column) -> userActionPanelRenderer);
 // A CellEditor would be added here similarly to the verification tab to handle clicks.

 JScrollPane scrollPane = new JScrollPane(table);
 styleScrollPane(scrollPane);
 panel.add(scrollPane, BorderLayout.CENTER);
 return panel;
 }

 private JPanel createSystemOverviewTab() {
 JPanel panel = new JPanel();
 panel.setOpaque(false);
 panel.setLayout(new FlowLayout(FlowLayout.LEFT) );
 panel.setBorder(new EmptyBorder(15, 15, 15, 15) );
 JLabel comingSoonLabel = new JLabel("System Overview and Analytics - Coming Soon!");
 comingSoonLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 18) );
 comingSoonLabel.setForeground(TEXTCOLOR_DARK);
 panel.add(comingSoonLabel);
 return panel;
 }

 // - - - Styling Helpers-- -
 private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) ); label.setForeground(TEXTCOLOR_DARK); }
 private void styleTextField(JTextField field) { field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) ); field.setForeground(INPUTFG_DARK); field.setBackground(INPUTBG_DARK); Border p=new EmptyBorder(4,6,4,6); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK,1),p) ); field.setCaretColor(Color.LIGHTGRAY); }
 private void styleComboBox(JComboBox<?> comboBox) { comboBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) ); comboBox.setForeground(INPUTFG_DARK); comboBox.setBackground(INPUTBG_DARK); comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK,1) ); for(Component c:comboBox.getComponents(){if(c instanceof JButton){( (JButton)c).setBackground(BUTTONBG_DARK);( (JButton)c).setBorder(BorderFactory.createEmptyBorder();break;}} Object p=comboBox.getUI().getAccessibleChild(comboBox,0); if(p instanceof JPopupMenu){JPopupMenu pm= (JPopupMenu)p;pm.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) ); for(Component comp:pm.getComponents(){if(comp instanceof JScrollPane){JScrollPane sp= (JScrollPane)comp;sp.getViewport().setBackground(INPUTBG_DARK);applyScrollbarUI(sp.getVerticalScrollBar(); Component l=sp.getViewport().getView(); if(l instanceof JList){( (JList<?>)l).setBackground(INPUTBG_DARK);( (JList<?>)l).setForeground(INPUTFG_DARK);( (JList<?>)l).setSelectionBackground(BUTTONBG_DARK);( (JList<?>)l).setSelectionForeground(BUTTONFG_DARK);}}}}}
 private void styleTable(JTable table) { table.setBackground(TABLECELLBG); table.setForeground(TABLECELLFG); table.setGridColor(TABLEGRIDCOLOR); table.setRowHeight(28); table.setFont(new Font(Font.SANSSERIF,Font.PLAIN,13) ); table.setFillsViewportHeight(true); table.setSelectionBackground(TABLECELLSELECTED_BG); table.setSelectionForeground(TABLECELLSELECTED_FG); table.setShowGrid(true); table.setIntercellSpacing(new Dimension(0,1) ); JTableHeader h=table.getTableHeader(); h.setBackground(TABLEHEADER_BG); h.setForeground(TABLEHEADER_FG); h.setFont(new Font(Font.SANSSERIF,Font.BOLD,14) ); h.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) ); h.setReorderingAllowed(true); h.setResizingAllowed(true); DefaultTableCellRenderer r=new DefaultTableCellRenderer(); r.setHorizontalAlignment(SwingConstants.LEFT); r.setVerticalAlignment(SwingConstants.CENTER); r.setBorder(new EmptyBorder(2,5,2,5) ); for(int i=0;i<table.getColumnCount() -1;i++){table.getColumnModel().getColumn(i).setCellRenderer(r);} }
 private void styleScrollPane(JScrollPane scrollPane) { scrollPane.setOpaque(false); scrollPane.getViewport().setOpaque(false); scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) ); applyScrollbarUI(scrollPane.getVerticalScrollBar(); applyScrollbarUI(scrollPane.getHorizontalScrollBar(); }
 private void applyScrollbarUI(JScrollBar scrollBar) { scrollBar.setUI(new BasicScrollBarUI() { @Override protected void configureScrollBarColors(){this.thumbColor=BUTTONBG_DARK; this.trackColor=DARKBGEND;} @Override protected JButton createDecreaseButton(int o){return createZeroButton();} @Override protected JButton createIncreaseButton(int o){return createZeroButton();} private JButton createZeroButton(){JButton b=new JButton();b.setPreferredSize(new Dimension(0,0) );b.setMaximumSize(new Dimension(0,0) );b.setMinimumSize(new Dimension(0,0) );return b;} @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r){g.setColor(thumbColor);g.fillRect(r.x,r.y,r.width,r.height);} @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r){g.setColor(trackColor);g.fillRect(r.x,r.y,r.width,r.height);} }); scrollBar.setUnitIncrement(16); }
 private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANSSERIF,Font.BOLD,12) ); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) ); btn.setForeground(BUTTONFG_DARK); btn.setFocusPainted(false); btn.setBackground(BUTTONBG_DARK); Border p=new EmptyBorder(6,12,6,12); btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker(),p) ); btn.addMouseListener(new MouseAdapter(){@Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTONBG_DARK) ){btn.setBackground(BUTTONHOVER_BG_DARK);}}@Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTONHOVER_BG_DARK) ){btn.setBackground(BUTTONBG_DARK);}}}); }
 private void styleMiniButton(JButton btn, Color color) { btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) ); btn.setMargin(new Insets(0,0,0,0) ); btn.setBackground(color); btn.setForeground(BUTTONFG_DARK); btn.setFocusPainted(false); }

 // - - - Inner classes for Table Button-- -
 static class ActionPanelEditor extends DefaultCellEditor() {
 private final JPanel panel;
 private final BiConsumer<String, Integer> actionConsumer;
 private int editingRow;

 public ActionPanelEditor(JCheckBox checkBox, BiConsumer<String, Integer> actionConsumer) {
 super(checkBox);
 this.actionConsumer = actionConsumer;
 panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0) );
 panel.setOpaque(false);
            
 JButton approveBtn = new JButton(" \u2713");
 JButton rejectBtn = new JButton(" \u2715");
 JButton detailsBtn = new JButton("...");

 styleMiniButton(approveBtn, BUTTONAPPROVEBG);
 styleMiniButton(rejectBtn, BUTTONREJECTBG);
 styleMiniButton(detailsBtn, BUTTONBG_DARK);

 approveBtn.setActionCommand("approve");
 rejectBtn.setActionCommand("reject");
 detailsBtn.setActionCommand("details");

 ActionListener al = e -> {
 fireEditingStopped();
 actionConsumer.accept(e.getActionCommand(), editingRow);
 };
            
 approveBtn.addActionListener(al);
 rejectBtn.addActionListener(al);
 detailsBtn.addActionListener(al);

 panel.add(approveBtn);
 panel.add(rejectBtn);
 panel.add(detailsBtn);
 }

 @Override
 public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
 this.editingRow = row;
 return panel;
 }

 private static void styleMiniButton(JButton btn, Color color) {
 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 btn.setMargin(new Insets(0,0,0,0) );
 btn.setBackground(color);
 btn.setForeground(BUTTONFG_DARK);
 btn.setFocusPainted(false);
 btn.setCursor(new Cursor(Cursor.HANDCURSOR) );
 }
 }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: DonorDashboardPanel.java
║ Lines: 823
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.ArrayList;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
/ **
 * Dashboard panel for donor users.
 * Allows donors to view orphanages and their resource needs.
 *  * PAT Rubric Coverage:
 * - 3.2: Separation of UI from business logic
 * - 3.3: Typed methods with parameters
 * - 3.5: Database querying operations
 * - 3.7: Donor functionality implementation
 * - 3.8: User-friendly donor interface
 * /
public class DonorDashboardPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(DonorDashboardPanel.class);


 private OrphanageHubApp mainApp;
 private User donorUser;
 private JLabel userLabel;
 private JTable resultsTable;
 private DefaultTableModel tableModel;
 private JTextField txtSearch;
 private JComboBox<String> cmbLocation;
 private JComboBox<String> cmbCategory;
    
 // Services
 private DonorService donorService;
    
 // Color constants(same as other panels)
 private static final Color DARKBGSTART = new Color(45, 52, 54);
 private static final Color DARKBGEND = new Color(35, 42, 44);
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
 private static final Color INPUTBG_DARK = new Color(60, 60, 60);
 private static final Color INPUTFG_DARK = new Color(220, 220, 220);
 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
 private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
 private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
 private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
 private static final Color TABLECELLBG = new Color(55, 62, 64);
 private static final Color TABLECELLFG = TEXTCOLOR_DARK;
 private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
 private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
 private static final Color BUTTONSEARCH_BG = new Color(72, 149, 239);
 private static final Color BUTTONSEARCH_HOVER_BG = new Color(92, 169, 249);
 private static final Color BUTTONDONATEBG = new Color(60, 179, 113);
 private static final Color BUTTONDONATEHOVER_BG = new Color(70, 190, 123);

 public DonorDashboardPanel(OrphanageHubApp app) {
 this.mainApp = app;
 this.donorService = new DonorService();
 setLayout(new BorderLayout(0, 0) );
 initComponents();
 Logger.debug("DonorDashboard initialized");
 }

 / **
 * Sets the donor user and refreshes the display.
 * @param user The authenticated donor user
 * /
 public void setDonorUser(User user) {
 this.donorUser = user;
 Logger.info( "Donor user set: " + user.getUsername();
 refreshUI();
 loadOrphanageData();
 }

 private void refreshUI() {
 if(donorUser != null && userLabel != null) {
 userLabel.setText( "User: " + donorUser.getUsername();
 }
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 private void initComponents() {
 // Header Panel
 JPanel headerPanel = createHeaderPanel();
 add(headerPanel, BorderLayout.NORTH);

 // Main Content Area
 JPanel contentPanel = new JPanel(new BorderLayout(10, 15) );
 contentPanel.setOpaque(false);
 contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20) );

 // Search/Filter Panel
 JPanel searchFilterPanel = createSearchFilterPanel();
 contentPanel.add(searchFilterPanel, BorderLayout.NORTH);

 // Results Table
 createResultsTable();
 JScrollPane scrollPane = new JScrollPane(resultsTable);
 styleScrollPane(scrollPane);
 contentPanel.add(scrollPane, BorderLayout.CENTER);

 add(contentPanel, BorderLayout.CENTER);
 }

 private JPanel createHeaderPanel() {
 JPanel headerPanel = new JPanel(new BorderLayout(10, 0) );
 headerPanel.setOpaque(false);
 headerPanel.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),;
 new EmptyBorder(10, 20, 10, 20);
 ) );

 // Left side: Role Icon and Title
 JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0) );
 titleGroup.setOpaque(false);
 JLabel iconLabel = new JLabel(" \u2764"); // Heart symbol;
 iconLabel.setFont(new Font( "Segoe UI Symbol", Font.BOLD, 22) );
 iconLabel.setForeground(new Color(255, 105, 180) );
 JLabel nameLabel = new JLabel("Donor Dashboard");
 nameLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 20) );
 nameLabel.setForeground(TITLECOLOR_DARK);
 titleGroup.add(iconLabel);
 titleGroup.add(nameLabel);
 headerPanel.add(titleGroup, BorderLayout.WEST);

 JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0) );
 userGroup.setOpaque(false);
        
 userLabel = new JLabel("User: Loading...");
 userLabel.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 userLabel.setForeground(TEXTCOLOR_DARK);
        
 JButton btnLogout = new JButton("Logout");
 styleActionButton(btnLogout, "Logout and return to welcome screen" );
 btnLogout.setPreferredSize(new Dimension(100, 30) );
 btnLogout.setBackground(new Color(192, 57, 43) );
 btnLogout.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {  btnLogout.setBackground(new Color(231, 76, 60) );  }
 @Override public void mouseExited(MouseEvent e) {  btnLogout.setBackground(new Color(192, 57, 43) );  }
 });
 btnLogout.addActionListener(e -> ) {
 int confirm = JOptionPane.showConfirmDialog(this,;
 "Are you sure you want to logout?",
 "Confirm Logout",
 JOptionPane.YESNOOPTION);
 if(confirm == JOptionPane.YESOPTION) {
 mainApp.logout();
 }
 });
        
 userGroup.add(userLabel);
 userGroup.add(btnLogout);
 headerPanel.add(userGroup, BorderLayout.EAST);

 return headerPanel;
 }

 private JPanel createSearchFilterPanel() {
 JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5) );
 panel.setOpaque(false);

 JLabel lblSearch = new JLabel("Search:");
 styleFormLabel(lblSearch);
 txtSearch = new JTextField(20);
 styleTextField(txtSearch);

 JLabel lblFilterLocation = new JLabel("Location:");
 styleFormLabel(lblFilterLocation);
 cmbLocation = new JComboBox<>(new String[ ]{"Any Location"});
 styleComboBox(cmbLocation);

 JLabel lblFilterCategory = new JLabel("Need Category:");
 styleFormLabel(lblFilterCategory);
 cmbCategory = new JComboBox<>(new String[ ]{
 "Any Category", "Food", "Clothing", "Education", "Medical", "Funding", "Other"
 });
 styleComboBox(cmbCategory);

 JButton btnSearch = new JButton("Apply Filters");
 styleActionButton(btnSearch, "Find orphanages or requests matching criteria" );
 btnSearch.setBackground(BUTTONSEARCH_BG);
 btnSearch.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {  btnSearch.setBackground(BUTTONSEARCH_HOVER_BG);  }
 @Override public void mouseExited(MouseEvent e) {  btnSearch.setBackground(BUTTONSEARCH_BG);  }
 });
 btnSearch.addActionListener(e -> performSearch();

 panel.add(lblSearch);
 panel.add(txtSearch);
 panel.add(Box.createHorizontalStrut(10) );
 panel.add(lblFilterLocation);
 panel.add(cmbLocation);
 panel.add(Box.createHorizontalStrut(10) );
 panel.add(lblFilterCategory);
 panel.add(cmbCategory);
 panel.add(Box.createHorizontalStrut(15) );
 panel.add(btnSearch);

 return panel;
 }

 private void createResultsTable() {
 String[ ] columnNames = {"Orphanage Name", "Location", "Contact", "Current Needs", "Actions"};
 tableModel = new DefaultTableModel(columnNames, 0) {
 @Override
 public boolean isCellEditable(int row, int column) {
 return column == 4; // Only Actions column is editable;
 }
 };
        
 resultsTable = new JTable(tableModel);
 styleTable(resultsTable);
        
 // Add button renderer/editor for Actions column
 resultsTable.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer();
 resultsTable.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox() );
        
 // Adjust column widths
 resultsTable.getColumnModel().getColumn(0).setPreferredWidth(200);
 resultsTable.getColumnModel().getColumn(1).setPreferredWidth(120);
 resultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
 resultsTable.getColumnModel().getColumn(3).setPreferredWidth(250);
 resultsTable.getColumnModel().getColumn(4).setPreferredWidth(120);
 }

 / **
 * Loads orphanage data from the database.
 * PAT 3.5: Database query operation;
 * /
 private void loadOrphanageData() {
 try {
 List<OrphanageInfo> orphanages = donorService.getVerifiedOrphanages();
 updateTable(orphanages);
            
 // Update location combo box
 updateLocationFilter(orphanages);
            
 } catch(ServiceException e) {
 Logger.error( "Failed to load orphanage data: " + e.getMessage();
 JOptionPane.showMessageDialog(this,
 "Error loading orphanage data:\n" + e.getMessage(),;
 "Database Error",
 JOptionPane.ERROR_MESSAGE);
 }
 }

 private void updateTable(List<OrphanageInfo> orphanages) {
 tableModel.setRowCount(0);
        
 for(OrphanageInfo info : orphanages) {
 Object[ ] row = {
 info.getName(),;
 info.getAddress(),;
 info.getContactPerson(),;
 info.getCurrentNeeds(),;
 "View Details";
 };
 tableModel.addRow(row);
 }
 }

 private void updateLocationFilter(List<OrphanageInfo> orphanages) {
 cmbLocation.removeAllItems();
 cmbLocation.addItem("Any Location");
        
 // Extract unique locations
 List<String> locations = new ArrayList<>();
 for(OrphanageInfo info : orphanages) {
 String location = extractCity(info.getAddress();
 if( !locations.contains(location) ) {
 locations.add(location);
 }
 }
        
 for(String location : locations) {
 cmbLocation.addItem(location);
 }
 }

 private String extractCity(String address) {
 // Simple extraction - assumes city is first part of address
 if(address != null && address.contains(",") ) {
 return address.split(",") [0].trim();
 }
 return address != null ? address : "Unknown";
 }

 private void performSearch() {
 String searchText = txtSearch.getText().trim();
 String location = (String) cmbLocation.getSelectedItem();
 String category = (String) cmbCategory.getSelectedItem();
        
 try {
 List<OrphanageInfo> results = donorService.searchOrphanages(;
 searchText, location, category);
 updateTable(results);
            
 Logger.info( "Search performed with " + results.size() + " results" );
            
 } catch(ServiceException e) {
 Logger.error( "Search failed: " + e.getMessage();
 JOptionPane.showMessageDialog(this,
 "Error performing search:\n" + e.getMessage(),;
 "Search Error",
 JOptionPane.ERROR_MESSAGE);
 }
 }

 / **
 * Shows detailed view of an orphanage and its needs.
 * /
 private void showOrphanageDetails(int row) {
 String orphanageName = (String) tableModel.getValueAt(row, 0);
        
 try {
 OrphanageInfo info = donorService.getOrphanageDetails(orphanageName);
 List<ResourceRequest> requests = donorService.getOrphanageRequests(info.getOrphanageId();
            
 // Create detail dialog
 JDialog dialog = new JDialog( (Frame) SwingUtilities.getWindowAncestor(this),;
 "Orphanage Details - " + orphanageName, true);
 dialog.setLayout(new BorderLayout();
            
 // Info panel
 JPanel infoPanel = new JPanel(new GridBagLayout();
 infoPanel.setBorder(new EmptyBorder(20, 20, 10, 20) );
 infoPanel.setBackground(DARKBGSTART);
            
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(3, 5, 3, 5);
            
 int row_idx = 0;
 addDetailField(infoPanel, gbc, row_idx++, "Name:", info.getName();
 addDetailField(infoPanel, gbc, row_idx++, "Address:", info.getAddress();
 addDetailField(infoPanel, gbc, row_idx++, "Contact:", info.getContactPerson();
 addDetailField(infoPanel, gbc, row_idx++, "Email:", info.getContactEmail();
 addDetailField(infoPanel, gbc, row_idx++, "Phone:", info.getContactPhone();
            
 dialog.add(infoPanel, BorderLayout.NORTH);
            
 // Requests table
 JPanel requestsPanel = new JPanel(new BorderLayout();
 requestsPanel.setBorder(new EmptyBorder(10, 20, 20, 20) );
 requestsPanel.setBackground(DARKBGSTART);
            
 JLabel lblRequests = new JLabel("Current Resource Needs:");
 lblRequests.setFont(new Font(Font.SANSSERIF, Font.BOLD, 16) );
 lblRequests.setForeground(TITLECOLOR_DARK);
 requestsPanel.add(lblRequests, BorderLayout.NORTH);
            
 String[ ] columns = {"Category", "Description", "Needed", "Fulfilled", "Urgency", "Donate"};
 DefaultTableModel model = new DefaultTableModel(columns, 0) {
 @Override
 public boolean isCellEditable(int r, int c) {
 return c == 5;
 }
 };
            
 for(ResourceRequest req : requests) {
 if("Open".equals(req.getStatus() ) ) {
 Object[ ] reqRow = {
 req.getItemCategory(),;
 req.getItemDescription(),;
 req.getQuantityNeeded(),;
 req.getQuantityFulfilled(),;
 req.getUrgency(),;
 "Donate"
 };
 model.addRow(reqRow);


            
 JTable requestTable = new JTable(model);
 styleTable(requestTable);
 requestTable.setRowHeight(30);
            
 // Add donate button to last column
 requestTable.getColumnModel().getColumn(5).setCellRenderer(new DonateButtonRenderer();
 requestTable.getColumnModel().getColumn(5).setCellEditor(;
 new DonateButtonEditor(new JCheckBox(), requests, info) );
            
 JScrollPane scrollPane = new JScrollPane(requestTable);
 styleScrollPane(scrollPane);
 scrollPane.setPreferredSize(new Dimension(700, 200) );
 requestsPanel.add(scrollPane, BorderLayout.CENTER);
            
 dialog.add(requestsPanel, BorderLayout.CENTER);
            
 // Close button
 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT) );
 buttonPanel.setBackground(DARKBGSTART);
 JButton btnClose = new JButton("Close");
 styleActionButton(btnClose, "Close this window" );
 btnClose.addActionListener(e -> dialog.dispose();
 buttonPanel.add(btnClose);
 dialog.add(buttonPanel, BorderLayout.SOUTH);
            
 dialog.setSize(800, 500);
 dialog.setLocationRelativeTo(this);
 dialog.setVisible(true);
            
 } catch(ServiceException e) {
 Logger.error( "Failed to load orphanage details: " + e.getMessage();
 JOptionPane.showMessageDialog(this,
 "Error loading orphanage details:\n" + e.getMessage(),;
 "Error",
 JOptionPane.ERROR_MESSAGE);
 }
 }

 private void addDetailField(JPanel panel, GridBagConstraints gbc, int row,  String label, String value) {
 gbc.gridx = 0;
 gbc.gridy = row;
 gbc.weightx = 0;
 JLabel lbl = new JLabel(label);
 styleFormLabel(lbl);
 panel.add(lbl, gbc);
        
 gbc.gridx = 1;
 gbc.weightx = 1.0;
 JLabel val = new JLabel(value);
 val.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 val.setForeground(INPUTFG_DARK);
 panel.add(val, gbc);
 }

 // Button renderer for Actions column
 class ButtonRenderer extends JButton implements TableCellRenderer() {
 public ButtonRenderer() {
 setOpaque(true);
 setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 setForeground(BUTTONFG_DARK);
 setBackground(BUTTONSEARCH_BG);
 setBorder(new EmptyBorder(2, 5, 2, 5) );
 setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 }
        
 @Override
 public Component getTableCellRendererComponent(JTable table, Object value,
 boolean isSelected, boolean hasFocus, int row, int column) {
 setText( (value == null) ? " " : value.toString();
 return this;
 }
 }

 // Button editor for Actions column
 class ButtonEditor extends DefaultCellEditor() {
 protected JButton button;
 private String label;
 private boolean isPushed;
 private int currentRow;

 public ButtonEditor(JCheckBox checkBox) {
 super(checkBox);
 button = new JButton();
 button.setOpaque(true);
 button.setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 button.setForeground(BUTTONFG_DARK);
 button.setBackground(BUTTONSEARCH_BG);
 button.setBorder(new EmptyBorder(2, 5, 2, 5) );
 button.addActionListener(e -> fireEditingStopped();
 }

 @Override
 public Component getTableCellEditorComponent(JTable table, Object value,
 boolean isSelected, int row, int column) {
 label = (value == null) ? " " : value.toString();
 button.setText(label);
 isPushed = true;
 currentRow = row;
 return button;
 }

 @Override
 public Object getCellEditorValue() {
 if(isPushed) {
 showOrphanageDetails(currentRow);
 }
 isPushed = false;
 return label;
 }

 @Override
 public boolean stopCellEditing() {
 isPushed = false;
 return super.stopCellEditing();
 }
 }

 // Donate button renderer
 class DonateButtonRenderer extends JButton implements TableCellRenderer() {
 public DonateButtonRenderer() {
 setOpaque(true);
 setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 setForeground(BUTTONFG_DARK);
 setBackground(BUTTONDONATEBG);
 setBorder(new EmptyBorder(2, 5, 2, 5) );
 }
        
 @Override
 public Component getTableCellRendererComponent(JTable table, Object value,
 boolean isSelected, boolean hasFocus, int row, int column) {
 setText("Donate");
 return this;
 }
 }

 // Donate button editor
 class DonateButtonEditor extends DefaultCellEditor() {
 protected JButton button;
 private boolean isPushed;
 private int currentRow;
 private List<ResourceRequest> requests;
 private OrphanageInfo orphanageInfo;

 public DonateButtonEditor(JCheckBox checkBox, List<ResourceRequest> requests,  OrphanageInfo info) {
 super(checkBox);
 this.requests = requests;
 this.orphanageInfo = info;
            
 button = new JButton();
 button.setOpaque(true);
 button.setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 button.setForeground(BUTTONFG_DARK);
 button.setBackground(BUTTONDONATEBG);
 button.addActionListener(e -> fireEditingStopped();
 }

 @Override
 public Component getTableCellEditorComponent(JTable table, Object value,
 boolean isSelected, int row, int column) {
 button.setText("Donate");
 isPushed = true;
 currentRow = row;
 return button;
 }

 @Override
 public Object getCellEditorValue() {
 if(isPushed && currentRow < requests.size() ) {
 showDonationDialog(requests.get(currentRow), orphanageInfo);
 }
 isPushed = false;
 return "Donate";
 }
 }

 private void showDonationDialog(ResourceRequest request, OrphanageInfo orphanage) {
 JDialog dialog = new JDialog( (Frame) SwingUtilities.getWindowAncestor(this),;
 "Make a Donation", true);
 dialog.setLayout(new BorderLayout();
        
 JPanel formPanel = new JPanel(new GridBagLayout();
 formPanel.setBorder(new EmptyBorder(20, 20, 20, 20) );
 formPanel.setBackground(DARKBGSTART);
        
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(5, 5, 5, 5);
        
 // Display request details
 int row = 0;
 addDonationField(formPanel, gbc, row++, "Orphanage:", orphanage.getName();
 addDonationField(formPanel, gbc, row++, "Item Needed:", request.getItemDescription();
 addDonationField(formPanel, gbc, row++, "Category:", request.getItemCategory();
 addDonationField(formPanel, gbc, row++, "Quantity Needed:",  String.valueOf(request.getQuantityNeeded() - request.getQuantityFulfilled() );
        
 // Donation amount input
 gbc.gridx = 0;
 gbc.gridy = row;
 JLabel lblAmount = new JLabel("Donation Quantity:");
 styleFormLabel(lblAmount);
 formPanel.add(lblAmount, gbc);
        
 gbc.gridx = 1;
 int maxDonation = request.getQuantityNeeded() - request.getQuantityFulfilled();
 SpinnerNumberModel model = new SpinnerNumberModel(1, 1, maxDonation, 1);
 JSpinner spnAmount = new JSpinner(model);
 styleSpinner(spnAmount);
 formPanel.add(spnAmount, gbc);
 row++;
        
 // Contact info
 gbc.gridx = 0;
 gbc.gridy = row;
 JLabel lblContact = new JLabel("Your Contact:");
 styleFormLabel(lblContact);
 formPanel.add(lblContact, gbc);
        
 gbc.gridx = 1;
 JTextField txtContact = new JTextField();
 styleTextField(txtContact);
 if(donorUser != null) {
 txtContact.setText(donorUser.getEmail();
 }
 formPanel.add(txtContact, gbc);
 row++;
        
 // Message
 gbc.gridx = 0;
 gbc.gridy = row;
 gbc.anchor = GridBagConstraints.NORTHWEST;
 JLabel lblMessage = new JLabel("Message:");
 styleFormLabel(lblMessage);
 formPanel.add(lblMessage, gbc);
        
 gbc.gridx = 1;
 gbc.fill = GridBagConstraints.BOTH;
 gbc.weighty = 1.0;
 JTextArea txtMessage = new JTextArea(3, 20);
 txtMessage.setLineWrap(true);
 txtMessage.setWrapStyleWord(true);
 styleTextArea(txtMessage);
 JScrollPane msgScroll = new JScrollPane(txtMessage);
 styleScrollPane(msgScroll);
 formPanel.add(msgScroll, gbc);
        
 dialog.add(formPanel, BorderLayout.CENTER);
        
 // Buttons
 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT) );
 buttonPanel.setBackground(DARKBGSTART);
        
 JButton btnConfirm = new JButton("Confirm Donation");
 JButton btnCancel = new JButton("Cancel");
 styleActionButton(btnConfirm, "Confirm your donation pledge" );
 styleActionButton(btnCancel, "Cancel donation" );
        
 btnConfirm.setBackground(BUTTONDONATEBG);
 btnConfirm.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {
 btnConfirm.setBackground(BUTTONDONATEHOVER_BG);
 }
 @Override public void mouseExited(MouseEvent e) {
 btnConfirm.setBackground(BUTTONDONATEBG);
 }
 });
        
 btnConfirm.addActionListener(e -> ) {
 String contact = txtContact.getText().trim();
 if(contact.isEmpty() ) {
 JOptionPane.showMessageDialog(dialog,
 "Please provide contact information.",
 "Validation Error",
 JOptionPane.ERROR_MESSAGE);
 return;
 }
            
 try {
 // Record donation
 Donation donation = new Donation();
 donation.setDonorId(donorUser.getUserId();
 donation.setRequestId(request.getRequestID();
 donation.setQuantity( (Integer) spnAmount.getValue();
 donation.setContactInfo(contact);
 donation.setMessage(txtMessage.getText().trim();
                
 donorService.recordDonation(donation);
                
 JOptionPane.showMessageDialog(dialog,
 "Thank you for your donation! \n" +
 "The orphanage will contact you at: " + contact,
 "Donation Successful",
 JOptionPane.INFORMATIONMESSAGE);
                
 dialog.dispose();
 loadOrphanageData(); // Refresh data;
                
 } catch(ServiceException ex) {
 Logger.error( "Failed to record donation: " + ex.getMessage();
 JOptionPane.showMessageDialog(dialog,
 "Error recording donation:\n" + ex.getMessage(),;
 "Error",
 JOptionPane.ERROR_MESSAGE);
 }
 });
        
 btnCancel.addActionListener(e -> dialog.dispose();
        
 buttonPanel.add(btnConfirm);
 buttonPanel.add(btnCancel);
 dialog.add(buttonPanel, BorderLayout.SOUTH);
        
 dialog.setSize(500, 400);
 dialog.setLocationRelativeTo(this);
 dialog.setVisible(true);
 }

 private void addDonationField(JPanel panel, GridBagConstraints gbc, int row,
 String label, String value) {
 gbc.gridx = 0;
 gbc.gridy = row;
 gbc.weightx = 0;
 gbc.weighty = 0;
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.anchor = GridBagConstraints.EAST;
 JLabel lbl = new JLabel(label);
 styleFormLabel(lbl);
 panel.add(lbl, gbc);
        
 gbc.gridx = 1;
 gbc.weightx = 1.0;
 gbc.anchor = GridBagConstraints.WEST;
 JLabel val = new JLabel(value);
 val.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 val.setForeground(INPUTFG_DARK);
 panel.add(val, gbc);
 }

 // Styling methods(similar to other panels)
 private void styleTable(JTable table) {
 table.setBackground(TABLECELLBG);
 table.setForeground(TABLECELLFG);
 table.setGridColor(TABLEGRIDCOLOR);
 table.setRowHeight(35);
 table.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 table.setFillsViewportHeight(true);
 table.setSelectionBackground(TABLECELLSELECTED_BG);
 table.setSelectionForeground(TABLECELLSELECTED_FG);
        
 JTableHeader header = table.getTableHeader();
 header.setBackground(TABLEHEADER_BG);
 header.setForeground(TABLEHEADER_FG);
 header.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 header.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 }

 private void styleScrollPane(JScrollPane scrollPane) {
 scrollPane.setOpaque(false);
 scrollPane.getViewport().setOpaque(false);
 scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 applyScrollbarUI(scrollPane.getVerticalScrollBar();
 applyScrollbarUI(scrollPane.getHorizontalScrollBar();
 }

 private void applyScrollbarUI(JScrollBar scrollBar) {
 scrollBar.setUI(new BasicScrollBarUI() {
 @Override protected void configureScrollBarColors() {
 this.thumbColor = BUTTONBG_DARK;
 this.trackColor = DARKBGEND;
 }
 @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
 @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
 private JButton createZeroButton() {
 JButton b = new JButton();
 b.setPreferredSize(new Dimension(0, 0) );
 return b;
 }
 });
 scrollBar.setUnitIncrement(16);
 }

 private void styleActionButton(JButton btn, String tooltip) {
 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 12) );
 btn.setToolTipText(tooltip);
 btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 btn.setForeground(BUTTONFG_DARK);
 btn.setFocusPainted(false);
 btn.setBackground(BUTTONBG_DARK);
 btn.setBorder(new CompoundBorder(
 BorderFactory.createLineBorder(BUTTONBG_DARK.darker(),;
 new EmptyBorder(6, 12, 6, 12) );
 }

 private void styleFormLabel(JLabel label) {
 label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 label.setForeground(TEXTCOLOR_DARK);
 }

 private void styleTextField(JTextField field) {
 field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 field.setForeground(INPUTFG_DARK);
 field.setBackground(INPUTBG_DARK);
 field.setBorder(new CompoundBorder(
 BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),;
 new EmptyBorder(4, 6, 4, 6) );
 field.setCaretColor(Color.LIGHTGRAY);
 }

 private void styleTextArea(JTextArea area) {
 area.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 area.setForeground(INPUTFG_DARK);
 area.setBackground(INPUTBG_DARK);
 area.setBorder(new EmptyBorder(5, 8, 5, 8) );
 area.setCaretColor(Color.LIGHTGRAY);
 }

 private void styleComboBox(JComboBox<?> comboBox) {
 comboBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 comboBox.setForeground(INPUTFG_DARK);
 comboBox.setBackground(INPUTBG_DARK);
 comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1) );
 }

 private void styleSpinner(JSpinner spinner) {
 spinner.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 JComponent editor = spinner.getEditor();
 if(editor instanceof JSpinner.DefaultEditor) {
 }
 }
))))))))))))))))))))))))))))))))))))))))
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: HomePanel.java
║ Lines: 217
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D; // Keep this import;
import java.net.URL; // * ** RE-ADDED for Image Loading * **;

public class HomePanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(HomePanel.class);


 private OrphanageHubApp mainApp;
 private JRadioButton rbDonor;
 private JRadioButton rbStaff;
 private JRadioButton rbVolunteer;
 private ButtonGroup roleGroup;

 // Define Colors for a Sleek Dark Theme
 private static final Color DARKBGSTART = new Color(45, 52, 54); // Dark Grey/Blue Start;
 private static final Color DARKBGEND = new Color(35, 42, 44); // Slightly Darker End;
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233); // Light Grey for Titles;
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200); // Slightly dimmer Grey for Text;
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80); // Darker Border;
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114); // Muted Grey/Blue Button;
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134); // Lighter Hover;
 private static final Color FALLBACKBG_DARK = new Color(60, 60, 60); // Background for image fallback;

 public HomePanel(OrphanageHubApp app) {
 this.mainApp = app;
 setBorder(new EmptyBorder(30, 40, 30, 40) );
 setLayout(new BorderLayout(20, 20) );
 initComponents();
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 private void initComponents() {

 // - - - North: Title-- -
 JLabel lblTitle = new JLabel( "Welcome to OrphanageHub", SwingConstants.CENTER);
 lblTitle.setFont(new Font(Font.SANSSERIF, Font.BOLD, 32) );
 lblTitle.setForeground(TITLECOLOR_DARK);
 lblTitle.setBorder(new EmptyBorder(0, 0, 25, 0) );
 add(lblTitle, BorderLayout.NORTH);

 // - - - Center: Image and Description-- -
 centerPanel.setOpaque(false); // Crucial: Make center panel transparent;

 // * ** Image Loading and Styling(Reintroduced) * **
 JLabel lblImage = new JLabel();
 Dimension imageSize = new Dimension(220, 220); // Define image size;
 lblImage.setPreferredSize(imageSize);
 lblImage.setMinimumSize(imageSize); // Prevent shrinking;
 lblImage.setMaximumSize(imageSize); // Prevent expanding;
 lblImage.setHorizontalAlignment(SwingConstants.CENTER);
 lblImage.setVerticalAlignment(SwingConstants.CENTER);
 lblImage.setOpaque(false); // Image label itself is transparent;

 URL imageURL = getClass().getResource("home.png"); // Load image relative to class file {
 if(imageURL != null) {
 try {
 ImageIcon icon = new ImageIcon(imageURL);
 if(icon.getImageLoadStatus() == MediaTracker.COMPLETE && icon.getIconWidth() > 0) {
 Image img = icon.getImage().getScaledInstance(imageSize.width, imageSize.height, Image.SCALESMOOTH);
 lblImage.setIcon(new ImageIcon(img) );
 // Add a subtle border *only* if image loads successfully
 lblImage.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK, 1) );
 } else {
 throw new Exception("Image loading failed or width is zero.");
 }
 } catch(Exception e) {
 System.err.println( "ERROR: Failed to load or scale home.png: " + e.getMessage();
 setFallbackImageStyleDark(lblImage); // Use dark theme fallback;
 }
 } else {
 System.err.println("Warning: home.png not found in classpath relative to HomePanel.class.");
 setFallbackImageStyleDark(lblImage); // Use dark theme fallback;
 }
 centerPanel.add(lblImage, BorderLayout.WEST); // Add image to the left;

 // Description Text
 String htmlDesc = " <html><body style= 'width:350px; font-family: Sans-Serif; font-size: 14pt; color: rgb(200,200,200);'>" // Adjusted width;
 + " <p><b>A better world starts with care.</b></p>"
 + " <p>OrphanageHub connects orphanages with the donors and volunteers needed "
 + "to create lasting change for vulnerable children.</p>"
 + " </body></html>";
 JLabel lblDesc = new JLabel(htmlDesc);
 lblDesc.setOpaque(false); // Make label transparent;
 centerPanel.add(lblDesc, BorderLayout.CENTER); // Add description next to image;

 add(centerPanel, BorderLayout.CENTER); // Add the combined panel to main layout;


 // - - - South: Role Selection and Actions-- - (Structure remains the same)
 JPanel southPanel = new JPanel(new BorderLayout(10, 20) );
 southPanel.setOpaque(false);

 // Role Selection Panel
 JPanel rolePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 25, 10) );
 rolePanel.setOpaque(false);
 TitledBorder titledBorder = BorderFactory.createTitledBorder(;
 BorderFactory.createLineBorder(BORDERCOLOR_DARK),;
 " Select Your Role ",
 TitledBorder.CENTER,
 TitledBorder.DEFAULTPOSITION,
 new Font(Font.SANSSERIF, Font.BOLD, 15),;
 TITLECOLOR_DARK
 );
 rolePanel.setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10) );


 rbDonor = new JRadioButton( "Donor", true);
 rbStaff = new JRadioButton("Orphanage Staff");
 rbVolunteer = new JRadioButton("Volunteer");
 styleRadioButton(rbDonor, "Select if you wish to donate or view needs." );
 styleRadioButton(rbStaff, "Select if you manage an orphanage profile." );
 styleRadioButton(rbVolunteer, "Select if you want to find volunteer opportunities." );

 roleGroup = new ButtonGroup();
 roleGroup.add(rbDonor);
 roleGroup.add(rbStaff);
 roleGroup.add(rbVolunteer);

 rolePanel.add(rbDonor);
 rolePanel.add(rbStaff);
 rolePanel.add(rbVolunteer);
 southPanel.add(rolePanel, BorderLayout.CENTER);

 // Action Buttons Panel
 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 5) );
 buttonPanel.setOpaque(false);
 buttonPanel.setBorder(new EmptyBorder(15, 0, 10, 0) );

 JButton btnLogin = new JButton("Login");
 JButton btnRegister = new JButton("Register");
 styleActionButton(btnLogin, "Proceed to login with your existing account." );
 styleActionButton(btnRegister, "Create a new account based on your selected role." );

 btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGINPANEL) );
 btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATIONPANEL) );

 buttonPanel.add(btnLogin);
 buttonPanel.add(btnRegister);
 southPanel.add(buttonPanel, BorderLayout.SOUTH);

 add(southPanel, BorderLayout.SOUTH);
 }

 // * ** Fallback method adapted for dark theme * **
 private void setFallbackImageStyleDark(JLabel label) {
 label.setFont(new Font(Font.SANSSERIF, Font.ITALIC, 14) );
 label.setBorder(BorderFactory.createDashedBorder(BORDERCOLOR_DARK, 5, 5) ); // Use dark border color;
 label.setOpaque(true); // Make background visible for border;
 label.setBackground(FALLBACKBG_DARK); // Dark background for placeholder;
 }


 private void styleRadioButton(JRadioButton rb, String tooltip) {
 rb.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 rb.setForeground(TEXTCOLOR_DARK);
 rb.setOpaque(false);
 rb.setToolTipText(tooltip);
 rb.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 }

 private void styleActionButton(JButton btn, String tooltip) {
 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 btn.setPreferredSize(new Dimension(130, 40) );
 btn.setToolTipText(tooltip);
 btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 btn.setBackground(BUTTONBG_DARK);
 btn.setForeground(BUTTONFG_DARK);
 btn.setFocusPainted(false);

 Border line = BorderFactory.createLineBorder(BUTTONBG_DARK.darker();
 Border padding = new EmptyBorder(5, 15, 5, 15);
 btn.setBorder(new CompoundBorder(line, padding) );

 btn.addMouseListener(new MouseAdapter() {
 @Override
 public void mouseEntered(MouseEvent evt) {
 btn.setBackground(BUTTONHOVER_BG_DARK);
 }
 @Override
 public void mouseExited(MouseEvent evt) {
 btn.setBackground(BUTTONBG_DARK);
 }
 });
 }

 public String getSelectedRole() {
 if(rbDonor.isSelected() return "Donor";
 if(rbStaff.isSelected() return "OrphanageStaff";
 if(rbVolunteer.isSelected() return "Volunteer";
 return "Unknown";
 }
)))))))
}
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: LoginPanel.java
║ Lines: 182
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// PAT 3.2: Import backend and model classes
import com.orphanagehub.model.User;
import com.orphanagehub.service.AuthService;
import com.orphanagehub.service.ServiceException;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class LoginPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(LoginPanel.class);


 private final OrphanageHubApp mainApp;
 private final JTextField txtUsername;
 private final JPasswordField txtPassword;
    
 // PAT 3.2: Reference to the backend service layer
 private final AuthService authService;

 // - - - Colors(Unchanged) - - -
 private static final Color DARKBGSTART = new Color(45, 52, 54);
 private static final Color DARKBGEND = new Color(35, 42, 44);
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
 private static final Color INPUTBG_DARK = new Color(60, 60, 60);
 private static final Color INPUTFG_DARK = new Color(220, 220, 220);
 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
 private static final Color LINKCOLOR = new Color(100, 180, 255);

 public LoginPanel(OrphanageHubApp app) {
 this.mainApp = app;
 // PAT 3.2: Instantiate the service, not the DAO, in the UI layer
 this.authService = new AuthService();  setLayout(new GridBagLayout();
 setBorder(new EmptyBorder(40, 60, 40, 60) );
        
 // Initialize components
 txtUsername = new JTextField(20);
 txtPassword = new JPasswordField(20);
        
 initComponents();
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 private void initComponents() {
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(5, 5, 5, 5);

 // - - - Title-- -
 JLabel lblTitle = new JLabel( "User Login", SwingConstants.CENTER);
 lblTitle.setFont(new Font(Font.SANSSERIF, Font.BOLD, 28) );
 lblTitle.setForeground(TITLECOLOR_DARK);
 gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2; gbc.weightx = 1.0; gbc.insets = new Insets(0, 5, 25, 5);
 add(lblTitle, gbc);
 gbc.gridwidth = 1; gbc.insets = new Insets(8, 5, 8, 5);

 // - - - Username-- -
 JLabel lblUsername = new JLabel("Username:"); styleFormLabel(lblUsername);
 gbc.gridx = 0; gbc.gridy = 1; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
 add(lblUsername, gbc);
 styleTextField(txtUsername);
 gbc.gridx = 1; gbc.gridy = 1; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
 add(txtUsername, gbc);

 // - - - Password-- -
 JLabel lblPassword = new JLabel("Password:"); styleFormLabel(lblPassword);
 gbc.gridx = 0; gbc.gridy = 2; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
 add(lblPassword, gbc);
 styleTextField(txtPassword);
 gbc.gridx = 1; gbc.gridy = 2; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
 add(txtPassword, gbc);

 // - - - Login Button-- -
 JButton btnLogin = new JButton("Login"); styleActionButton(btnLogin, "Authenticate and access your dashboard" );
 gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; gbc.fill = GridBagConstraints.NONE; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(20, 5, 10, 5);
 add(btnLogin, gbc);

 // - - - Links Panel(Unchanged) - - -
 JPanel linksPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0) ); linksPanel.setOpaque(false);
 JLabel lblForgotPassword = createHyperlinkLabel("Forgot Password?"); lblForgotPassword.setToolTipText("Click here to reset your password");
 lblForgotPassword.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { JOptionPane.showMessageDialog(LoginPanel.this, "Password reset functionality not yet implemented.", "Forgot Password", JOptionPane.INFORMATIONMESSAGE); }});
 JLabel lblRegister = createHyperlinkLabel("Need an account? Register"); lblRegister.setToolTipText("Click here to go to the registration page");
 lblRegister.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { mainApp.navigateTo(OrphanageHubApp.REGISTRATIONPANEL); }});
 linksPanel.add(lblForgotPassword); linksPanel.add(lblRegister);
 gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(5, 5, 15, 5);
 add(linksPanel, gbc);

 // - - - Back Button(Unchanged) - - -
 JButton btnBack = new JButton("Back"); styleActionButton(btnBack, "Return to the welcome screen" ); btnBack.setBackground(BUTTONBG_DARK.darker();
 btnBack.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTONHOVER_BG_DARK); } @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTONBG_DARK.darker(); }});
 btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOMEPANEL) );
 gbc.gridx = 0; gbc.gridy = 5; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(10, 5, 5, 5);
 add(btnBack, gbc);

 // * ** REAL DATABASE-DRIVEN LOGIN LOGIC * **
 btnLogin.addActionListener(e -> performLogin();
 // Allow login on pressing Enter in password field
 txtPassword.addActionListener(e -> performLogin();
 }

 / **
 * Handles the login process by validating input and calling the backend service.
 * This method demonstrates separation of concerns and defensive programming.
 * PAT Rubric: 3.2, 3.3, 3.5, 3.6, 3.7
 * /
 private void performLogin() {
 // PAT 3.6: Defensive Programming - Trim input to handle whitespace
 String username = txtUsername.getText().trim();
 String password = new String(txtPassword.getPassword();

 try {
 // PAT 3.3 & 3.5: Call the backend service to authenticate against the database.
 User user = authService.authenticate(username, password);

 // If authentication is successful, user object is returned.
 mainApp.setCurrentUser(user); // Store the logged-in user's data in the main app;

 String role = user.getUserRole();
 String targetPanel;

 // PAT 3.8(UX): Navigate to the correct dashboard based on the user's role from the DB.
 // This fulfills the program flow designed in Phase 2.
 switch(role) {
 case "Admin":
 targetPanel = OrphanageHubApp.ADMINDASHBOARDPANEL;
 break;
 case "OrphanageStaff":
 targetPanel = OrphanageHubApp.ORPHANAGEDASHBOARDPANEL;
 break;
 case "Donor":
 targetPanel = OrphanageHubApp.DONOR_DASHBOARDPANEL;
 break;
 case "Volunteer":
 targetPanel = OrphanageHubApp.VOLUNTEER_DASHBOARDPANEL;
 break;
 default:
 // This is a defensive catch-all for unexpected data.
 throw new ServiceException( "Unknown user role found in database: " + role);
 }

 mainApp.showDashboard(targetPanel);
 // Clear fields for security and usability when the user logs out and returns.
 txtUsername.setText(" ");
 txtPassword.setText(" ");

 } catch(ServiceException ex) {
 // PAT 3.6: Display a clear, user-friendly error message from the service layer.
 JOptionPane.showMessageDialog(this, ex.getMessage(), "Login Failed", JOptionPane.ERROR_MESSAGE);
 txtPassword.setText(" "); // Clear password field on failure;
 txtUsername.requestFocusInWindow(); // Set focus back to username;
 }
 }

 // - - - Styling Helper Methods(Unchanged) - - -
 private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) ); label.setForeground(TEXTCOLOR_DARK); }
 private void styleTextField(JComponent field) { field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) ); field.setForeground(INPUTFG_DARK); field.setBackground(INPUTBG_DARK); Border p=new EmptyBorder(5,8,5,8); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK,1),p) ); if(field instanceof JTextField) ( (JTextField)field).setCaretColor(Color.LIGHTGRAY); else if(field instanceof JPasswordField) ( (JPasswordField)field).setCaretColor(Color.LIGHTGRAY); }
 private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANSSERIF,Font.BOLD,14) ); btn.setPreferredSize(new Dimension(130,40) ); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) ); btn.setBackground(BUTTONBG_DARK); btn.setForeground(BUTTONFG_DARK); btn.setFocusPainted(false); Border l=BorderFactory.createLineBorder(BUTTONBG_DARK.darker(); Border p=new EmptyBorder(5,15,5,15); btn.setBorder(new CompoundBorder(l,p) ); btn.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTONBG_DARK) ){btn.setBackground(BUTTONHOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTONHOVER_BG_DARK) ){btn.setBackground(BUTTONBG_DARK);}} }); }
))))))))
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: OrphanageDashboardPanel.java
║ Lines: 1144
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.Vector;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
/ **
 * Dashboard panel for orphanage staff members.
 * Provides complete CRUD operations for resource requests and orphanage management.
 *  * PAT Rubric Coverage:
 * - 3.1: Comprehensive comments for all complex operations
 * - 3.2: Complete separation of UI from business logic via service layer
 * - 3.3: Typed methods with proper parameters throughout
 * - 3.5: Full database CRUD operations for resource requests
 * - 3.6: Defensive programming with extensive error handling
 * - 3.7: Complete fulfillment of orphanage management specifications
 * - 3.8: Intuitive user experience with tabbed interface
 * /
public class OrphanageDashboardPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(OrphanageDashboardPanel.class);


 // UI Components
 private OrphanageHubApp mainApp;
 private JLabel orphanageNameLabel;
 private JLabel userLabel;
 private JLabel statActiveRequests;
 private JLabel statPendingDonations;
 private JLabel statActiveVolunteers;
 private JTable resourceTable;
 private DefaultTableModel tableModel;
 private JTabbedPane tabbedPane;
    
 // Data Components
 private User staffUser;
 private Orphanage orphanage;
 private OrphanageService orphanageService;
    
 // Color Scheme Constants
 private static final Color DARKBGSTART = new Color(45, 52, 54);
 private static final Color DARKBGEND = new Color(35, 42, 44);
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
 private static final Color TAB_BGSELECTED = new Color(70, 80, 82);
 private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
 private static final Color TAB_FG = TITLECOLOR_DARK;
 private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
 private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
 private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
 private static final Color TABLECELLBG = new Color(55, 62, 64);
 private static final Color TABLECELLFG = TEXTCOLOR_DARK;
 private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
 private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
 private static final Color ACCENTCOLORORANGE = new Color(230, 145, 56);
 private static final Color ACCENTCOLOR_BLUE = new Color(72, 149, 239);
 private static final Color ACCENTCOLOR_GREEN = new Color(87, 190, 106);
 private static final Color INPUTBG_DARK = new Color(60, 60, 60);
 private static final Color INPUTFG_DARK = new Color(220, 220, 220);
 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);

 / **
 * Constructor initializes the dashboard panel.
 * @param app Reference to the main application frame
 * /
 public OrphanageDashboardPanel(OrphanageHubApp app) {
 this.mainApp = app;
 this.orphanageService = new OrphanageService();
 setLayout(new BorderLayout(0, 0) );
 initComponents();
 Logger.debug("OrphanageDashboard initialized");
 }

 / **
 * Sets the staff user and loads their associated orphanage data.
 * PAT 3.3: Typed method with User parameter
 * PAT 3.5: Loads data from database
 * @param user The authenticated staff user
 * /
 public void setStaffUser(User user) {
 this.staffUser = user;
 Logger.info( "Staff user set: " + user.getUsername();
 loadOrphanageData();
 refreshUI();
        
 // Switch to overview tab on login
 if(tabbedPane != null) {
 tabbedPane.setSelectedIndex(0);
 }
 }

 / **
 * Loads orphanage data from the database for the current staff user.
 * PAT 3.5: Database query operation
 * PAT 3.6: Defensive programming with error handling
 * /
 private void loadOrphanageData() {
 if(staffUser == null) {
 Logger.warn("Attempted to load orphanage data with null user");
 return;
 }
        
 try {
 orphanage = orphanageService.getOrphanageForStaff(staffUser);
            
 if(orphanage == null) {
 Logger.error( "No orphanage found for user: " + staffUser.getUsername();
 JOptionPane.showMessageDialog(this,  "No orphanage is associated with your account.\n" +
 "Please contact the system administrator.",
 "Configuration Error",  JOptionPane.ERROR_MESSAGE);
 mainApp.logout();
 } else {
 Logger.info( "Loaded orphanage: " + orphanage.getName();
 }
            
 } catch(ServiceException e) {
 Logger.error( "Failed to load orphanage data: " + e.getMessage();
 JOptionPane.showMessageDialog(this,  "Error loading orphanage data:\n" + e.getMessage(),;
 "Database Error",  JOptionPane.ERROR_MESSAGE);
 mainApp.logout();
 }
 }

 / **
 * Refreshes all UI components with current data.
 * PAT 3.8: Ensures consistent user experience
 * /
 private void refreshUI() {
 // Update header labels
 if(orphanage != null && orphanageNameLabel != null) {
 orphanageNameLabel.setText(orphanage.getName();
 }
 if(staffUser != null && userLabel != null) {
 userLabel.setText( "User: " + staffUser.getUsername();
 }
        
 // Refresh data displays
 loadResourceRequests();
 updateStatistics();
 }

 / **
 * Updates the statistics displayed in the overview tab.
 * PAT 3.5: Aggregates data from database
 * /
 private void updateStatistics() {
 if(orphanage == null) return;
        
 try {
 List<ResourceRequest> requests = orphanageService.getRequestsForOrphanage(orphanage.getOrphanageID();
            
 // Calculate statistics
 int activeRequests = 0;
 int pendingDonations = 0;
            
 for(ResourceRequest req : requests) {
 if("Open".equals(req.getStatus() ) ) {
 activeRequests++;
 }
 if(req.getQuantityFulfilled() > 0 && req.getQuantityFulfilled() < req.getQuantityNeeded() ) {
 pendingDonations++;
 }
 }
            
 // Update stat labels
 if(statActiveRequests != null) {
 statActiveRequests.setText(String.valueOf(activeRequests) );
 }
 if(statPendingDonations != null) {
 statPendingDonations.setText(String.valueOf(pendingDonations) );
 }
 if(statActiveVolunteers != null) {
 // This would require additional service method
 statActiveVolunteers.setText("8"); // Placeholder;
 }
            
 } catch(ServiceException e) {
 Logger.error( "Failed to update statistics: " + e.getMessage();
 }
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 / **
 * Initializes all UI components.
 * PAT 3.4: Good programming technique - modular initialization
 * /
 private void initComponents() {
 // Header Panel
 JPanel headerPanel = createHeaderPanel();
 add(headerPanel, BorderLayout.NORTH);

 // Tabbed Pane for Content
 tabbedPane = createTabbedPane();
 add(tabbedPane, BorderLayout.CENTER);
 }

 / **
 * Creates the header panel with orphanage info and logout button.
 * PAT 3.8: User experience - clear navigation and user info
 * /
 private JPanel createHeaderPanel() {
 JPanel headerPanel = new JPanel(new BorderLayout(10, 0) );
 headerPanel.setOpaque(false);
 headerPanel.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),;
 new EmptyBorder(10, 20, 10, 20);
 ) );

 // Left side: Orphanage Name and Role Icon
 JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0) );
 titleGroup.setOpaque(false);
 JLabel iconLabel = new JLabel(" \u2302"); // House symbol;
 iconLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 22) );
 iconLabel.setForeground(new Color(135, 206, 250) );
        
 orphanageNameLabel = new JLabel("Loading...");
 orphanageNameLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 20) );
 orphanageNameLabel.setForeground(TITLECOLOR_DARK);
        
 titleGroup.add(iconLabel);
 titleGroup.add(orphanageNameLabel);
 headerPanel.add(titleGroup, BorderLayout.WEST);

 // Right side: User info and Logout Button
 JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0) );
 userGroup.setOpaque(false);
        
 userLabel = new JLabel("User: Loading...");
 userLabel.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 userLabel.setForeground(TEXTCOLOR_DARK);
        
 JButton btnLogout = new JButton("Logout");
 styleActionButton(btnLogout, "Logout and return to welcome screen" );
 btnLogout.setPreferredSize(new Dimension(100, 30) );
 btnLogout.setBackground(new Color(192, 57, 43) );
 btnLogout.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {  btnLogout.setBackground(new Color(231, 76, 60) );  }
 @Override public void mouseExited(MouseEvent e) {  btnLogout.setBackground(new Color(192, 57, 43) );  }
 });
 btnLogout.addActionListener(e -> ) {
 int confirm = JOptionPane.showConfirmDialog(this,;
 "Are you sure you want to logout?",
 "Confirm Logout",
 JOptionPane.YESNOOPTION);
 if(confirm == JOptionPane.YESOPTION) {
 Logger.info( "User logged out: " + staffUser.getUsername();
 mainApp.logout();
 }
 });
        
 userGroup.add(userLabel);
 userGroup.add(btnLogout);
 headerPanel.add(userGroup, BorderLayout.EAST);

 return headerPanel;
 }

 / **
 * Creates the tabbed pane with all functional tabs.
 * PAT 3.8: User experience - organized interface
 * /
 private JTabbedPane createTabbedPane() {
 JTabbedPane tabbedPane = new JTabbedPane();
 tabbedPane.setOpaque(false);
 tabbedPane.setForeground(TAB_FG);
 tabbedPane.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );

 // Apply custom UI for professional appearance
 tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
 @Override
 protected void installDefaults() {
 super.installDefaults();
 lightHighlight = TAB_BGSELECTED;
 shadow = BORDERCOLOR_DARK;
 darkShadow = DARKBGEND;
 focus = TAB_BGSELECTED;
 }

 @Override
 protected void paintTabBackground(Graphics g, int tabPlacement, int tabIndex,  int x, int y, int w, int h, boolean isSelected) {
 g.setColor(isSelected ? TAB_BGSELECTED : TAB_BG_UNSELECTED);
 g.fillRoundRect(x, y, w, h + 5, 5, 5);
 }

 @Override
 protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex,  int x, int y, int w, int h, boolean isSelected) {
 // Minimal border
 }

 @Override
 protected void paintContentBorder(Graphics g, int tabPlacement, int selectedIndex) {
 int width = tabPane.getWidth();
 int height = tabPane.getHeight();
 Insets insets = tabPane.getInsets();
 int tabAreaHeight = calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
 int x = insets.left;
 int y = insets.top + tabAreaHeight - 1;
 int w = width - insets.right - insets.left;
 int h = height - insets.top - insets.bottom - y;
 g.setColor(BORDERCOLOR_DARK);
 g.drawRect(x, y, w - 1, h - 1);
 }
 });

 // Add functional tabs
 tabbedPane.addTab( "Overview", createOverviewTab();
 tabbedPane.addTab( "Resource Requests", createResourceRequestsTab();
 tabbedPane.addTab( "Orphanage Profile", createProfileTab();

 return tabbedPane;
 }

 / **
 * Creates the overview tab with statistics cards.
 * PAT 3.8: Visual representation of key metrics
 * /
 private JPanel createOverviewTab() {
 JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20) );
 panel.setOpaque(false);
 panel.setBorder(new EmptyBorder(25, 25, 25, 25) );

 // Create stat cards
 JPanel activeRequestsCard = createStatCard( "Active Requests", "0", ACCENTCOLORORANGE);
 JPanel pendingDonationsCard = createStatCard( "Pending Donations", "0", ACCENTCOLOR_BLUE);
 JPanel activeVolunteersCard = createStatCard( "Active Volunteers", "0", ACCENTCOLOR_GREEN);
        
 // Store references to value labels for updates
 statActiveRequests = (JLabel) ( (BorderLayout) activeRequestsCard.getLayout();
 .getLayoutComponent(activeRequestsCard, BorderLayout.CENTER);
 statPendingDonations = (JLabel) ( (BorderLayout) pendingDonationsCard.getLayout();
 .getLayoutComponent(pendingDonationsCard, BorderLayout.CENTER);
 statActiveVolunteers = (JLabel) ( (BorderLayout) activeVolunteersCard.getLayout();
 .getLayoutComponent(activeVolunteersCard, BorderLayout.CENTER);
        
 panel.add(activeRequestsCard);
 panel.add(pendingDonationsCard);
 panel.add(activeVolunteersCard);

 return panel;
 }

 / **
 * Creates a statistics card for the overview tab.
 * @param title The title of the statistic
 * @param value The initial value to display
 * @param accentColor The accent color for the card
 * @return A styled JPanel representing the stat card
 * /
 private JPanel createStatCard(String title, String value, Color accentColor) {
 JPanel card = new JPanel(new BorderLayout(5, 5) );
 card.setBackground(TAB_BG_UNSELECTED);
 card.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),;
 new EmptyBorder(15, 20, 15, 20);
 ) );

 JLabel valueLabel = new JLabel(value, SwingConstants.CENTER);
 valueLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 36) );
 valueLabel.setForeground(TITLECOLOR_DARK);
 card.add(valueLabel, BorderLayout.CENTER);

 JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
 titleLabel.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 titleLabel.setForeground(TEXTCOLOR_DARK);
 card.add(titleLabel, BorderLayout.SOUTH);

 return card;
 }

 / **
 * Creates the resource requests tab with full CRUD functionality.
 * PAT 3.5: Complete database CRUD operations
 * PAT 3.7: Core functionality implementation
 * /
 private JPanel createResourceRequestsTab() {
 JPanel panel = new JPanel(new BorderLayout(10, 10) );
 panel.setOpaque(false);
 panel.setBorder(new EmptyBorder(15, 15, 15, 15) );

 // Toolbar with action buttons
 JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0) );
 toolbar.setOpaque(false);
        
 JButton btnAdd = new JButton("Add Request");
 JButton btnEdit = new JButton("Edit Selected");
 JButton btnDelete = new JButton("Delete Selected");
 JButton btnRefresh = new JButton("Refresh");
        
 styleActionButton(btnAdd, "Create a new resource request" );
 styleActionButton(btnEdit, "Modify the selected request" );
 styleActionButton(btnDelete, "Remove the selected request" );
 styleActionButton(btnRefresh, "Refresh the request list" );
        
 // Special styling for delete button
 btnDelete.setBackground(new Color(192, 57, 43) );
 btnDelete.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {  btnDelete.setBackground(new Color(231, 76, 60) );  }
 @Override public void mouseExited(MouseEvent e) {  btnDelete.setBackground(new Color(192, 57, 43) );  }
 });
        
 // Action listeners
 btnAdd.addActionListener(e -> showAddRequestDialog();
 btnEdit.addActionListener(e -> showEditRequestDialog();
 btnDelete.addActionListener(e -> deleteSelectedRequest();
 btnRefresh.addActionListener(e -> loadResourceRequests();

 toolbar.add(btnAdd);
 toolbar.add(btnEdit);
 toolbar.add(btnDelete);
 toolbar.add(btnRefresh);
 panel.add(toolbar, BorderLayout.NORTH);

 // Table with dynamic model
 String[ ] columnNames = {"ID", "Category", "Description", "Needed", "Fulfilled", "Urgency", "Status"};
 tableModel = new DefaultTableModel(columnNames, 0) {
 @Override
 public boolean isCellEditable(int row, int column) {
 return false; // Prevent direct cell editing;
 }
            
 @Override
 public Class<?> getColumnClass(int columnIndex) {
 // Proper column types for sorting
 switch(columnIndex) {
 case 3: // Needed
 case 4: // Fulfilled
 return Integer.class;
 default:
 return String.class;
 }
 }
 };
        
 resourceTable = new JTable(tableModel);
 styleTable(resourceTable);
        
 // Enable sorting
 resourceTable.setAutoCreateRowSorter(true);
        
 // Add double-click to edit
 resourceTable.addMouseListener(new MouseAdapter() {
 @Override
 public void mouseClicked(MouseEvent e) {
 if(e.getClickCount() == 2) {
 showEditRequestDialog();
 }
 }
 });
        
 JScrollPane scrollPane = new JScrollPane(resourceTable);
 styleScrollPane(scrollPane);
 panel.add(scrollPane, BorderLayout.CENTER);

 return panel;
 }

 / **
 * Creates the orphanage profile tab.
 * PAT 3.7: Profile management functionality
 * /
 private JPanel createProfileTab() {
 JPanel panel = new JPanel(new GridBagLayout();
 panel.setOpaque(false);
 panel.setBorder(new EmptyBorder(20, 20, 20, 20) );
        
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(5, 5, 5, 5);
        
 if(orphanage != null) {
 int row = 0;
            
 // Display orphanage information
 addProfileField(panel, gbc, row++, "Orphanage ID:", orphanage.getOrphanageID();
 addProfileField(panel, gbc, row++, "Name:", orphanage.getName();
 addProfileField(panel, gbc, row++, "Address:", orphanage.getAddress();
 addProfileField(panel, gbc, row++, "Contact Person:", orphanage.getContactPerson();
 addProfileField(panel, gbc, row++, "Contact Email:", orphanage.getContactEmail();
 addProfileField(panel, gbc, row++, "Contact Phone:", orphanage.getContactPhone();
 addProfileField(panel, gbc, row++, "Verification Status:", orphanage.getVerificationStatus();
            
 gbc.gridx = 0;
 gbc.gridy = row;
 gbc.anchor = GridBagConstraints.NORTHWEST;
 JLabel lblDesc = new JLabel("Description:");
 styleFormLabel(lblDesc);
 panel.add(lblDesc, gbc);
            
 gbc.gridx = 1;
 gbc.gridy = row;
 gbc.fill = GridBagConstraints.BOTH;
 gbc.weightx = 1.0;
 gbc.weighty = 1.0;
 JTextArea txtDescription = new JTextArea(orphanage.getDescription();
 txtDescription.setEditable(false);
 txtDescription.setLineWrap(true);
 txtDescription.setWrapStyleWord(true);
 styleTextArea(txtDescription);
 JScrollPane scrollPane = new JScrollPane(txtDescription);
 styleScrollPane(scrollPane);
 scrollPane.setPreferredSize(new Dimension(400, 100) );
 panel.add(scrollPane, gbc);
            
 } else {
 JLabel label = new JLabel( "No orphanage data available", SwingConstants.CENTER);
 label.setFont(new Font(Font.SANSSERIF, Font.ITALIC, 16) );
 label.setForeground(TEXTCOLOR_DARK);
 panel.add(label);
 }
        
 return panel;
 }

 / **
 * Adds a field to the profile display.
 * /
 private void addProfileField(JPanel panel, GridBagConstraints gbc, int row,  String label, String value) {
 gbc.gridx = 0;
 gbc.gridy = row;
 gbc.anchor = GridBagConstraints.EAST;
 gbc.weightx = 0;
 JLabel lbl = new JLabel(label);
 styleFormLabel(lbl);
 panel.add(lbl, gbc);
        
 gbc.gridx = 1;
 gbc.gridy = row;
 gbc.anchor = GridBagConstraints.WEST;
 gbc.weightx = 1.0;
 JTextField txt = new JTextField(value);
 txt.setEditable(false);
 styleTextField(txt);
 panel.add(txt, gbc);
 }

 / **
 * Loads resource requests from the database and populates the table.
 * PAT 3.5: Database SELECT operation
 * PAT 3.6: Defensive programming with error handling
 * /
 private void loadResourceRequests() {
 if(orphanage == null || tableModel == null) return;
        
 try {
 List<ResourceRequest> requests = orphanageService.getRequestsForOrphanage(;
 orphanage.getOrphanageID();
            
 // Clear existing data
 tableModel.setRowCount(0);
            
 // Populate table with database data
 for(ResourceRequest req : requests) {
 Vector<Object> row = new Vector<>();
 row.add(req.getRequestID();
 row.add(req.getItemCategory();
 row.add(req.getItemDescription();
 row.add(req.getQuantityNeeded();
 row.add(req.getQuantityFulfilled();
 row.add(req.getUrgency();
 row.add(req.getStatus();
 tableModel.addRow(row);
 }
            
 Logger.info( "Loaded " + requests.size() + " resource requests" );
            
 } catch(ServiceException e) {
 Logger.error( "Failed to load resource requests: " + e.getMessage();
 JOptionPane.showMessageDialog(this,
 "Error loading requests:\n" + e.getMessage(),;
 "Database Error",
 JOptionPane.ERROR_MESSAGE);
 }
 }

 / **
 * Shows dialog for adding a new resource request.
 * PAT 3.5: Database INSERT operation
 * PAT 3.6: Input validation and error handling
 * PAT 3.7: Core functionality - adding requests
 * /
 private void showAddRequestDialog() {
 if(orphanage == null || staffUser == null) {
 JOptionPane.showMessageDialog(this,  "Session error. Please log in again.",  "Error",  JOptionPane.ERROR_MESSAGE);
 return;
 }
        
 // Create custom dialog
 JDialog dialog = new JDialog( (Frame) SwingUtilities.getWindowAncestor(this),  "Add New Resource Request", true);
 dialog.setLayout(new BorderLayout();
        
 // Form panel
 JPanel formPanel = new JPanel(new GridBagLayout();
 formPanel.setBorder(new EmptyBorder(20, 20, 20, 20) );
 formPanel.setBackground(DARKBGSTART);
        
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(5, 5, 5, 5);
        
 // Category selection
 JLabel lblCategory = new JLabel("Category:");
 styleFormLabel(lblCategory);
 JComboBox<String> cmbCategory = new JComboBox<>(;
 new String[ ]{"Food", "Clothing", "Education", "Medical", "Funding", "Other"});
 styleComboBox(cmbCategory);
        
 // Description input
 JLabel lblDescription = new JLabel("Description:");
 styleFormLabel(lblDescription);
 JTextArea txtDescription = new JTextArea(3, 20);
 txtDescription.setLineWrap(true);
 txtDescription.setWrapStyleWord(true);
 styleTextArea(txtDescription);
 JScrollPane descScroll = new JScrollPane(txtDescription);
 styleScrollPane(descScroll);
        
 // Quantity input
 JLabel lblQuantity = new JLabel("Quantity Needed:");
 styleFormLabel(lblQuantity);
 SpinnerNumberModel quantityModel = new SpinnerNumberModel(1, 1, 9999, 1);
 JSpinner spnQuantity = new JSpinner(quantityModel);
 styleSpinner(spnQuantity);
        
 // Urgency selection
 JLabel lblUrgency = new JLabel("Urgency:");
 styleFormLabel(lblUrgency);
 JComboBox<String> cmbUrgency = new JComboBox<>(;
 new String[ ]{"Low", "Medium", "High", "Urgent"});
 styleComboBox(cmbUrgency);
 cmbUrgency.setSelectedItem("Medium");
        
 // Add components to form
 int row = 0;
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblCategory, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(cmbCategory, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblDescription, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 gbc.fill = GridBagConstraints.BOTH;
 formPanel.add(descScroll, gbc);
 gbc.fill = GridBagConstraints.HORIZONTAL;
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblQuantity, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(spnQuantity, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblUrgency, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(cmbUrgency, gbc);
        
 dialog.add(formPanel, BorderLayout.CENTER);
        
 // Button panel
 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT) );
 buttonPanel.setBackground(DARKBGSTART);
        
 JButton btnSave = new JButton("Save");
 JButton btnCancel = new JButton("Cancel");
 styleActionButton(btnSave, "Save the new request" );
 styleActionButton(btnCancel, "Cancel without saving" );
        
 btnSave.addActionListener(e -> ) {
 // Validate input
 String description = txtDescription.getText().trim();
 if(description.isEmpty() ) {
 JOptionPane.showMessageDialog(dialog,  "Please enter a description for the request.",  "Validation Error",  JOptionPane.ERROR_MESSAGE);
 return;
 }
            
 if(description.length() > 500) {
 JOptionPane.showMessageDialog(dialog,  "Description must be less than 500 characters.",  "Validation Error",  JOptionPane.ERROR_MESSAGE);
 return;
 }
            
 try {
 // Create new request object
 ResourceRequest newRequest = new ResourceRequest();
 newRequest.setOrphanageID(orphanage.getOrphanageID();
 newRequest.setPostedByUserID(staffUser.getUserId();
 newRequest.setItemCategory( (String) cmbCategory.getSelectedItem();
 newRequest.setItemDescription(description);
 newRequest.setQuantityNeeded( (Integer) spnQuantity.getValue();
 newRequest.setQuantityFulfilled(0);
 newRequest.setUrgency( (String) cmbUrgency.getSelectedItem();
 newRequest.setStatus(ResourceRequest.DEFAULTSTATUS);
                
 // Save to database
 orphanageService.addRequest(newRequest);
                
 Logger.info( "New request added: " + newRequest.getRequestID();
                
 // Refresh table and statistics
 loadResourceRequests();
 updateStatistics();
                
 JOptionPane.showMessageDialog(dialog,  "Resource request added successfully! ",  "Success",  JOptionPane.INFORMATIONMESSAGE);
                
 dialog.dispose();
                
 } catch(ServiceException ex) {
 Logger.error( "Failed to add request: " + ex.getMessage();
 JOptionPane.showMessageDialog(dialog,  "Error adding request:\n" + ex.getMessage(),  "Database Error",  JOptionPane.ERROR_MESSAGE);
 }
 });
        
 btnCancel.addActionListener(e -> dialog.dispose();
        
 buttonPanel.add(btnSave);
 buttonPanel.add(btnCancel);
 dialog.add(buttonPanel, BorderLayout.SOUTH);
        
 dialog.setSize(500, 400);
 dialog.setLocationRelativeTo(this);
 dialog.setResizable(false);
 dialog.setVisible(true);
 }

 / **
 * Shows dialog for editing an existing resource request.
 * PAT 3.5: Database UPDATE operation
 * PAT 3.6: Input validation and error handling
 * PAT 3.7: Core functionality - editing requests
 * /
 private void showEditRequestDialog() {
 int selectedRow = resourceTable.getSelectedRow();
 if(selectedRow == -1) {
 JOptionPane.showMessageDialog(this,  "Please select a request to edit.",  "No Selection",  JOptionPane.WARNING_MESSAGE);
 return;
 }
        
 // Get current values from table
 String requestId = (String) tableModel.getValueAt(selectedRow, 0);
 String currentCategory = (String) tableModel.getValueAt(selectedRow, 1);
 String currentDescription = (String) tableModel.getValueAt(selectedRow, 2);
 int currentNeeded = (Integer) tableModel.getValueAt(selectedRow, 3);
 int currentFulfilled = (Integer) tableModel.getValueAt(selectedRow, 4);
 String currentUrgency = (String) tableModel.getValueAt(selectedRow, 5);
 String currentStatus = (String) tableModel.getValueAt(selectedRow, 6);
        
 // Create edit dialog
 JDialog dialog = new JDialog( (Frame) SwingUtilities.getWindowAncestor(this),  "Edit Resource Request", true);
 dialog.setLayout(new BorderLayout();
        
 // Form panel
 JPanel formPanel = new JPanel(new GridBagLayout();
 formPanel.setBorder(new EmptyBorder(20, 20, 20, 20) );
 formPanel.setBackground(DARKBGSTART);
        
 GridBagConstraints gbc = new GridBagConstraints();
 gbc.fill = GridBagConstraints.HORIZONTAL;
 gbc.insets = new Insets(5, 5, 5, 5);
        
 // Request ID(read-only)
 JLabel lblId = new JLabel("Request ID:");
 styleFormLabel(lblId);
 JTextField txtId = new JTextField(requestId);
 txtId.setEditable(false);
 styleTextField(txtId);
        
 // Category
 JLabel lblCategory = new JLabel("Category:");
 styleFormLabel(lblCategory);
 JComboBox<String> cmbCategory = new JComboBox<>(;
 new String[ ]{"Food", "Clothing", "Education", "Medical", "Funding", "Other"});
 cmbCategory.setSelectedItem(currentCategory);
 styleComboBox(cmbCategory);
        
 // Description
 JLabel lblDescription = new JLabel("Description:");
 styleFormLabel(lblDescription);
 JTextArea txtDescription = new JTextArea(currentDescription, 3, 20);
 txtDescription.setLineWrap(true);
 txtDescription.setWrapStyleWord(true);
 styleTextArea(txtDescription);
 JScrollPane descScroll = new JScrollPane(txtDescription);
 styleScrollPane(descScroll);
        
 // Quantity Needed
 JLabel lblNeeded = new JLabel("Quantity Needed:");
 styleFormLabel(lblNeeded);
 SpinnerNumberModel neededModel = new SpinnerNumberModel(;
 currentNeeded, 1, 9999, 1);
 JSpinner spnNeeded = new JSpinner(neededModel);
 styleSpinner(spnNeeded);
        
 // Quantity Fulfilled
 JLabel lblFulfilled = new JLabel("Quantity Fulfilled:");
 styleFormLabel(lblFulfilled);
 SpinnerNumberModel fulfilledModel = new SpinnerNumberModel(;
 currentFulfilled, 0, currentNeeded, 1);
 JSpinner spnFulfilled = new JSpinner(fulfilledModel);
 styleSpinner(spnFulfilled);
        
 // Update fulfilled max when needed changes
 spnNeeded.addChangeListener(e -> ) {
 int newMax = (Integer) spnNeeded.getValue();
 fulfilledModel.setMaximum(newMax);
 if( (Integer) spnFulfilled.getValue() > newMax) {
 spnFulfilled.setValue(newMax);
 }
 });
        
 // Urgency
 JLabel lblUrgency = new JLabel("Urgency:");
 styleFormLabel(lblUrgency);
 JComboBox<String> cmbUrgency = new JComboBox<>(;
 new String[ ]{"Low", "Medium", "High", "Urgent"});
 cmbUrgency.setSelectedItem(currentUrgency);
 styleComboBox(cmbUrgency);
        
 // Status
 JLabel lblStatus = new JLabel("Status:");
 styleFormLabel(lblStatus);
 JComboBox<String> cmbStatus = new JComboBox<>(;
 new String[ ]{"Open", "Fulfilled", "Cancelled"});
 cmbStatus.setSelectedItem(currentStatus);
 styleComboBox(cmbStatus);
        
 // Add components to form
 int row = 0;
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblId, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(txtId, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblCategory, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(cmbCategory, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblDescription, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 gbc.fill = GridBagConstraints.BOTH;
 formPanel.add(descScroll, gbc);
 gbc.fill = GridBagConstraints.HORIZONTAL;
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblNeeded, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(spnNeeded, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblFulfilled, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(spnFulfilled, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblUrgency, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(cmbUrgency, gbc);
        
 gbc.gridx = 0; gbc.gridy = row; gbc.weightx = 0;
 formPanel.add(lblStatus, gbc);
 gbc.gridx = 1; gbc.gridy = row++; gbc.weightx = 1.0;
 formPanel.add(cmbStatus, gbc);
        
 dialog.add(formPanel, BorderLayout.CENTER);
        
 // Button panel
 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT) );
 buttonPanel.setBackground(DARKBGSTART);
        
 JButton btnSave = new JButton("Save Changes");
 JButton btnCancel = new JButton("Cancel");
 styleActionButton(btnSave, "Save changes to the request" );
 styleActionButton(btnCancel, "Cancel without saving" );
        
 btnSave.addActionListener(e -> ) {
 // Validate input
 String description = txtDescription.getText().trim();
 if(description.isEmpty() ) {
 JOptionPane.showMessageDialog(dialog,  "Description cannot be empty.",  "Validation Error",  JOptionPane.ERROR_MESSAGE);
 return;
 }
            
 // Auto-update status based on fulfillment
 int needed = (Integer) spnNeeded.getValue();
 int fulfilled = (Integer) spnFulfilled.getValue();
 String status = (String) cmbStatus.getSelectedItem();
            
 if(fulfilled >= needed && !"Cancelled".equals(status) ) {
 status = "Fulfilled";
 cmbStatus.setSelectedItem(status);
 }
            
 try {
 // Create updated request object
 ResourceRequest updatedRequest = new ResourceRequest();
 updatedRequest.setRequestID(requestId);
 updatedRequest.setItemCategory( (String) cmbCategory.getSelectedItem();
 updatedRequest.setItemDescription(description);
 updatedRequest.setQuantityNeeded(needed);
 updatedRequest.setQuantityFulfilled(fulfilled);
 updatedRequest.setUrgency( (String) cmbUrgency.getSelectedItem();
 updatedRequest.setStatus(status);
                
 // Update in database
 if(orphanageService.updateRequest(updatedRequest) ) {
 Logger.info( "Request updated: " + requestId);
                    
 // Refresh table and statistics
 loadResourceRequests();
 updateStatistics();
                    
 JOptionPane.showMessageDialog(dialog,  "Request updated successfully! ",  "Success",  JOptionPane.INFORMATIONMESSAGE);
                    
 dialog.dispose();
 } else {
 throw new ServiceException("Update operation returned false");
 }
                
 } catch(ServiceException ex) {
 Logger.error( "Failed to update request: " + ex.getMessage();
 JOptionPane.showMessageDialog(dialog,  "Error updating request:\n" + ex.getMessage(),  "Database Error",  JOptionPane.ERROR_MESSAGE);
 }
 });
        
 btnCancel.addActionListener(e -> dialog.dispose();
        
 buttonPanel.add(btnSave);
 buttonPanel.add(btnCancel);
 dialog.add(buttonPanel, BorderLayout.SOUTH);
        
 dialog.setSize(500, 500);
 dialog.setLocationRelativeTo(this);
 dialog.setResizable(false);
 dialog.setVisible(true);
 }

 / **
 * Deletes the selected resource request after confirmation.
 * PAT 3.5: Database DELETE operation
 * PAT 3.6: Defensive programming with confirmation dialog
 * PAT 3.7: Core functionality - deleting requests
 * /
 private void deleteSelectedRequest() {
 int selectedRow = resourceTable.getSelectedRow();
 if(selectedRow == -1) {
 JOptionPane.showMessageDialog(this,  "Please select a request to delete.",  "No Selection",  JOptionPane.WARNING_MESSAGE);
 return;
 }
        
 String requestId = (String) tableModel.getValueAt(selectedRow, 0);
 String description = (String) tableModel.getValueAt(selectedRow, 2);
        
 // Confirmation dialog with request details
 int confirm = JOptionPane.showConfirmDialog(this,;
 "Are you sure you want to delete this request? \n\n" +
 "Request ID: " + requestId + " \n" +
 "Description: " + description + " \n\n" +
 "This action cannot be undone.",
 "Confirm Deletion",
 JOptionPane.YESNOOPTION,
 JOptionPane.WARNING_MESSAGE);
        
 if(confirm == JOptionPane.YESOPTION) {
 try {
 // Delete from database
 if(orphanageService.deleteRequest(requestId) ) {
 Logger.info( "Request deleted: " + requestId);
                    
 // Refresh table and statistics
 loadResourceRequests();
 updateStatistics();
                    
 JOptionPane.showMessageDialog(this,  "Request deleted successfully.",  "Success",  JOptionPane.INFORMATIONMESSAGE);
 } else {
 throw new ServiceException("Delete operation returned false");
 }
                
 } catch(ServiceException e) {
 Logger.error( "Failed to delete request: " + e.getMessage();
 JOptionPane.showMessageDialog(this,
 "Error deleting request:\n" + e.getMessage(),;
 "Database Error",
 JOptionPane.ERROR_MESSAGE);
 }
 }
 }

 // ========== STYLING METHODS ==========     
 private void styleTable(JTable table) {
 table.setBackground(TABLECELLBG);
 table.setForeground(TABLECELLFG);
 table.setGridColor(TABLEGRIDCOLOR);
 table.setRowHeight(28);
 table.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 table.setFillsViewportHeight(true);
 table.setSelectionBackground(TABLECELLSELECTED_BG);
 table.setSelectionForeground(TABLECELLSELECTED_FG);
 table.setShowGrid(true);
 table.setIntercellSpacing(new Dimension(0, 1) );
        
 JTableHeader header = table.getTableHeader();
 header.setBackground(TABLEHEADER_BG);
 header.setForeground(TABLEHEADER_FG);
 header.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 header.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 header.setReorderingAllowed(true);
 header.setResizingAllowed(true);
        
 // Column alignment and sizing
 DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
 centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
 table.getColumnModel().getColumn(0).setPreferredWidth(80); // ID;
 table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
 table.getColumnModel().getColumn(1).setPreferredWidth(100); // Category;
 table.getColumnModel().getColumn(2).setPreferredWidth(250); // Description;
 table.getColumnModel().getColumn(3).setPreferredWidth(80); // Needed;
 table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
 table.getColumnModel().getColumn(4).setPreferredWidth(80); // Fulfilled;
 table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
 table.getColumnModel().getColumn(5).setPreferredWidth(100); // Urgency;
 table.getColumnModel().getColumn(6).setPreferredWidth(100); // Status;
 }

 private void styleScrollPane(JScrollPane scrollPane) {
 scrollPane.setOpaque(false);
 scrollPane.getViewport().setOpaque(false);
 scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 applyScrollbarUI(scrollPane.getVerticalScrollBar();
 applyScrollbarUI(scrollPane.getHorizontalScrollBar();
 }

 private void applyScrollbarUI(JScrollBar scrollBar) {
 scrollBar.setUI(new BasicScrollBarUI() {
 @Override protected void configureScrollBarColors() {
 this.thumbColor = BUTTONBG_DARK;
 this.trackColor = DARKBGEND;
 }
 @Override protected JButton createDecreaseButton(int orientation) {  return createZeroButton();  }
 @Override protected JButton createIncreaseButton(int orientation) {  return createZeroButton();  }
 private JButton createZeroButton() {
 JButton button = new JButton();
 button.setPreferredSize(new Dimension(0, 0) );
 return button;
 }
 @Override protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
 g.setColor(thumbColor);
 g.fillRect(thumbBounds.x, thumbBounds.y, thumbBounds.width, thumbBounds.height);
 }
 @Override protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
 g.setColor(trackColor);
 g.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
 }
 });
 scrollBar.setUnitIncrement(16);
 }

 private void styleActionButton(JButton btn, String tooltip) {
 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 12) );
 btn.setToolTipText(tooltip);
 btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 btn.setForeground(BUTTONFG_DARK);
 btn.setFocusPainted(false);
 btn.setBackground(BUTTONBG_DARK);
        
 Border padding = new EmptyBorder(6, 12, 6, 12);
 btn.setBorder(new CompoundBorder(
 BorderFactory.createLineBorder(BUTTONBG_DARK.darker(),;
 padding) );
        
 btn.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {
 if(btn.getBackground().equals(BUTTONBG_DARK) ) {
 btn.setBackground(BUTTONHOVER_BG_DARK);
 }
 }
 @Override public void mouseExited(MouseEvent e) {
 if(btn.getBackground().equals(BUTTONHOVER_BG_DARK) ) {
 btn.setBackground(BUTTONBG_DARK);
 }
 }
 });
 }

 private void styleFormLabel(JLabel label) {
 label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 label.setForeground(TEXTCOLOR_DARK);
 }

 private void styleTextField(JTextField field) {
 field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 field.setForeground(INPUTFG_DARK);
 field.setBackground(INPUTBG_DARK);
 Border padding = new EmptyBorder(5, 8, 5, 8);
 field.setBorder(new CompoundBorder(
 BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),;
 padding) );
 field.setCaretColor(Color.LIGHTGRAY);
 }

 private void styleTextArea(JTextArea area) {
 area.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 area.setForeground(INPUTFG_DARK);
 area.setBackground(INPUTBG_DARK);
 area.setBorder(new EmptyBorder(5, 8, 5, 8) );
 area.setCaretColor(Color.LIGHTGRAY);
 }

 private void styleComboBox(JComboBox<?> comboBox) {
 comboBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 comboBox.setForeground(INPUTFG_DARK);
 comboBox.setBackground(INPUTBG_DARK);
 comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1) );
 }

 private void styleSpinner(JSpinner spinner) {
 spinner.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 JComponent editor = spinner.getEditor();
 if(editor instanceof JSpinner.DefaultEditor) {
 }
 }
))))))))))))))))))))))))))))))))))))))))))))))))))))))
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: OrphanageHubApp.java
║ Lines: 336
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import com.orphanagehub.model.User;
import java.util.Timer;
import java.util.TimerTask;

/ **
 * Main application frame that manages navigation between different panels.
 *  * PAT Rubric Coverage:
 * - 3.2: Separation of UI components from business logic
 * - 3.3: Inter-code communication through typed methods
 * - 3.8: User experience through smooth navigation
 * /
public class OrphanageHubApp extends JFrame() {
    private static final Logger logger = LoggerFactory.getLogger(OrphanageHubApp.class);


 private CardLayout cardLayout;
 private JPanel mainPanel;
    
 // PAT 3.2: Store current user session data
 private User currentUser;
 private long loginTime;
 private Timer sessionTimer;
 private static final long SESSIONTIMEOUT = 30 * 60 * 1000; // 30 minutes;
 private static final long SESSIONCHECKINTERVAL = 60 * 1000; // Check every minute;

 // Panel Instances(keep references)
 private HomePanel homePanel;
 private LoginPanel loginPanel;
 private RegistrationPanel registrationPanel;
 private OrphanageDashboardPanel orphanageDashboardPanel;
 private DonorDashboardPanel donorDashboardPanel;
 private VolunteerDashboardPanel volunteerDashboardPanel;
 private AdminDashboardPanel adminDashboardPanel;

 // Panel names for CardLayout
 public static final String HOMEPANEL = "Home";
 public static final String LOGINPANEL = "Login";
 public static final String REGISTRATIONPANEL = "Registration";
 public static final String ORPHANAGEDASHBOARDPANEL = "OrphanageDashboard";
 public static final String DONOR_DASHBOARDPANEL = "DonorDashboard";
 public static final String VOLUNTEER_DASHBOARDPANEL = "VolunteerDashboard";
 public static final String ADMINDASHBOARDPANEL = "AdminDashboard";

 / **
 * Constructor initializes the main application window.
 * Sets up the Look and Feel and initializes all components.
 * /
 public OrphanageHubApp() {
 super("OrphanageHub - Connecting Hearts, Changing Lives");
 setDefaultCloseOperation(JFrame.EXITONCLOSE);
        
 // Log application start
 Logger.info("OrphanageHub application started");

 // Set Nimbus Look and Feel for professional appearance
 try() {
 for(UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels() ) {
 if("Nimbus".equals(info.getName() ) ) {
 UIManager.setLookAndFeel(info.getClassName();
 Logger.info("Nimbus Look and Feel applied successfully");
 break;
 }
 }
 } catch(Exception e) {
 Logger.error( "Failed to set Nimbus Look and Feel: " + e.getMessage();
 System.err.println("WARNING: Cannot set Nimbus Look and Feel. UI may appear different.");
 }

 initComponents();
 initSessionManager();

 setPreferredSize(new Dimension(900, 700) );
 pack();
 setMinimumSize(new Dimension(750, 550) );
 setLocationRelativeTo(null);
 setResizable(true);
        
 // Add window closing handler for cleanup
 addWindowListener(new java.awt.event.WindowAdapter() {
 @Override
 public void windowClosing(java.awt.event.WindowEvent windowEvent) {
 cleanup();
 Logger.info("Application closed");
 }
 });
 }

 / **
 * Initializes all GUI components and sets up the card layout.
 * PAT 3.4: Good programming technique - modular initialization
 * /
 private void initComponents() {
 cardLayout = new CardLayout();
 mainPanel = new JPanel(cardLayout);

 // Instantiate CORE panels immediately
 homePanel = new HomePanel(this);
 loginPanel = new LoginPanel(this);
 registrationPanel = new RegistrationPanel(this);

 // Add core panels to the CardLayout container
 mainPanel.add(homePanel, HOMEPANEL);
 mainPanel.add(loginPanel, LOGINPANEL);
 mainPanel.add(registrationPanel, REGISTRATIONPANEL);

 setContentPane(mainPanel);
        
 Logger.debug("Core panels initialized");
 }

 / **
 * Initializes the session management system.
 * PAT 3.6: Defensive programming - session timeout for security
 * /
 private void initSessionManager() {
 sessionTimer = new Timer(true); // Daemon thread;
 sessionTimer.scheduleAtFixedRate(new TimerTask() {
 @Override
 public void run() {
 checkSession();
 }
 }, SESSIONCHECKINTERVAL, SESSIONCHECKINTERVAL);
 }

 / **
 * Checks if the current session has expired.
 * Automatically logs out user if session timeout is reached.
 * PAT 3.6: Defensive programming - automatic session expiry
 * /
 private void checkSession() {
 if(currentUser != null && System.currentTimeMillis() - loginTime > SESSIONTIMEOUT) {
 SwingUtilities.invokeLater( () -> {
 JOptionPane.showMessageDialog(this,  "Your session has expired for security reasons.\nPlease log in again.",  "Session Expired",  JOptionPane.WARNING_MESSAGE);
 Logger.info( "Session expired for user: " + currentUser.getUsername();
 logout();
 });
 }
 }

 / **
 * Navigates directly to a panel already added to the CardLayout.
 * PAT 3.3: Inter-code communication through parameters
 * @param panelName The name constant of the panel to show
 * /
 public void navigateTo(String panelName) {
 Logger.debug( "Navigating to: " + panelName);
 cardLayout.show(mainPanel, panelName);
 }

 / **
 * Creates(if necessary) and navigates to a dashboard panel.
 * Handles lazy instantiation of dashboard panels for memory efficiency.
 * PAT 3.2: Separation of concerns - UI creation separated from navigation
 * @param panelName The name constant of the dashboard panel to show
 * /
 public void showDashboard(String panelName) {
 Logger.info( "Showing dashboard: " + panelName + " for user: " +  (currentUser != null ? currentUser.getUsername() : "unknown" );
        
 boolean panelAdded = false;

 try {
 switch(panelName) {
 case ORPHANAGEDASHBOARDPANEL:
 if(orphanageDashboardPanel == null) {
 orphanageDashboardPanel = new OrphanageDashboardPanel(this);
 mainPanel.add(orphanageDashboardPanel, ORPHANAGEDASHBOARDPANEL);
 panelAdded = true;
 }
 if(currentUser != null) {
 orphanageDashboardPanel.setStaffUser(currentUser);
 }
 break;
                    
 case DONOR_DASHBOARDPANEL:
 if(donorDashboardPanel == null) {
 donorDashboardPanel = new DonorDashboardPanel(this);
 mainPanel.add(donorDashboardPanel, DONOR_DASHBOARDPANEL);
 panelAdded = true;
 }
 if(currentUser != null) {
 donorDashboardPanel.setDonorUser(currentUser);
 }
 break;
                    
 case VOLUNTEER_DASHBOARDPANEL:
 if(volunteerDashboardPanel == null) {
 volunteerDashboardPanel = new VolunteerDashboardPanel(this);
 mainPanel.add(volunteerDashboardPanel, VOLUNTEER_DASHBOARDPANEL);
 panelAdded = true;
 }
 if(currentUser != null) {
 volunteerDashboardPanel.setVolunteerUser(currentUser);
 }
 break;
                    
 case ADMINDASHBOARDPANEL:
 if(adminDashboardPanel == null) {
 adminDashboardPanel = new AdminDashboardPanel(this);
 mainPanel.add(adminDashboardPanel, ADMINDASHBOARDPANEL);
 panelAdded = true;
 }
 if(currentUser != null) {
 adminDashboardPanel.setAdminUser(currentUser);
 }
 break;
                    
 default:
 Logger.error( "Attempted to show unknown dashboard: " + panelName);
 JOptionPane.showMessageDialog(this,  "Unable to load the requested dashboard.",  "Navigation Error",  JOptionPane.ERROR_MESSAGE);
 navigateTo(HOMEPANEL);
 return;
 }

 if(panelAdded) {
 mainPanel.revalidate();
 mainPanel.repaint();
 Logger.debug(panelName + " panel created and added" );
 }

 navigateTo(panelName);
            
 } catch(Exception e) {
 Logger.error( "Error showing dashboard: " + e.getMessage();
 JOptionPane.showMessageDialog(this,  "An error occurred while loading the dashboard.\n" + e.getMessage(),  "Error",  JOptionPane.ERROR_MESSAGE);
 }
 }

 / **
 * Sets the current user after successful authentication.
 * PAT 3.3: Typed method with parameter
 * @param user The authenticated user object
 * /
 public void setCurrentUser(User user) {
 this.currentUser = user;
 this.loginTime = System.currentTimeMillis();
 Logger.info( "User logged in: " + user.getUsername() + " with role: " + user.getUserRole();
 }

 / **
 * Gets the currently logged-in user.
 * PAT 3.3: Typed method with return value
 * @return The current user or null if not logged in
 * /
 public User getCurrentUser() {
 return this.currentUser;
 }

 / **
 * Gets the selected role from the home panel.
 * PAT 3.3: Inter-panel communication
 * @return The selected role string
 * /
 public String getSelectedRole() {
 return(homePanel != null) ? homePanel.getSelectedRole() : "Unknown";
 }

 / **
 * Performs logout and cleanup operations.
 * PAT 3.6: Defensive programming - proper cleanup
 * /
 public void logout() {
 if(currentUser != null) {
 Logger.info( "User logged out: " + currentUser.getUsername();
 }
        
 // Clear user session
 this.currentUser = null;
 this.loginTime = 0;
        
 // Clear cached dashboard panels to free memory and reset state
 orphanageDashboardPanel = null;
 donorDashboardPanel = null;
 volunteerDashboardPanel = null;
 adminDashboardPanel = null;
        
 // Navigate to home
 navigateTo(HOMEPANEL);
        
 // Force garbage collection
 System.gc();
 }

 / **
 * Cleanup method called when application closes.
 * PAT 3.6: Defensive programming - resource cleanup
 * /
 private void cleanup() {
 if(sessionTimer != null) {
 sessionTimer.cancel();
 }
 if(currentUser != null) {
 Logger.info( "Application closed while user " + currentUser.getUsername() + " was logged in" );
 }
 }

 / **
 * Main entry point of the application.
 * @param args Command line arguments(not used)
 * /
 public static void main(String[ ] args) {
 // PAT 3.6: Defensive programming - set a default uncaught exception handler
 // This ensures that if any unexpected error occurs on the Swing Event Dispatch Thread,
 // it is logged and the user is notified, preventing the app from silently crashing.
 Thread.setDefaultUncaughtExceptionHandler( (thread, exception) -> {
 Logger.error( "An uncaught exception occurred in thread " + thread.getName(), exception);
 JOptionPane.showMessageDialog(null,
 "A critical error occurred. Please check the logs and restart the application.\n" +
 "Error: " + exception.getMessage(),;
 "Critical Error",
 JOptionPane.ERROR_MESSAGE);
 });

 // Run the application on the Event Dispatch Thread(EDT) for thread safety
 SwingUtilities.invokeLater( () -> {
 try {
 OrphanageHubApp app = new OrphanageHubApp();
 app.setVisible(true);
 } catch(Exception e) {
 Logger.error( "Failed to start application", e);
 JOptionPane.showMessageDialog(null,
 "Could not start the OrphanageHub application. Please see logs for details.",
 "Startup Failure",
 JOptionPane.ERROR_MESSAGE);
 System.exit(1); // Exit if startup fails;
 }
 });
 }
)))))))
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: RegistrationPanel.java
║ Lines: 668
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



import com.orphanagehub.model.Orphanage;

import com.orphanagehub.model.User;

import com.orphanagehub.service.RegistrationService;

import com.orphanagehub.service.ServiceException;

import javax.swing.*;

import javax.swing.border.Border;

import javax.swing.border.CompoundBorder;

import javax.swing.border.EmptyBorder;

import javax.swing.border.LineBorder;

import java.awt.*;

import java.awt.event.MouseAdapter;

import java.awt.event.MouseEvent;

import java.util.List;



/ **

 * UI panel for user registration.

 * This class is responsible for gathering user input and passing it to the

 * RegistrationService for validation and persistence.

 *

 * PAT Rubric Coverage:

 * - 3.2: Strict separation of UI from logic.

 * - 3.3: Communicates with the service layer via the performRegistration() method.

 * - 3.6: Displays user-friendly error messages from ServiceException.

 * - 3.8: Provides a clear, role-aware registration form.

 * /

public class RegistrationPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(RegistrationPanel.class);




 private final OrphanageHubApp mainApp;

 private String currentRole = "User";



 // Backend service reference

 private final RegistrationService registrationService;



 // Input fields

 private final JTextField txtUsername;

 private final JTextField txtEmail;

 private final JTextField txtFullName;

 private final JPasswordField txtPassword;

 private final JPasswordField txtConfirmPassword;

 private final JComboBox<String> cmbOrphanage;

 private final JCheckBox chkTerms;



 // UI elements that update by role

 private final JLabel lblTitle;

 private final JLabel lblRoleIcon;

 private final JPanel orphanagePanel;



 // Colors

 private static final Color DARKBGSTART = new Color(45, 52, 54);

 private static final Color DARKBGEND = new Color(35, 42, 44);

 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);

 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);

 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);

 private static final Color INPUTBG_DARK = new Color(60, 60, 60);

 private static final Color INPUTFG_DARK = new Color(220, 220, 220);

 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);

 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);

 private static final Color BUTTONFG_DARK = Color.WHITE;

 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

 private static final Color BUTTONREGISTER_BG = new Color(60, 179, 113);

 private static final Color BUTTONREGISTER_HOVER_BG = new Color(70, 190, 123);

 private static final Color CHECKBOXCOLOR = new Color(180, 180, 180);



 public RegistrationPanel(OrphanageHubApp app) {

 this.mainApp = app;

 this.registrationService = new RegistrationService();

 setLayout(new BorderLayout();



 // Initialize components

 txtUsername = new JTextField(25);

 txtEmail = new JTextField(25);

 txtFullName = new JTextField(25);

 txtPassword = new JPasswordField(25);

 txtConfirmPassword = new JPasswordField(25);

 cmbOrphanage = new JComboBox<>();

 chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");

 lblTitle = new JLabel( "Register as " + currentRole);

 lblRoleIcon = new JLabel(" ?");

 orphanagePanel = new JPanel(new BorderLayout(5, 0) );



 initComponents();

 }



 @Override

 protected void paintComponent(Graphics g) {

 super.paintComponent(g);

 var g2d = (Graphics2D) g;

 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);

 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);

 g2d.setPaint(gp);

 g2d.fillRect(0, 0, getWidth(), getHeight();

 }



 private void initComponents() {

 JPanel formPanel = new JPanel(new GridBagLayout();

 formPanel.setOpaque(false);

 formPanel.setBorder(new EmptyBorder(20, 30, 20, 30) );

 GridBagConstraints gbc = new GridBagConstraints();

 gbc.fill = GridBagConstraints.HORIZONTAL;

 gbc.insets = new Insets(5, 5, 5, 5);



 // Title & Role Icon

 JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0) );

 titlePanel.setOpaque(false);

 lblRoleIcon.setFont(new Font(Font.SANSSERIF, Font.BOLD, 24) );

 lblRoleIcon.setForeground(TITLECOLOR_DARK);

 lblTitle.setFont(new Font(Font.SANSSERIF, Font.BOLD, 28) );

 lblTitle.setForeground(TITLECOLOR_DARK);

 titlePanel.add(lblRoleIcon);

 titlePanel.add(lblTitle);

 gbc.gridx = 0;

 gbc.gridy = 0;

 gbc.gridwidth = 2;

 gbc.insets = new Insets(0, 5, 20, 5);

 formPanel.add(titlePanel, gbc);



 // Input Fields

 gbc.gridwidth = 1;

 gbc.anchor = GridBagConstraints.EAST;

 gbc.fill = GridBagConstraints.NONE;

 gbc.weightx = 0;

 gbc.insets = new Insets(6, 5, 6, 5);



 int gridY = 1;

 addFormField(formPanel, gbc, gridY++, "Username:", txtUsername);

 addFormField(formPanel, gbc, gridY++, "Email:", txtEmail);

 addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName);

 addFormField(formPanel, gbc, gridY++, "Password:", txtPassword);

 addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword);



 // Orphanage Selection(for staff)

 orphanagePanel.setOpaque(false);

 JLabel lblOrphanage = new JLabel("Orphanage:");

 styleFormLabel(lblOrphanage);

 styleComboBox(cmbOrphanage);

 orphanagePanel.add(lblOrphanage, BorderLayout.WEST);

 orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);

 gbc.gridx = 0;

 gbc.gridy = gridY++;

 gbc.gridwidth = 2;

 gbc.fill = GridBagConstraints.HORIZONTAL;

 formPanel.add(orphanagePanel, gbc);

 orphanagePanel.setVisible(false);



 // Terms Checkbox

 styleCheckbox(chkTerms);

 gbc.gridx = 0;

 gbc.gridy = gridY++;

 gbc.gridwidth = 2;

 gbc.anchor = GridBagConstraints.CENTER;

 formPanel.add(chkTerms, gbc);



 // Buttons

 JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5) );

 buttonPanel.setOpaque(false);



 JButton btnRegister = new JButton("Register");

 styleActionButton(btnRegister, "Create your account" );

 btnRegister.setBackground(BUTTONREGISTER_BG);

 btnRegister.addMouseListener(new MouseAdapter() {

 @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTONREGISTER_HOVER_BG); }

 @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTONREGISTER_BG); }

 });

 btnRegister.addActionListener(e -> performRegistration();



 JButton btnBack = new JButton("Back");

 styleActionButton(btnBack, "Return to the welcome screen" );

 btnBack.setBackground(BUTTONBG_DARK.darker();

 btnBack.addMouseListener(new MouseAdapter() {

 @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTONHOVER_BG_DARK); }

 @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTONBG_DARK.darker(); }

 });

 btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOMEPANEL) );



 buttonPanel.add(btnRegister);

 buttonPanel.add(btnBack);



 gbc.gridx = 0;

 gbc.gridy = gridY++;

 gbc.gridwidth = 2;

 gbc.anchor = GridBagConstraints.CENTER;

 formPanel.add(buttonPanel, gbc);



 // Scroll

 JScrollPane scrollPane = new JScrollPane(formPanel);

 scrollPane.setOpaque(false);

 scrollPane.getViewport().setOpaque(false);

 scrollPane.setBorder(null);

 scrollPane.getVerticalScrollBar().setUnitIncrement(16);



 add(scrollPane, BorderLayout.CENTER);

 }



 private void performRegistration() {

 if( !chkTerms.isSelected() ) {

 JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);

 return;

 }



 String username = txtUsername.getText().trim();

 String email = txtEmail.getText().trim();

 String fullName = txtFullName.getText().trim();

 String password = new String(txtPassword.getPassword();

 String confirmPassword = new String(txtConfirmPassword.getPassword();

 String selectedOrphanage = orphanagePanel.isVisible() ? (String) cmbOrphanage.getSelectedItem() : null;



 try {

 Logger.info( "Attempting registration for user: " + username);

 User newUser = registrationService.registerUser(username, email, fullName, password, confirmPassword, currentRole, selectedOrphanage);



 Logger.info( "Registration successful for user: " + newUser.getUsername();

 JOptionPane.showMessageDialog(this,

 "Registration successful for " + newUser.getUsername() + " ! \nYou can now log in.",;

 "Success", JOptionPane.INFORMATIONMESSAGE);



 mainApp.navigateTo(OrphanageHubApp.LOGINPANEL);



 } catch(ServiceException ex) {

 Logger.warn( "Registration failed for user " + username + ": " + ex.getMessage();

 JOptionPane.showMessageDialog(this, ex.getMessage(), "Registration Failed", JOptionPane.ERROR_MESSAGE);

 }

 }



 @Override

 public void addNotify() {

 super.addNotify();

 currentRole = mainApp.getSelectedRole();

 lblTitle.setText( "Register as " + currentRole);

 updateRoleSpecificUI();

 }



 private void updateRoleSpecificUI() {

 switch(currentRole) {

 case "Donor" -> {

 lblRoleIcon.setText(" \u2764");

 lblRoleIcon.setForeground(new Color(255, 105, 180) );

 }

 case "OrphanageStaff" -> {

 lblRoleIcon.setText(" \u2302");

 lblRoleIcon.setForeground(new Color(135, 206, 250) );

 }

 case "Volunteer" -> {

 lblRoleIcon.setText(" \u2605");

 lblRoleIcon.setForeground(new Color(255, 215, 0) );

 }

 default -> {

 lblRoleIcon.setText(" ?");

 lblRoleIcon.setForeground(TITLECOLOR_DARK);

 }

 }



 boolean isStaff = "OrphanageStaff".equals(currentRole);

 orphanagePanel.setVisible(isStaff);

 if(isStaff) {

 loadAvailableOrphanages();

 }

 revalidate();

 repaint();

 }



 private void loadAvailableOrphanages() {

 try {

 List<Orphanage> orphanages = registrationService.getUnassignedOrphanages();

 cmbOrphanage.removeAllItems();

 cmbOrphanage.addItem("Select Orphanage...");

 for(Orphanage o : orphanages) {

 cmbOrphanage.addItem(o.getName();

 }

 } catch(ServiceException e) {

 Logger.error( "Could not load orphanages for registration form", e);

 JOptionPane.showMessageDialog(this, "Could not load orphanages: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);

 }

 }



 // Styling

 private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {

 JLabel label = new JLabel(labelText);

 styleFormLabel(label);

 gbc.gridx = 0; gbc.gridy = gridY;

 gbc.fill = GridBagConstraints.NONE; // This ensures the label does not stretch, allowing the anchor to align it.;

 panel.add(label, gbc);

 styleTextField(field);

 gbc.gridx = 1;


 panel.add(field, gbc);

 }



 private void styleFormLabel(JLabel label) {

 label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );

 label.setForeground(TEXTCOLOR_DARK);

 }



 private void styleTextField(JComponent field) {

 field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );

 field.setForeground(INPUTFG_DARK);

 field.setBackground(INPUTBG_DARK);

 Border padding = new EmptyBorder(5, 8, 5, 8);

 field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding) );



 } else if(field instanceof JPasswordField passwordField) {

 passwordField.setCaretColor(Color.LIGHTGRAY);

 }

 }



 private void styleComboBox(JComboBox<?> comboBox) {

 comboBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );

 comboBox.setForeground(INPUTFG_DARK);

 comboBox.setBackground(INPUTBG_DARK);

 comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1) );

 }



 private void styleCheckbox(JCheckBox checkBox) {

 checkBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 12) );

 checkBox.setForeground(CHECKBOXCOLOR);

 checkBox.setOpaque(false);

 }



 private void styleActionButton(JButton btn, String tooltip) {

 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );

 btn.setPreferredSize(new Dimension(130, 40) );

 btn.setToolTipText(tooltip);

 btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );

 btn.setForeground(BUTTONFG_DARK);

 btn.setFocusPainted(false);

 btn.setBackground(BUTTONBG_DARK);

 Border line = BorderFactory.createLineBorder(BUTTONBG_DARK.darker();

 Border padding = new EmptyBorder(5, 15, 5, 15);

 btn.setBorder(new CompoundBorder(line, padding) );

 }

))))))))))))
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.gui
║ File: VolunteerDashboardPanel.java
║ Lines: 473
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.gui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.orphanagehub.model.User;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class VolunteerDashboardPanel extends JPanel() {
    private static final Logger logger = LoggerFactory.getLogger(VolunteerDashboardPanel.class);


 private OrphanageHubApp mainApp;
 private User currentUser; // To store the logged-in user's data
 private JLabel userLabel; // To update the user's name on the display

 // - - - Colors(Same as AdminDashboardPanel) - - -
 private static final Color DARKBGSTART = new Color(45, 52, 54);
 private static final Color DARKBGEND = new Color(35, 42, 44);
 private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
 private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
 private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
 private static final Color INPUTBG_DARK = new Color(60, 60, 60);
 private static final Color INPUTFG_DARK = new Color(220, 220, 220);
 private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
 private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
 private static final Color BUTTONFG_DARK = Color.WHITE;
 private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
 private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
 private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
 private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
 private static final Color TABLECELLBG = new Color(55, 62, 64);
 private static final Color TABLECELLFG = TEXTCOLOR_DARK;
 private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
 private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
 private static final Color BUTTONAPPLY_BG = new Color(87, 190, 106);
 private static final Color BUTTONAPPLY_HOVER_BG = new Color(97, 200, 116);

 public VolunteerDashboardPanel(OrphanageHubApp app) {
 this.mainApp = app;
 setLayout(new BorderLayout(0, 0) );
 initComponents();
 }

 / **
 * Sets the currently logged-in volunteer user for this panel.
 * This method updates the UI with the user's information.
 * @param user The logged-in volunteer.
 * /
 public void setVolunteerUser(User user) {
 this.currentUser = user;
 if(user != null) {
 this.userLabel.setText( "User: " + user.getUsername();
 }
 }

 @Override
 protected void paintComponent(Graphics g) {
 super.paintComponent(g);
 Graphics2D g2d = (Graphics2D) g;
 g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUERENDER_QUALITY);
 GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
 g2d.setPaint(gp);
 g2d.fillRect(0, 0, getWidth(), getHeight();
 }

 private void initComponents() {
 // - - - Header Panel-- -
 JPanel headerPanel = createHeaderPanel();
 add(headerPanel, BorderLayout.NORTH);

 // - - - Main Content Area(Search + Table + Status) - - -
 JPanel contentPanel = new JPanel(new BorderLayout(10, 15) );
 contentPanel.setOpaque(false);
 contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20) );

 // - - - Search/Filter Panel-- -
 JPanel searchFilterPanel = createSearchFilterPanel();
 contentPanel.add(searchFilterPanel, BorderLayout.NORTH);

 // - - - Opportunities Table-- -
 JTable opportunitiesTable = createOpportunitiesTable();
 JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
 styleScrollPane(scrollPane);
 contentPanel.add(scrollPane, BorderLayout.CENTER);

 // - - - Application Status Panel(Placeholder) - - -
 JPanel statusPanel = createStatusPanel();
 contentPanel.add(statusPanel, BorderLayout.SOUTH);

 add(contentPanel, BorderLayout.CENTER);
 }

 private JPanel createHeaderPanel() {
 JPanel headerPanel = new JPanel(new BorderLayout(10, 0) );
 headerPanel.setOpaque(false);
 headerPanel.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),;
 new EmptyBorder(10, 20, 10, 20);
 ) );

 // Left side: Role Icon and Title
 JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0) );
 titleGroup.setOpaque(false);
 JLabel iconLabel = new JLabel(" \u2605"); // Star symbol;
 iconLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 22) );
 iconLabel.setForeground(new Color(255, 215, 0) ); // Gold color;
 JLabel nameLabel = new JLabel("Volunteer Dashboard");
 nameLabel.setFont(new Font(Font.SANSSERIF, Font.BOLD, 20) );
 nameLabel.setForeground(TITLECOLOR_DARK);
 titleGroup.add(iconLabel);
 titleGroup.add(nameLabel);
 headerPanel.add(titleGroup, BorderLayout.WEST);

 // Right side: User info and Logout Button
 JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0) );
 userGroup.setOpaque(false);

 userLabel = new JLabel("Welcome, Volunteer");
 userLabel.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 14) );
 userLabel.setForeground(TEXTCOLOR_DARK);

 JButton btnLogout = new JButton("Logout");
 styleActionButton(btnLogout, "Logout and return to welcome screen" );
 btnLogout.setPreferredSize(new Dimension(100, 30) );
 btnLogout.setBackground(new Color(192, 57, 43) ); // Reddish logout;
 btnLogout.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60) ); }
 @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43) ); }
 });
 btnLogout.addActionListener(e -> mainApp.logout();

 userGroup.add(userLabel);
 userGroup.add(btnLogout);
 headerPanel.add(userGroup, BorderLayout.EAST);

 return headerPanel;
 }

 private JPanel createSearchFilterPanel() {
 JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5) );
 panel.setOpaque(false);

 JLabel lblFilterLocation = new JLabel("Location:");
 styleFormLabel(lblFilterLocation);
 String[ ] locations = {"Any Location", "City A", "City B", "Region C"}; // Placeholders;
 JComboBox<String> cmbLocation = new JComboBox<>(locations);
 styleComboBox(cmbLocation);

 JLabel lblFilterSkills = new JLabel("Skills:");
 styleFormLabel(lblFilterSkills);
 JTextField txtSkills = new JTextField(15); // Text field for skills keywords;
 styleTextField(txtSkills);

 JLabel lblFilterTime = new JLabel("Commitment:");
 styleFormLabel(lblFilterTime);
 String[ ] times = {"Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"}; // Placeholders;
 JComboBox<String> cmbTime = new JComboBox<>(times);
 styleComboBox(cmbTime);

 JButton btnSearch = new JButton("Find Opportunities");
 styleActionButton(btnSearch, "Search for volunteer roles matching criteria" );
 btnSearch.addActionListener(e ->
 JOptionPane.showMessageDialog(this, "Search logic not implemented.", "Search", JOptionPane.INFORMATIONMESSAGE);
 );

 panel.add(lblFilterLocation);
 panel.add(cmbLocation);
 panel.add(Box.createHorizontalStrut(10) );
 panel.add(lblFilterSkills);
 panel.add(txtSkills);
 panel.add(Box.createHorizontalStrut(10) );
 panel.add(lblFilterTime);
 panel.add(cmbTime);
 panel.add(Box.createHorizontalStrut(15) );
 panel.add(btnSearch);

 return panel;
 }

 private JTable createOpportunitiesTable() {
 String[ ] columnNames = {"Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Action"};
 Object[ ] [ ] data = {
 {"Hope Children's Home", "Weekend Tutor", "City A", "Teaching, Patience", "Weekends", "Apply"},
 {"Bright Future Orphanage", "Event Helper", "City B", "Organizing, Energetic", "Event-Based", "Apply"},
 {"Little Angels Shelter", "After-School Care", "City A", "Childcare, First Aid", "Weekdays", "Applied"},
 {"Sunshine House", "Gardening Assistant", "Region C", "Gardening", "Flexible", "Apply"},
 {"Hope Children's Home", "Reading Buddy", "City A", "Reading, Communication", "Weekdays", "Apply"}
 };

 JTable table = new JTable(data, columnNames) {
 @Override
 public boolean isCellEditable(int row, int column) {
 return column == 5 && "Apply".equals(getValueAt(row, column) );
 }
 };

 styleTable(table);

 // Add button renderer/editor for the "Action" column
 table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer(BUTTONAPPLY_BG) );
 table.getColumnModel().getColumn(5).setCellEditor(;
 new ButtonEditor(new JCheckBox(), BUTTONAPPLY_BG, () -> {
 int selectedRow = table.convertRowIndexToModel(table.getEditingRow();
 String oppName = (String) table.getModel().getValueAt(selectedRow, 1);
 String orphName = (String) table.getModel().getValueAt(selectedRow, 0);
 JOptionPane.showMessageDialog(
 this,
 "Apply for: " + oppName + " at " + orphName + " \n(Functionality not implemented) ",;
 "Apply",
 JOptionPane.INFORMATIONMESSAGE
 );
 // Example to update status using DefaultTableModel:
 // ( (DefaultTableModel) table.getModel().setValueAt( "Applied", selectedRow, 5);
 })
 );

 // Adjust column widths
 table.getColumnModel().getColumn(0).setPreferredWidth(150); // Orphanage;
 table.getColumnModel().getColumn(1).setPreferredWidth(150); // Opportunity;
 table.getColumnModel().getColumn(2).setPreferredWidth(100); // Location;
 table.getColumnModel().getColumn(3).setPreferredWidth(180); // Skills;
 table.getColumnModel().getColumn(4).setPreferredWidth(120); // Time;
 table.getColumnModel().getColumn(5).setPreferredWidth(90); // Action;

 return table;
 }

 private JPanel createStatusPanel() {
 JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT) );
 panel.setOpaque(false);
 panel.setBorder(new CompoundBorder(
 BorderFactory.createMatteBorder(1, 0, 0, 0, BORDERCOLOR_DARK), // Top border separator;
 new EmptyBorder(10, 5, 5, 5) // Padding;
 ) );

 lblStatus.setFont(new Font(Font.SANSSERIF, Font.ITALIC, 13) );
 lblStatus.setForeground(TEXTCOLOR_DARK);
 panel.add(lblStatus);

 return panel;
 }

 // - - - Styling Helpers-- -
 private void styleFormLabel(JLabel label) {
 label.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 label.setForeground(TEXTCOLOR_DARK);
 }

 private void styleTextField(JTextField field) {
 field.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 field.setForeground(INPUTFG_DARK);
 field.setBackground(INPUTBG_DARK);
 Border padding = new EmptyBorder(4, 6, 4, 6);
 field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding) );
 field.setCaretColor(Color.LIGHTGRAY);
 }

 private void styleComboBox(JComboBox<?> comboBox) {
 comboBox.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 comboBox.setForeground(INPUTFG_DARK);
 comboBox.setBackground(INPUTBG_DARK);
 comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1) );

 for(Component c : comboBox.getComponents() ) {
 if(c instanceof JButton) {
 ( (JButton) c).setBackground(BUTTONBG_DARK);
 ( (JButton) c).setBorder(BorderFactory.createEmptyBorder();
 break;
 }
 }

 Object p = comboBox.getUI().getAccessibleChild(comboBox, 0);
 if(p instanceof JPopupMenu) {
 JPopupMenu pm = (JPopupMenu) p;
 pm.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 for(Component comp : pm.getComponents() ) {
 if(comp instanceof JScrollPane) {
 JScrollPane sp = (JScrollPane) comp;
 sp.getViewport().setBackground(INPUTBG_DARK);
 applyScrollbarUI(sp.getVerticalScrollBar();
 Component l = sp.getViewport().getView();
 if(l instanceof JList) {
 @SuppressWarnings("rawtypes")
 JList list = (JList) l;
 list.setBackground(INPUTBG_DARK);
 list.setForeground(INPUTFG_DARK);
 list.setSelectionBackground(BUTTONBG_DARK);
 list.setSelectionForeground(BUTTONFG_DARK);
 }
 }
 }
 }
 }

 private void styleTable(JTable table) {
 table.setBackground(TABLECELLBG);
 table.setForeground(TABLECELLFG);
 table.setGridColor(TABLEGRIDCOLOR);
 table.setRowHeight(28);
 table.setFont(new Font(Font.SANSSERIF, Font.PLAIN, 13) );
 table.setFillsViewportHeight(true);
 table.setSelectionBackground(TABLECELLSELECTED_BG);
 table.setSelectionForeground(TABLECELLSELECTED_FG);
 table.setShowGrid(true);
 table.setIntercellSpacing(new Dimension(0, 1) );

 JTableHeader h = table.getTableHeader();
 h.setBackground(TABLEHEADER_BG);
 h.setForeground(TABLEHEADER_FG);
 h.setFont(new Font(Font.SANSSERIF, Font.BOLD, 14) );
 h.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 h.setReorderingAllowed(true);
 h.setResizingAllowed(true);

 DefaultTableCellRenderer r = new DefaultTableCellRenderer();
 r.setHorizontalAlignment(SwingConstants.LEFT);
 r.setVerticalAlignment(SwingConstants.CENTER);
 r.setBorder(new EmptyBorder(2, 5, 2, 5) );
 for(int i = 0; i < table.getColumnCount() - 1; i++) {
 table.getColumnModel().getColumn(i).setCellRenderer(r);
 }
 }

 private void styleScrollPane(JScrollPane scrollPane) {
 scrollPane.setOpaque(false);
 scrollPane.getViewport().setOpaque(false);
 scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK) );
 applyScrollbarUI(scrollPane.getVerticalScrollBar();
 applyScrollbarUI(scrollPane.getHorizontalScrollBar();
 }

 private void applyScrollbarUI(JScrollBar scrollBar) {
 scrollBar.setUI(new BasicScrollBarUI() {
 @Override
 protected void configureScrollBarColors() {
 this.thumbColor = BUTTONBG_DARK;
 this.trackColor = DARKBGEND;
 }

 @Override
 protected JButton createDecreaseButton(int orientation) {
 return createZeroButton();
 }

 @Override
 protected JButton createIncreaseButton(int orientation) {
 return createZeroButton();
 }

 private JButton createZeroButton() {
 JButton b = new JButton();
 b.setPreferredSize(new Dimension(0, 0) );
 b.setMaximumSize(new Dimension(0, 0) );
 b.setMinimumSize(new Dimension(0, 0) );
 return b;
 }

 @Override
 protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
 g.setColor(thumbColor);
 g.fillRect(r.x, r.y, r.width, r.height);
 }

 @Override
 protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
 g.setColor(trackColor);
 g.fillRect(r.x, r.y, r.width, r.height);
 }
 });
 scrollBar.setUnitIncrement(16);
 }

 private void styleActionButton(JButton btn, String tooltip) {
 btn.setFont(new Font(Font.SANSSERIF, Font.BOLD, 12) );
 btn.setToolTipText(tooltip);
 btn.setCursor(Cursor.getPredefinedCursor(Cursor.HANDCURSOR) );
 btn.setForeground(BUTTONFG_DARK);
 btn.setFocusPainted(false);
 btn.setBackground(BUTTONBG_DARK);
 Border padding = new EmptyBorder(6, 12, 6, 12);
 btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker(), padding) );
 btn.addMouseListener(new MouseAdapter() {
 @Override public void mouseEntered(MouseEvent e) {
 if(btn.getBackground().equals(BUTTONBG_DARK) ) {
 btn.setBackground(BUTTONHOVER_BG_DARK);
 }
 }
 @Override public void mouseExited(MouseEvent e) {
 if(btn.getBackground().equals(BUTTONHOVER_BG_DARK) ) {
 btn.setBackground(BUTTONBG_DARK);
 }
 }
 });
 }

 // - - - Inner classes for Table Button-- -
 static class ButtonRenderer extends JButton implements javax.swing.table.TableCellRenderer {
 private final Color defaultBg;
 public ButtonRenderer(Color background) {
 setOpaque(true);
 this.defaultBg = background;
 setForeground(BUTTONFG_DARK);
 setBackground(defaultBg);
 setBorder(new EmptyBorder(2, 5, 2, 5) );
 setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 }
 @Override
 public Component getTableCellRendererComponent(JTable t, Object v, boolean s, boolean f, int r, int c) {
 setText(v == null ? " " : v.toString();
 setBackground(s ? defaultBg.brighter() : defaultBg);
 return this;
 }
 }

 static class ButtonEditor extends DefaultCellEditor() {
 protected JButton button;
 private String label;
 private boolean isPushed;
 private final Runnable action;
 private final Color bgColor;

 public ButtonEditor(JCheckBox c, Color bg, Runnable act) {
 super(c);
 this.action = act;
 this.bgColor = bg;
 button = new JButton();
 button.setOpaque(true);
 button.setForeground(BUTTONFG_DARK);
 button.setBackground(bgColor);
 button.setBorder(new EmptyBorder(2, 5, 2, 5) );
 button.setFont(new Font(Font.SANSSERIF, Font.BOLD, 11) );
 button.addActionListener(e -> fireEditingStopped();
 }

 @Override
 public Component getTableCellEditorComponent(JTable t, Object v, boolean s, int r, int c) {
 label = (v == null) ? " " : v.toString();
 button.setText(label);
 isPushed = true;
 return button;
 }

 @Override
 public Object getCellEditorValue() {
 if(isPushed && action != null) {
 action.run();
 }
 isPushed = false;
 return label;
 }

 @Override
 public boolean stopCellEditing() {
 isPushed = false;
 return super.stopCellEditing();
 }

 @Override
 protected void fireEditingStopped() {
 super.fireEditingStopped();
 }
 }
}
```

=================================================================================

################################################################################
#                          UTILITY CLASSES                                     #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ UTILITY AND HELPER CLASSES
┃ Package: com.orphanagehub.util
┃ Files: 4
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.util
║ File: EdtGuard.java
║ Lines: 28
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.util;
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.swing.JComponent;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;

public final class EdtGuard {
    private static final Logger logger = LoggerFactory.getLogger(EdtGuard.class);

    public static void install() {
        String env = System.getProperty("app.env", "");
        if (!"dev".equalsIgnoreCase(env)) return;

        RepaintManager.setCurrentManager(new RepaintManager() {
            @Override
            public void addDirtyRegion(JComponent c, int x, int y, int w, int h) {
                if (!SwingUtilities.isEventDispatchThread()) {
                    logger.warn("EDT VIOLATION: UI update outside Event Dispatch Thread!", new Exception("EDT violation stack trace"));
                }
                super.addDirtyRegion(c, x, y, w, h);
            }
        });
        logger.info("EDT Guard has been installed for this development session.");
    }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.util
║ File: GlobalExceptionHandler.java
║ Lines: 32
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.util;
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.swing.JOptionPane;
import java.lang.Thread.UncaughtExceptionHandler;

public class GlobalExceptionHandler implements UncaughtExceptionHandler {
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        logger.error("FATAL: Uncaught exception in thread '{}'", t.getName(), e);

        final String errorMessage = String.format(
            "A critical and unexpected error occurred: %s\n\n" +
            "The application may be unstable. Please see 'logs/app.log' for full details.\n" +
            "Error Type: %s",
            e.getMessage(),
            e.getClass().getSimpleName()
        );

        JOptionPane.showMessageDialog(null, errorMessage, "Application Error", JOptionPane.ERROR_MESSAGE);
    }

    public static void register() {
        Thread.setDefaultUncaughtExceptionHandler(new GlobalExceptionHandler());
        System.setProperty("sun.awt.exception.handler", GlobalExceptionHandler.class.getName());
        logger.info("Global exception handler registered.");
    }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.util
║ File: PasswordUtil.java
║ Lines: 31
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public final class PasswordUtil {
    private static final Logger logger = LoggerFactory.getLogger(PasswordUtil.class);

    private PasswordUtil() {}
    
    public static String sha256(final String input) {
        if(input == null) return "";
        try {
            final MessageDigest md = MessageDigest.getInstance("SHA-256");
            final byte[] hash = md.digest(input.getBytes(StandardCharsets.UTF_8));
            final StringBuilder hexString = new StringBuilder();
            for(byte b : hash) {
                final String hex = Integer.toHexString(0xff & b);
                if(hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch(NoSuchAlgorithmException e) {
            logger.error("SHA-256 algorithm not found", e);
            return "";
        }
    }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.util
║ File: ValidationUtil.java
║ Lines: 24
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.util;

import java.util.regex.Pattern;

public final class ValidationUtil {
  private ValidationUtil() {}

  private static final Pattern EMAIL =
      Pattern.compile("^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

  public static boolean isNonEmpty(String s) {
    return s != null && !s.trim().isEmpty();
  }

  public static boolean isValidEmail(String email) {
    return isNonEmpty(email) && EMAIL.matcher(email).matches();
  }

  public static void require(boolean condition, String message) {
    if (!condition) {
      throw new IllegalArgumentException(message);
    }
  }
}
```

=================================================================================

################################################################################
#                            TOOLS & UTILITIES                                 #
################################################################################

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┃ DEVELOPMENT TOOLS
┃ Package: com.orphanagehub.tools
┃ Files: 2
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.tools
║ File: DbDoctor.java
║ Lines: 28
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.tools;
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.orphanagehub.dao.DatabaseManager;
import java.sql.Connection;

public class DbDoctor {
    private static final Logger logger = LoggerFactory.getLogger(DbDoctor.class);

    public static void main(String[] args) {
        System.out.println("🩺 Checking database connectivity...");
        try (Connection conn = DatabaseManager.getConnection()) {
            if (conn != null && !conn.isClosed()) {
                System.out.println("\n✅ SUCCESS: Connection to the database was established successfully.");
            } else {
                 System.out.println("\n❌ FAILED: Connection returned null or was immediately closed.");
            }
        } catch (Exception e) {
            System.err.println("\n❌ FAILED: Could not connect to the database.");
            System.err.println("   Error Type: " + e.getClass().getSimpleName());
            System.err.println("   Message: " + e.getMessage());
            System.exit(1);
        }
    }
}
```

=================================================================================

╔══════════════════════════════════════════════════════════════════════════════
║ Package: com.orphanagehub.tools
║ File: DbShell.java
║ Lines: 45
╚══════════════════════════════════════════════════════════════════════════════

```java
package com.orphanagehub.tools;
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.orphanagehub.dao.DatabaseManager;
import java.sql.*;

public class DbShell {
    private static final Logger logger = LoggerFactory.getLogger(DbShell.class);

    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Usage: make db:sql q=\"YOUR_QUERY\"");
            System.exit(1);
        }
        String query = args[0];
        System.out.println("Executing: " + query);
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement()) {
            boolean hasResultSet = stmt.execute(query);
            if (hasResultSet) {
                try (ResultSet rs = stmt.getResultSet()) {
                    ResultSetMetaData meta = rs.getMetaData();
                    int colCount = meta.getColumnCount();
                    for (int i = 1; i <= colCount; i++) {
                        System.out.printf("%-25s", meta.getColumnName(i));
                    }
                    System.out.println("\n" + "-".repeat(colCount * 25));
                    while (rs.next()) {
                        for (int i = 1; i <= colCount; i++) {
                            System.out.printf("%-25s", rs.getString(i));
                        }
                        System.out.println();
                    }
                }
            } else {
                System.out.println("Query OK, " + stmt.getUpdateCount() + " rows affected.");
            }
            System.err.println("Query failed: " + e.getMessage());
            System.exit(1);
        }
    }
}
```

=================================================================================


################################################################################
#                            CODE STATISTICS                                   #
################################################################################

File Statistics:
----------------
  EdtGuard.java:                              28 lines,  1 classes,   1 methods
  GlobalExceptionHandler.java:                32 lines,  1 classes,   1 methods
  PasswordUtil.java:                          31 lines,  2 classes,   2 methods
  ValidationUtil.java:                        24 lines,  2 classes,   2 methods
  DatabaseManager.java:                       20 lines,  1 classes,   1 methods
  OrphanageHubApp.java:                       42 lines,  1 classes,   1 methods

Summary:
--------
  Total Java Files:    31
  Total Lines of Code: 189
  Total Classes:       8
  Total Methods:       ~8

============================================================
END OF SOURCE CODE EXPORT
Generated: 2025-08-14 01:51:40
Export File: src/all_source_code.txt
Total Size: 188K
============================================================
