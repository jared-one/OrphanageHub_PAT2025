# all_gui_code.txt

Generated: 2025-09-05 19:06:43 (local)
Source directory: /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui

================================================================================
## 1. DIRECTORY SNAPSHOT
================================================================================

```
AdminDashboardPanel.java
DonorDashboardPanel.java
DonorDashboardPanel.java.bak
HomePanel.java
LoginPanel.java
OrphanageDashboardPanel.java
OrphanageDashboardPanel.java.bak
OrphanageHubApp.java
RegistrationPanel.java
RegistrationPanel.java.bak
VolunteerDashboardPanel.java
VolunteerDashboardPanel.java.bak
WelcomePanel.java
frmHome.png
home.png
updateGuis.py
```

================================================================================
## 2. PROJECT OVERVIEW
================================================================================

This file groups GUI source files, backup copies, and resources for easy review.
Plaintext files (.java, .txt, .md, .properties, etc.) are embedded below (truncated if large).
Binary files (images, .class) are listed with size and a note.

================================================================================
## 3. FILE GROUPS
================================================================================

### Java source files
```
./AdminDashboardPanel.java
./DonorDashboardPanel.java
./HomePanel.java
./LoginPanel.java
./OrphanageDashboardPanel.java
./OrphanageHubApp.java
./RegistrationPanel.java
./VolunteerDashboardPanel.java
./WelcomePanel.java
```

### Backup files (.bak)
```
./DonorDashboardPanel.java.bak
./OrphanageDashboardPanel.java.bak
./RegistrationPanel.java.bak
./VolunteerDashboardPanel.java.bak
```

### Image / Binary resources
```
./frmHome.png
./home.png
```

### Other readable files
```
./DonorDashboardPanel.java.bak
./OrphanageDashboardPanel.java.bak
./RegistrationPanel.java.bak
./VolunteerDashboardPanel.java.bak
```

================================================================================
## 4. DIRECTORY TREE (short)
================================================================================

```
gui/
  AdminDashboardPanel.java
  DonorDashboardPanel.java
  DonorDashboardPanel.java.bak
  HomePanel.java
  LoginPanel.java
  OrphanageDashboardPanel.java
  OrphanageDashboardPanel.java.bak
  OrphanageHubApp.java
  RegistrationPanel.java
  RegistrationPanel.java.bak
  VolunteerDashboardPanel.java
  VolunteerDashboardPanel.java.bak
  WelcomePanel.java
  frmHome.png
  home.png
  updateGuis.py
```

================================================================================
## 5. DETAILED SECTIONS (FILES)
================================================================================
------------------------------------------------------------
### File: AdminDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AdminService;
import com.orphanagehub.util.SessionManager;

import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for admins.
 * Matches Phase 2 FrmAdminDashboard: header, stats, search, tables, buttons.
 */
public class AdminDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient AdminService adminService = new AdminService();

    public AdminDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header and stats
        JPanel top = new JPanel(new GridLayout(2, 1));
        JLabel lblHeader = new JLabel("Administrator Dashboard");
        JPanel stats = new JPanel(new FlowLayout());
        JLabel lblUserCount = new JLabel("Users: 0"); // From service
        JLabel lblOrphanageCount = new JLabel("Orphanages: 0");
        JLabel lblPendingVerifications = new JLabel("Pending: 0");
        stats.add(lblUserCount); stats.add(lblOrphanageCount); stats.add(lblPendingVerifications);
        top.add(lblHeader); top.add(stats);
        add(top, BorderLayout.NORTH);

        // User management
        JPanel userMgmt = new JPanel(new BorderLayout());
        JPanel userSearch = new JPanel(new FlowLayout());
        JTextField txtUserSearch = new JTextField(20);
        JComboBox<String> cmbRoleFilter = new JComboBox<>(new String[]{"All", "Donor", "Staff"});
        JButton btnUserSearch = new JButton("Search");
        userSearch.add(txtUserSearch); userSearch.add(cmbRoleFilter); userSearch.add(btnUserSearch);
        JTable tblUserManagement = new JTable();
        userMgmt.add(userSearch, BorderLayout.NORTH);
        userMgmt.add(new JScrollPane(tblUserManagement), BorderLayout.CENTER);
        add(userMgmt, BorderLayout.CENTER);

        // Verification queue
        JTable tblVerificationQueue = new JTable();
        add(new JScrollPane(tblVerificationQueue), BorderLayout.SOUTH);

        JButton btnLogout = new JButton("Logout");
        add(btnLogout, BorderLayout.EAST);

        // Listeners
        btnUserSearch.addActionListener(e -> /* Filter users */ {});
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });

        // Load data after panel is ready (deferred to avoid initialization issues)
        SwingUtilities.invokeLater(() -> {
            adminService.getPendingVerifications()
                .onSuccess(list -> { /* Set queue table */ })
                .onFailure(error -> {
                    // Log error but don't crash the application
                    System.err.println("Failed to load pending verifications: " + error.getMessage());
                });
        });
    }
}
```
------------------------------------------------------------
### File: DonorDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.DonorService;
import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for donors.
 * Matches Phase 2 FrmDonorDashboard: search, filter, table, buttons.
 */
public class DonorDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    
    private final transient OrphanageHubApp mainApp;
    private final transient DonorService donorService = new DonorService();

    public DonorDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JTextField txtSearch = new JTextField(20);
        JComboBox<String> cmbFilter = new JComboBox<>(new String[]{"Location", "Needs"});
        JButton btnSearch = new JButton("Search");
        JButton btnViewDetails = new JButton("View Details");
        JButton btnLogout = new JButton("Logout");
        searchPanel.add(txtSearch); 
        searchPanel.add(cmbFilter); 
        searchPanel.add(btnSearch); 
        searchPanel.add(btnViewDetails); 
        searchPanel.add(btnLogout);
        add(searchPanel, BorderLayout.NORTH);

        // Table
        JTable tblOrphanages = new JTable(); // Model from search
        JScrollPane scroll = new JScrollPane(tblOrphanages);
        add(scroll, BorderLayout.CENTER);

        // Listeners
        btnSearch.addActionListener(e -> {
            // donorService.searchByLocation/... update table
        });
        btnViewDetails.addActionListener(e -> {
            // Show details dialog
        });
        btnLogout.addActionListener(e -> {
            // Clear any session data if needed
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
    }
}
```
------------------------------------------------------------
### File: HomePanel.java
```java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Home panel for role selection and navigation.
 * Matches Phase 2 FrmHome: title, prompt, description, radios, buttons.
 */
public class HomePanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final OrphanageHubApp mainApp;
    private final ButtonGroup roleGroup = new ButtonGroup();
    private JRadioButton radDonor;
    private JRadioButton radOrphanageStaff;
    private JRadioButton radVolunteer;
    private JRadioButton radAdmin;

    public HomePanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        // Title
        JLabel lblTitle = new JLabel("OrphanageHub");
        lblTitle.setFont(new Font("Lato", Font.BOLD, 45));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        add(lblTitle, gbc);

        // Description
        JTextArea txtDescription = new JTextArea("Welcome to OrphanageHub, a platform connecting donors, volunteers, and orphanages.");
        txtDescription.setEditable(false);
        txtDescription.setLineWrap(true);
        txtDescription.setWrapStyleWord(true);
        txtDescription.setBackground(getBackground());
        gbc.gridy = 1; gbc.gridwidth = 2;
        add(txtDescription, gbc);

        // Role Prompt
        JLabel lblRolePrompt = new JLabel("Select Your Role:");
        gbc.gridy = 2; gbc.gridwidth = 1;
        add(lblRolePrompt, gbc);

        // Radios
        radDonor = new JRadioButton("Donor");
        radOrphanageStaff = new JRadioButton("Orphanage Staff");
        radVolunteer = new JRadioButton("Volunteer");
        radAdmin = new JRadioButton("Admin");
        roleGroup.add(radDonor); 
        roleGroup.add(radOrphanageStaff); 
        roleGroup.add(radVolunteer); 
        roleGroup.add(radAdmin);
        
        gbc.gridy = 3;
        add(radDonor, gbc); 
        gbc.gridy = 4; 
        add(radOrphanageStaff, gbc);
        gbc.gridy = 5; 
        add(radVolunteer, gbc); 
        gbc.gridy = 6; 
        add(radAdmin, gbc);

        // Buttons
        JButton btnLogin = new JButton("Login");
        JButton btnRegister = new JButton("Register");
        gbc.gridy = 7; gbc.gridx = 0;
        add(btnLogin, gbc); 
        gbc.gridx = 1; 
        add(btnRegister, gbc);

        // Listeners
        ActionListener roleListener = e -> mainApp.setLastSelectedRole(((JRadioButton) e.getSource()).getText());
        radDonor.addActionListener(roleListener);
        radOrphanageStaff.addActionListener(roleListener);
        radVolunteer.addActionListener(roleListener);
        radAdmin.addActionListener(roleListener);

        btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL));
        btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL));

        // Restore last role
        if (mainApp.getLastSelectedRole() != null) {
            // Select radio based on last role
            switch (mainApp.getLastSelectedRole()) {
                case "Donor":
                    radDonor.setSelected(true);
                    break;
                case "Orphanage Staff":
                    radOrphanageStaff.setSelected(true);
                    break;
                case "Volunteer":
                    radVolunteer.setSelected(true);
                    break;
                case "Admin":
                    radAdmin.setSelected(true);
                    break;
            }
        }
    }
    
    // Add method to get selected role
    public String getSelectedRole() {
        if (radDonor.isSelected()) return "Donor";
        if (radOrphanageStaff.isSelected()) return "OrphanageStaff";
        if (radVolunteer.isSelected()) return "Volunteer";
        if (radAdmin.isSelected()) return "Admin";
        return null;
    }
}
```
------------------------------------------------------------
### File: LoginPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AuthenticationService;
import com.orphanagehub.util.SessionManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;

/**
 * Login panel for authentication.
 * Matches Phase 2 FrmLogin: labels, fields, button, hyperlink.
 */
public class LoginPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient AuthenticationService authService = new AuthenticationService();

    public LoginPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        JLabel lblUsername = new JLabel("Username:");
        gbc.gridx = 0; gbc.gridy = 0;
        add(lblUsername, gbc);

        JTextField txtUsername = new JTextField(20);
        gbc.gridx = 1;
        add(txtUsername, gbc);

        JLabel lblPassword = new JLabel("Password:");
        gbc.gridx = 0; gbc.gridy = 1;
        add(lblPassword, gbc);

        JPasswordField txtPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtPassword, gbc);

        JButton btnLogin = new JButton("Login");
        gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 2;
        add(btnLogin, gbc);

        JLabel lblHyperlink = new JLabel("<html><u>Register or Forgot Password?</u></html>");
        lblHyperlink.setForeground(Color.BLUE);
        lblHyperlink.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        gbc.gridy = 3;
        add(lblHyperlink, gbc);

        // Login listener
        btnLogin.addActionListener(e -> {
            authService.authenticate(txtUsername.getText(), txtPassword.getPassword())
                    .onSuccess(user -> {
                        SessionManager.getInstance().setAttribute("currentUser", user);
                        mainApp.navigateTo(mainApp.dashboardForRole(user.userRole()));
                    })
                    .onFailure(ex -> showError(ex.getMessage()));
            Arrays.fill(txtPassword.getPassword(), '0'); // Secure clear
        });

        // Hyperlink listener
        lblHyperlink.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); // Or password reset if implemented
            }
        });
    }

    // Custom error dialog (polish: red border, per suggestion)
    private void showError(String msg) {
        JDialog dialog = new JDialog(mainApp, "Error", true);
        JLabel label = new JLabel(msg);
        label.setForeground(Color.RED);
        label.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa)); // From CSS
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }
}
```
------------------------------------------------------------
### File: OrphanageDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import com.orphanagehub.service.OrphanageService;
import com.orphanagehub.util.SessionManager;
import javax.swing.*;
import java.awt.*;
/**
 * Dashboard for orphanage staff.
 * Matches Phase 2 FrmOrphanageDashboard: name, user, table, buttons.
 */
public class OrphanageDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient OrphanageService orphanageService = new OrphanageService();

    public OrphanageDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header
        JPanel header = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel lblOrphanageName = new JLabel("Orphanage Name"); // From session/service
        JLabel lblUserDisplay = new JLabel(SessionManager.getInstance().getAttribute("currentUser").map(u -> {
            if (u instanceof User) {
                return ((User) u).username();
            }
            return "User";
        }).getOrElse("User"));
        header.add(lblOrphanageName);
        header.add(lblUserDisplay);
        add(header, BorderLayout.NORTH);

        // Table
        JTable tblResourceRequests = new JTable(); // Model from service.getRequests
        JScrollPane scroll = new JScrollPane(tblResourceRequests);
        add(scroll, BorderLayout.CENTER);

        // Buttons
        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton btnAddRequest = new JButton("Add Request");
        JButton btnEditRequest = new JButton("Edit Request");
        JButton btnDeleteRequest = new JButton("Delete Request");
        JButton btnLogout = new JButton("Logout");
        buttons.add(btnAddRequest); buttons.add(btnEditRequest); buttons.add(btnDeleteRequest); buttons.add(btnLogout);
        add(buttons, BorderLayout.SOUTH);

        // Listeners (stubs; implement dialogs)
        btnAddRequest.addActionListener(e -> /* Open add dialog */ {});
        btnEditRequest.addActionListener(e -> /* Edit selected */ {});
        btnDeleteRequest.addActionListener(e -> /* Delete selected */ {});
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });

        // Load data
        String orphanageId = SessionManager.getInstance().getAttribute("currentOrphanageId")
                .map(Object::toString)
                .getOrElse("");
        orphanageService.getRequests(orphanageId).onSuccess(list -> {
            // Set table model; e.g., DefaultTableModel with list
        });
    }
}
```
------------------------------------------------------------
### File: OrphanageHubApp.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AuthenticationService;
import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.util.EdtGuard;
import com.orphanagehub.util.GlobalExceptionHandler;
import com.orphanagehub.util.SessionManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;

/**
 * Main application frame.
 * Manages navigation between panels using CardLayout.
 */
public class OrphanageHubApp extends JFrame {
    private static final long serialVersionUID = 1L;

    private static final Logger logger = LoggerFactory.getLogger(OrphanageHubApp.class);

    public static final String HOME_PANEL = "Home";
    public static final String LOGIN_PANEL = "Login";
    public static final String REGISTRATION_PANEL = "Registration";
    public static final String ADMIN_DASHBOARD = "AdminDashboard";
    public static final String ORPHANAGE_DASHBOARD = "OrphanageDashboard";
    public static final String DONOR_DASHBOARD = "DonorDashboard";
    public static final String VOLUNTEER_DASHBOARD = "VolunteerDashboard";

    private final JPanel mainPanel = new JPanel(new CardLayout());
    private String lastSelectedRole; // For role persistence

    public OrphanageHubApp() {
        super("OrphanageHub");
        GlobalExceptionHandler.install();
        initUI();
        add(mainPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(960, 720); // From Phase 2 container-width
        setLocationRelativeTo(null);
        setVisible(true);
        logger.info("OrphanageHub application started");
    }

    private void initUI() {
        // Apply Nimbus Look and Feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            logger.info("Nimbus Look and Feel applied successfully");
        } catch (Exception e) {
            logger.warn("Failed to apply Nimbus Look and Feel", e);
        }

        // Define colors from Phase 2 CSS
        Color primary = new Color(0x004a99);
        Color primaryLight = new Color(0xe6f0ff);
        Color textPrimary = new Color(0x212529);
        Color textSecondary = new Color(0x5a6268);
        Color border = new Color(0xdee2e6);
        Color background = new Color(0xf8f9fa);
        Color white = Color.WHITE;
        Color success = new Color(0x198754);

        // Set global UI defaults
        UIManager.put("OptionPane.background", background);
        UIManager.put("Panel.background", background);
        UIManager.put("Button.background", primary);
        UIManager.put("Button.foreground", white);
        UIManager.put("Label.foreground", textPrimary);
        UIManager.put("TextField.background", white);
        UIManager.put("TextField.border", BorderFactory.createLineBorder(border));
        // Etc. for other components

        // Add panels
        mainPanel.add(new HomePanel(this), HOME_PANEL);
        mainPanel.add(new LoginPanel(this), LOGIN_PANEL);
        mainPanel.add(new RegistrationPanel(this), REGISTRATION_PANEL);
        mainPanel.add(new AdminDashboardPanel(this), ADMIN_DASHBOARD);
        mainPanel.add(new OrphanageDashboardPanel(this), ORPHANAGE_DASHBOARD);
        mainPanel.add(new DonorDashboardPanel(this), DONOR_DASHBOARD);
        mainPanel.add(new VolunteerDashboardPanel(this), VOLUNTEER_DASHBOARD);

        navigateTo(HOME_PANEL); // Start at home
    }

    /**
     * Navigates to a specific panel.
     * @param panelName The name of the panel to show.
     */
    public void navigateTo(String panelName) {
        EdtGuard.runOnEdt(() -> {
            CardLayout cl = (CardLayout) mainPanel.getLayout();
            cl.show(mainPanel, panelName);
            logger.debug("Navigating to: {}", panelName);
        });
    }

    /**
     * Gets the last selected role.
     * @return The role string.
     */
    public String getLastSelectedRole() {
        return lastSelectedRole;
    }

    /**
     * Sets the last selected role.
     * @param role The role to set.
     */
    public void setLastSelectedRole(String role) {
        this.lastSelectedRole = role;
    }

    // Helper: Navigate based on role (from session)
    public String dashboardForRole(String role) {
        return switch (role) {
            case "Admin" -> ADMIN_DASHBOARD;
            case "OrphanageStaff" -> ORPHANAGE_DASHBOARD;
            case "Donor" -> DONOR_DASHBOARD;
            case "Volunteer" -> VOLUNTEER_DASHBOARD;
            default -> HOME_PANEL;
        };
    }

    public static void main(String[] args) {
        EdtGuard.runOnEdt(() -> new OrphanageHubApp());
    }
}
```
------------------------------------------------------------
### File: RegistrationPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.util.ValidationUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Arrays;

/**
 * Registration panel for new users.
 * Matches Phase 2 FrmRegistration: labels, fields, combo (adaptive), button.
 */
public class RegistrationPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient RegistrationService registrationService = new RegistrationService();

    public RegistrationPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        JLabel lblUsername = new JLabel("Username:");
        gbc.gridx = 0; gbc.gridy = 0;
        add(lblUsername, gbc);

        JTextField txtUsername = new JTextField(20);
        gbc.gridx = 1;
        add(txtUsername, gbc);

        JLabel lblEmail = new JLabel("Email:");
        gbc.gridx = 0; gbc.gridy = 1;
        add(lblEmail, gbc);

        JTextField txtEmail = new JTextField(20);
        gbc.gridx = 1;
        add(txtEmail, gbc);

        JLabel lblFullName = new JLabel("Full Name:");
        gbc.gridx = 0; gbc.gridy = 2;
        add(lblFullName, gbc);

        JTextField txtFullName = new JTextField(20);
        gbc.gridx = 1;
        add(txtFullName, gbc);

        JLabel lblPassword = new JLabel("Password:");
        gbc.gridx = 0; gbc.gridy = 3;
        add(lblPassword, gbc);

        JPasswordField txtPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtPassword, gbc);

        JLabel lblConfirmPassword = new JLabel("Confirm Password:");
        gbc.gridx = 0; gbc.gridy = 4;
        add(lblConfirmPassword, gbc);

        JPasswordField txtConfirmPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtConfirmPassword, gbc);

        // Role/orphanage selector (adaptive: show combo if staff)
        JLabel lblRole = new JLabel("Role:");
        gbc.gridx = 0; gbc.gridy = 5;
        add(lblRole, gbc);

        JComboBox<String> cmbRole = new JComboBox<>(new String[]{"Donor", "Orphanage Staff", "Volunteer", "Admin"});
        gbc.gridx = 1;
        add(cmbRole, gbc);

        JComboBox<String> cmbOrphanage = new JComboBox<>(); // Populate from DAO if needed
        cmbOrphanage.setVisible(false);
        gbc.gridy = 6;
        add(cmbOrphanage, gbc);

        // Adaptive listener
        cmbRole.addActionListener(e -> cmbOrphanage.setVisible("Orphanage Staff".equals(cmbRole.getSelectedItem())));

        JButton btnRegister = new JButton("Register");
        gbc.gridx = 0; gbc.gridy = 7; gbc.gridwidth = 2;
        add(btnRegister, gbc);

        // Register listener
        btnRegister.addActionListener(e -> {
            registrationService.register(txtUsername.getText(), txtEmail.getText(), txtFullName.getText(),
                            txtPassword.getPassword(), txtConfirmPassword.getPassword(), (String) cmbRole.getSelectedItem())
                    .onSuccess(user -> {
                        showSuccess("Registration successful!");
                        mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
                    })
                    .onFailure(ex -> showError(ex.getMessage()));
            Arrays.fill(txtPassword.getPassword(), '0');
            Arrays.fill(txtConfirmPassword.getPassword(), '0');
        });
    }

    // Custom success dialog (green border)
    private void showSuccess(String msg) {
        JDialog dialog = new JDialog(mainApp, "Success", true);
        JLabel label = new JLabel(msg);
        label.setForeground(new Color(0x198754)); // Success from CSS
        label.setBorder(BorderFactory.createLineBorder(new Color(0x198754), 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa));
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }

    private void showError(String msg) {
        // Same as LoginPanel
        JDialog dialog = new JDialog(mainApp, "Error", true);
        JLabel label = new JLabel(msg);
        label.setForeground(Color.RED);
        label.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa));
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }
}
```
------------------------------------------------------------
### File: VolunteerDashboardPanel.java
```java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for volunteers.
 * Matches Phase 2 FrmVolunteerDashboard: header, search, filters, table, buttons.
 */
public class VolunteerDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final OrphanageHubApp mainApp;

    public VolunteerDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header
        JLabel lblHeader = new JLabel("Volunteer Dashboard");
        add(lblHeader, BorderLayout.NORTH);

        // Search
        JPanel searchPanel = new JPanel(new FlowLayout());
        JTextField txtSearchOpportunities = new JTextField(20);
        JComboBox<String> cmbFilterLocation = new JComboBox<>(new String[]{"All", "City1"});
        JComboBox<String> cmbSkillFilter = new JComboBox<>(new String[]{"All", "Teaching"});
        JButton btnSearch = new JButton("Search");
        JButton btnSignUp = new JButton("Sign Up");
        JButton btnLogout = new JButton("Logout");
        searchPanel.add(txtSearchOpportunities); 
        searchPanel.add(cmbFilterLocation); 
        searchPanel.add(cmbSkillFilter);
        searchPanel.add(btnSearch); 
        searchPanel.add(btnSignUp); 
        searchPanel.add(btnLogout);
        add(searchPanel, BorderLayout.NORTH);

        // Table
        JTable tblOpportunities = new JTable();
        add(new JScrollPane(tblOpportunities), BorderLayout.CENTER);

        // Listeners
        btnSearch.addActionListener(e -> {
            // Filter opportunities
        });
        btnSignUp.addActionListener(e -> {
            // Sign up for selected
        });
        btnLogout.addActionListener(e -> {
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
    }
}
```
------------------------------------------------------------
### File: WelcomePanel.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WelcomePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(WelcomePanel.class);

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

    public WelcomePanel(Runnable registerAction, Runnable loginAction) {
        setLayout(new BorderLayout());

        JPanel contentPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        contentPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Welcome to OrphanageHub");
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLECOLOR_DARK);

        JButton btnRegister = createButton("Register", registerAction);
        JButton btnLogin = createButton("Login", loginAction);

        contentPanel.add(lblTitle);
        contentPanel.add(btnRegister);
        contentPanel.add(btnLogin);

        add(contentPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private JButton createButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        button.setPreferredSize(new Dimension(150, 50));
        button.setForeground(BUTTONFG_DARK);
        button.setBackground(BUTTONBG_DARK);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(e -> action.run());
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(BUTTONHOVER_BG_DARK);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(BUTTONBG_DARK);
            }
        });
        return button;
    }
}
```
------------------------------------------------------------
### File: DonorDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DonorDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(DonorDashboardPanel.class);

    private final transient Runnable logoutAction;
    private transient User donorUser;
    private JLabel userLabel;
    private JTable resultsTable;
    private DefaultTableModel tableModel;
    private JTextField txtSearch;
    private JComboBox<String> cmbLocation;
    private JComboBox<String> cmbCategory;

    private transient DonorService donorService;

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color BUTTONSEARCH_BG = new Color(72, 149, 239);
    private static final Color BUTTONSEARCH_HOVER_BG = new Color(92, 169, 249);
    private static final Color BUTTONDONATEBG = new Color(60, 179, 113);
    private static final Color BUTTONDONATEHOVER_BG = new Color(70, 190, 123);

    public DonorDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        this.donorService = new DonorService();
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize DonorDashboardPanel", e);
        }
        logger.debug("DonorDashboard initialized");
    }

    public void setDonorUser(User user) {
        this.donorUser = new User(user);
        logger.info("Donor user set: {}", user.getUsername());
        refreshUI();
        loadOrphanageData();
    }

    private void refreshUI() {
        if (donorUser != null && userLabel != null) {
            userLabel.setText("User: " + donorUser.getUsername());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        add(createHeaderPanel(), BorderLayout.NORTH);
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        contentPanel.add(createSearchFilterPanel(), BorderLayout.NORTH);
        createResultsTable();
        JScrollPane scrollPane = new JScrollPane(resultsTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2764");
        iconLabel.setFont(new Font("Segoe UI Symbol", Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 105, 180));
        JLabel nameLabel = new JLabel("Donor Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("User: Loading...");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(
                e -> {
                    int confirm =
                            JOptionPane.showConfirmDialog(
                                    this,
                                    "Are you sure you want to logout?",
                                    "Confirm Logout",
                                    JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        logoutAction.run();
                    }
                });
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        JLabel lblSearch = new JLabel("Search:");
        styleFormLabel(lblSearch);
        txtSearch = new JTextField(20);
        styleTextField(txtSearch);
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        cmbLocation = new JComboBox<>(new String[] {"Any Location"});
        styleComboBox(cmbLocation);
        JLabel lblFilterCategory = new JLabel("Need Category:");
        styleFormLabel(lblFilterCategory);
        cmbCategory =
                new JComboBox<>(
                        new String[] {
                            "Any Category",
                            "Food",
                            "Clothing",
                            "Education",
                            "Medical",
                            "Funding",
                            "Other"
                        });
        styleComboBox(cmbCategory);
        JButton btnSearch = new JButton("Apply Filters");
        styleActionButton(btnSearch, "Find orphanages or requests matching criteria");
        btnSearch.setBackground(BUTTONSEARCH_BG);
        btnSearch.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnSearch.setBackground(BUTTONSEARCH_HOVER_BG);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnSearch.setBackground(BUTTONSEARCH_BG);
                    }
                });
        btnSearch.addActionListener(e -> performSearch());
        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterCategory);
        panel.add(cmbCategory);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        return panel;
    }

    private void createResultsTable() {
        String[] columnNames = {
            "Orphanage Name", "Location", "Contact", "Current Needs", "Actions"
        };
        tableModel =
                new DefaultTableModel(columnNames, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return column == 4;
                    }
                };
        resultsTable = new JTable(tableModel);
        styleTable(resultsTable);
        resultsTable.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
        resultsTable.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox()));
        resultsTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        resultsTable.getColumnModel().getColumn(1).setPreferredWidth(120);
        resultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        resultsTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        resultsTable.getColumnModel().getColumn(4).setPreferredWidth(120);
    }

    private void loadOrphanageData() {
        List<OrphanageInfo> orphanages = new ArrayList<>();
        // Add sample data
        orphanages.add(
                new OrphanageInfo(
                        "Hope Children's Home", "New York, NY", "John Doe", "Food, Clothing"));
        orphanages.add(
                new OrphanageInfo(
                        "Sunshine Orphanage",
                        "Los Angeles, CA",
                        "Jane Smith",
                        "Education materials"));
        orphanages.add(
                new OrphanageInfo(
                        "Future Stars", "Chicago, IL", "Bob Johnson", "Medical supplies"));

        updateTable(orphanages);
        updateLocationFilter(orphanages);
    }

    private void updateTable(List<OrphanageInfo> orphanages) {
        tableModel.setRowCount(0);
        for (OrphanageInfo info : orphanages) {
            Object[] row = {
                info.getName(),
                info.getAddress(),
                info.getContactPerson(),
                info.getCurrentNeeds(),
                "View Details"
            };
            tableModel.addRow(row);
        }
    }

    private void updateLocationFilter(List<OrphanageInfo> orphanages) {
        cmbLocation.removeAllItems();
        cmbLocation.addItem("Any Location");
        List<String> locations =
                orphanages.stream()
                        .map(info -> extractCity(info.getAddress()))
                        .distinct()
                        .collect(Collectors.toList());
        for (String location : locations) {
            cmbLocation.addItem(location);
        }
    }

    private String extractCity(String address) {
        if (address != null && address.contains(",")) {
            return address.split(",")[0].trim();
        }
        return address != null ? address : "Unknown";
    }

    private void performSearch() {
        String searchText = txtSearch.getText();
        String location = (String) cmbLocation.getSelectedItem();
        String category = (String) cmbCategory.getSelectedItem();

        JOptionPane.showMessageDialog(
                this,
                "Searching for: "
                        + searchText
                        + "\nLocation: "
                        + location
                        + "\nCategory: "
                        + category,
                "Search",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void showOrphanageDetails(int row) {
        String orphanageName = (String) tableModel.getValueAt(row, 0);
        JOptionPane.showMessageDialog(
                this,
                "Showing details for: " + orphanageName,
                "Orphanage Details",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(35);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLEHEADER_BG);
        header.setForeground(TABLEHEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int o) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int o) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        return b;
                    }
                });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()),
                        new EmptyBorder(6, 12, 6, 12)));
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        field.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),
                        new EmptyBorder(4, 6, 4, 6)));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));
    }

    static class ButtonRenderer extends JButton implements TableCellRenderer {
        private static final long serialVersionUID = 1L;
        public ButtonRenderer() {
            setOpaque(true);
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            setForeground(BUTTONFG_DARK);
            setBackground(BUTTONSEARCH_BG);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            setText((value == null) ? " " : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        private static final long serialVersionUID = 1L;
        protected JButton button;
        private String label;
        private boolean isPushed;
        private int currentRow;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.setForeground(BUTTONFG_DARK);
            button.setBackground(BUTTONSEARCH_BG);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table, Object value, boolean isSelected, int row, int column) {
            label = (value == null) ? " " : value.toString();
            button.setText(label);
            isPushed = true;
            currentRow = row;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                showOrphanageDetails(currentRow);
            }
            isPushed = false;
            return label;
        }
    }

    // Placeholder model class
    static class OrphanageInfo {
        private String name;
        private String address;
        private String contactPerson;
        private String currentNeeds;

        public OrphanageInfo(
                String name, String address, String contactPerson, String currentNeeds) {
            this.name = name;
            this.address = address;
            this.contactPerson = contactPerson;
            this.currentNeeds = currentNeeds;
        }

        public String getName() {
            return name;
        }

        public String getAddress() {
            return address;
        }

        public String getContactPerson() {
            return contactPerson;
        }

        public String getCurrentNeeds() {
            return currentNeeds;
        }
    }
}
```
------------------------------------------------------------
### File: OrphanageDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrphanageDashboardPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(OrphanageDashboardPanel.class);

    private final Runnable logoutAction;
    private JLabel orphanageNameLabel;
    private JLabel userLabel;
    private JLabel statActiveRequests;
    private JLabel statPendingDonations;
    private JLabel statActiveVolunteers;
    private JTable resourceTable;
    private DefaultTableModel tableModel;
    private JTabbedPane tabbedPane;

    private User staffUser;
    private Orphanage orphanage;
    private OrphanageService orphanageService;

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BGSELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLECOLOR_DARK;
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color ACCENTCOLORORANGE = new Color(230, 145, 56);
    private static final Color ACCENTCOLOR_BLUE = new Color(72, 149, 239);
    private static final Color ACCENTCOLOR_GREEN = new Color(87, 190, 106);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);

    public OrphanageDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        this.orphanageService = new OrphanageService();
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize OrphanageDashboardPanel", e);
        }
        logger.debug("OrphanageDashboard initialized");
    }

    public void setStaffUser(User user) {
        this.staffUser = new User(user);
        logger.info("Staff user set: {}", user.getUsername());
        loadOrphanageData();
        refreshUI();
        if (tabbedPane != null) {
            tabbedPane.setSelectedIndex(0);
        }
    }

    private void loadOrphanageData() {
        if (staffUser == null) {
            logger.warn("Attempted to load orphanage data with null user");
            return;
        }
        try {
            orphanage = orphanageService.getOrphanageForStaff(staffUser);
            if (orphanage == null) {
                logger.error("No orphanage found for user: {}", staffUser.getUsername());
                JOptionPane.showMessageDialog(
                        this,
                        "No orphanage is associated with your account.\n"
                                + "Please contact the system administrator.",
                        "Configuration Error",
                        JOptionPane.ERROR_MESSAGE);
                logoutAction.run();
            } else {
                logger.info("Loaded orphanage: {}", orphanage.getName());
            }
        } catch (ServiceException e) {
            logger.error("Failed to load orphanage data", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Error loading orphanage data:\n" + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            logoutAction.run();
        }
    }

    private void refreshUI() {
        if (orphanage != null && orphanageNameLabel != null) {
            orphanageNameLabel.setText(orphanage.getName());
        }
        if (staffUser != null && userLabel != null) {
            userLabel.setText("User: " + staffUser.getUsername());
        }
        loadResourceRequests();
        updateStatistics();
    }

    private void updateStatistics() {
        if (orphanage == null) return;
        try {
            List<ResourceRequest> requests =
                    orphanageService.getRequestsForOrphanage(orphanage.getOrphanageID());
            long activeRequests =
                    requests.stream().filter(r -> "Open".equalsIgnoreCase(r.getCategory())).count();
            long pendingDonations = 0;

            if (statActiveRequests != null)
                statActiveRequests.setText(String.valueOf(activeRequests));
            if (statPendingDonations != null)
                statPendingDonations.setText(String.valueOf(pendingDonations));
            if (statActiveVolunteers != null) statActiveVolunteers.setText("8");
        } catch (ServiceException e) {
            logger.error("Failed to update statistics", e);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        add(createHeaderPanel(), BorderLayout.NORTH);
        tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2302");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(135, 206, 250));
        orphanageNameLabel = new JLabel("Loading...");
        orphanageNameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        orphanageNameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(orphanageNameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("User: Loading...");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(
                e -> {
                    int confirm =
                            JOptionPane.showConfirmDialog(
                                    this,
                                    "Are you sure you want to logout?",
                                    "Confirm Logout",
                                    JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        logger.info("User logged out: {}", staffUser.getUsername());
                        logoutAction.run();
                    }
                });
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane pane = new JTabbedPane();
        pane.setOpaque(false);
        pane.setForeground(TAB_FG);
        pane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        pane.setUI(
                new javax.swing.plaf.basic.BasicTabbedPaneUI() {
                    @Override
                    protected void installDefaults() {
                        super.installDefaults();
                        lightHighlight = TAB_BGSELECTED;
                        shadow = BORDERCOLOR_DARK;
                        darkShadow = DARKBGEND;
                        focus = TAB_BGSELECTED;
                    }

                    @Override
                    protected void paintTabBackground(
                            Graphics g, int p, int i, int x, int y, int w, int h, boolean s) {
                        g.setColor(s ? TAB_BGSELECTED : TAB_BG_UNSELECTED);
                        g.fillRoundRect(x, y, w, h + 5, 5, 5);
                    }

                    @Override
                    protected void paintTabBorder(
                            Graphics g, int p, int i, int x, int y, int w, int h, boolean s) {}

                    @Override
                    protected void paintContentBorder(
                            Graphics g, int tabPlacement, int selectedIndex) {
                        int width = tabPane.getWidth();
                        int height = tabPane.getHeight();
                        Insets insets = tabPane.getInsets();
                        int tabAreaHeight =
                                calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
                        int x = insets.left;
                        int y = insets.top + tabAreaHeight - 1;
                        int w = width - insets.right - insets.left;
                        int h = height - insets.top - insets.bottom - tabAreaHeight;
                        g.setColor(BORDERCOLOR_DARK);
                        g.drawRect(x, y, w - 1, h - 1);
                    }
                });
        pane.addTab("Overview", createOverviewTab());
        pane.addTab("Resource Requests", createResourceRequestsTab());
        pane.addTab("Orphanage Profile", createProfileTab());
        return pane;
    }

    private JPanel createOverviewTab() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 25, 25, 25));

        statActiveRequests = new JLabel("0", SwingConstants.CENTER);
        statPendingDonations = new JLabel("0", SwingConstants.CENTER);
        statActiveVolunteers = new JLabel("0", SwingConstants.CENTER);

        JPanel activeRequestsCard =
                createStatCard("Active Requests", statActiveRequests, ACCENTCOLORORANGE);
        JPanel pendingDonationsCard =
                createStatCard("Pending Donations", statPendingDonations, ACCENTCOLOR_BLUE);
        JPanel activeVolunteersCard =
                createStatCard("Active Volunteers", statActiveVolunteers, ACCENTCOLOR_GREEN);

        panel.add(activeRequestsCard);
        panel.add(pendingDonationsCard);
        panel.add(activeVolunteersCard);
        return panel;
    }

    private JPanel createStatCard(String title, JLabel valueLabel, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout(5, 5));
        card.setBackground(TAB_BG_UNSELECTED);
        card.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),
                        new EmptyBorder(15, 20, 15, 20)));

        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 36));
        valueLabel.setForeground(TITLECOLOR_DARK);
        card.add(valueLabel, BorderLayout.CENTER);

        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        titleLabel.setForeground(TEXTCOLOR_DARK);
        card.add(titleLabel, BorderLayout.SOUTH);

        return card;
    }

    private JPanel createResourceRequestsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        // Add toolbar
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT));
        toolbar.setOpaque(false);
        JButton btnNewRequest = new JButton("New Request");
        styleActionButton(btnNewRequest, "Create a new resource request");
        toolbar.add(btnNewRequest);
        panel.add(toolbar, BorderLayout.NORTH);

        // Create table
        String[] columnNames = {"Item", "Category", "Quantity", "Priority", "Status", "Date"};
        tableModel = new DefaultTableModel(columnNames, 0);
        resourceTable = new JTable(tableModel);
        styleTable(resourceTable);

        JScrollPane scrollPane = new JScrollPane(resourceTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private void loadResourceRequests() {
        if (tableModel != null) {
            tableModel.setRowCount(0);
            // Add sample data
            tableModel.addRow(
                    new Object[] {
                        "School Supplies", "Education", "50", "High", "Open", "2025-01-15"
                    });
            tableModel.addRow(
                    new Object[] {
                        "Winter Clothes", "Clothing", "30", "Medium", "Partial", "2025-01-10"
                    });
        }
    }

    private JPanel createProfileTab() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Add form fields
        gbc.gridx = 0;
        gbc.gridy = 0;
        JLabel lblName = new JLabel("Orphanage Name:");
        styleFormLabel(lblName);
        formPanel.add(lblName, gbc);

        gbc.gridx = 1;
        JTextField txtName = new JTextField(20);
        styleTextField(txtName);
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        JLabel lblAddress = new JLabel("Address:");
        styleFormLabel(lblAddress);
        formPanel.add(lblAddress, gbc);

        gbc.gridx = 1;
        JTextArea txtAddress = new JTextArea(3, 20);
        styleTextArea(txtAddress);
        formPanel.add(new JScrollPane(txtAddress), gbc);

        panel.add(formPanel, BorderLayout.NORTH);
        return panel;
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int o) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int o) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        return b;
                    }
                });
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()),
                        new EmptyBorder(6, 12, 6, 12)));
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        field.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),
                        new EmptyBorder(4, 6, 4, 6)));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleTextArea(JTextArea area) {
        area.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        area.setForeground(INPUTFG_DARK);
        area.setBackground(INPUTBG_DARK);
        area.setBorder(new EmptyBorder(4, 6, 4, 6));
        area.setCaretColor(Color.LIGHT_GRAY);
    }
}
```
------------------------------------------------------------
### File: RegistrationPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.User;
import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.service.ServiceException;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.function.Supplier;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UI panel for user registration. This class is responsible for gathering user input and passing it
 * to the RegistrationService for validation and persistence.
 *
 * <p>PAT Rubric Coverage: - 3.2: Strict separation of UI from logic. - 3.3: Communicates with the
 * service layer via the performRegistration() method. - 3.6: Displays user-friendly error messages
 * from ServiceException. - 3.8: Provides a clear, role-aware registration form.
 */
public class RegistrationPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(RegistrationPanel.class);

    private final Runnable backAction;
    private final Runnable loginAction;
    private final Supplier<String> roleSupplier;
    private String currentRole = "User";

    // Backend service reference
    private final RegistrationService registrationService;

    // Input fields
    private final JTextField txtUsername;
    private final JTextField txtEmail;
    private final JTextField txtFullName;
    private final JPasswordField txtPassword;
    private final JPasswordField txtConfirmPassword;
    private final JComboBox<String> cmbOrphanage;
    private final JCheckBox chkTerms;

    // UI elements that update by role
    private final JLabel lblTitle;
    private final JLabel lblRoleIcon;
    private final JPanel orphanagePanel;

    // Colors
    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTONREGISTER_BG = new Color(60, 179, 113);
    private static final Color BUTTONREGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOXCOLOR = new Color(180, 180, 180);

    public RegistrationPanel(
            Runnable backAction, Runnable loginAction, Supplier<String> roleSupplier) {
        this.backAction = backAction;
        this.loginAction = loginAction;
        this.roleSupplier = roleSupplier;
        this.registrationService = new RegistrationService();
        setLayout(new BorderLayout());

        // Initialize components
        txtUsername = new JTextField(25);
        txtEmail = new JTextField(25);
        txtFullName = new JTextField(25);
        txtPassword = new JPasswordField(25);
        txtConfirmPassword = new JPasswordField(25);
        cmbOrphanage = new JComboBox<>();
        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        lblTitle = new JLabel("Register as " + currentRole);
        lblRoleIcon = new JLabel("?");
        orphanagePanel = new JPanel(new BorderLayout(5, 0));

        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize RegistrationPanel", e);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        var g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Title & Role Icon
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLECOLOR_DARK);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLECOLOR_DARK);
        titlePanel.add(lblRoleIcon);
        titlePanel.add(lblTitle);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 5, 20, 5);
        formPanel.add(titlePanel, gbc);

        // Input Fields
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5);

        int gridY = 1;
        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername);
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail);
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName);
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword);
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword);

        // Orphanage Selection (for staff)
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        styleComboBox(cmbOrphanage);
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false);

        // Terms Checkbox
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        formPanel.add(chkTerms, gbc);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        btnRegister.setBackground(BUTTONREGISTER_BG);
        btnRegister.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnRegister.setBackground(BUTTONREGISTER_HOVER_BG);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnRegister.setBackground(BUTTONREGISTER_BG);
                    }
                });
        btnRegister.addActionListener(e -> performRegistration());

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTONBG_DARK.darker());
        btnBack.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnBack.setBackground(BUTTONHOVER_BG_DARK);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnBack.setBackground(BUTTONBG_DARK.darker());
                    }
                });
        btnBack.addActionListener(e -> backAction.run());

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        formPanel.add(buttonPanel, gbc);

        // Scroll
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        add(scrollPane, BorderLayout.CENTER);
    }

    private void performRegistration() {
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(
                    this,
                    "You must agree to the Terms of Service.",
                    "Registration Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        String password = new String(txtPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());
        String selectedOrphanage =
                orphanagePanel.isVisible() ? (String) cmbOrphanage.getSelectedItem() : null;

        try {
            logger.info("Attempting registration for user: " + username);
            User newUser =
                    registrationService.registerUser(
                            username,
                            email,
                            fullName,
                            password,
                            confirmPassword,
                            currentRole,
                            selectedOrphanage);

            logger.info("Registration successful for user: " + newUser.getUsername());
            JOptionPane.showMessageDialog(
                    this,
                    "Registration successful for "
                            + newUser.getUsername()
                            + "!\nYou can now log in.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            loginAction.run();

        } catch (ServiceException ex) {
            logger.warn("Registration failed for user " + username + ": " + ex.getMessage());
            JOptionPane.showMessageDialog(
                    this, ex.getMessage(), "Registration Failed", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        currentRole = roleSupplier.get();
        lblTitle.setText("Register as " + currentRole);
        updateRoleSpecificUI();
    }

    private void updateRoleSpecificUI() {
        switch (currentRole) {
            case "Donor" -> {
                lblRoleIcon.setText("\u2764");
                lblRoleIcon.setForeground(new Color(255, 105, 180));
            }
            case "OrphanageStaff" -> {
                lblRoleIcon.setText("\u2302");
                lblRoleIcon.setForeground(new Color(135, 206, 250));
            }
            case "Volunteer" -> {
                lblRoleIcon.setText("\u2605");
                lblRoleIcon.setForeground(new Color(255, 215, 0));
            }
            default -> {
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLECOLOR_DARK);
            }
        }

        boolean isStaff = "OrphanageStaff".equals(currentRole);
        orphanagePanel.setVisible(isStaff);
        if (isStaff) {
            loadAvailableOrphanages();
        }
        revalidate();
        repaint();
    }

    private void loadAvailableOrphanages() {
        try {
            List<Orphanage> orphanages = registrationService.getUnassignedOrphanages();
            cmbOrphanage.removeAllItems();
            cmbOrphanage.addItem("Select Orphanage...");
            for (Orphanage o : orphanages) {
                cmbOrphanage.addItem(o.getName());
            }
        } catch (ServiceException e) {
            logger.error("Could not load orphanages for registration form", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Could not load orphanages: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Styling
    private void addFormField(
            JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.fill = GridBagConstraints.NONE;
        panel.add(label, gbc);

        styleTextField(field);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(field, gbc);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(
                new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding));

        if (field instanceof JTextField textField) {
            textField.setCaretColor(Color.LIGHT_GRAY);
        } else if (field instanceof JPasswordField passwordField) {
            passwordField.setCaretColor(Color.LIGHT_GRAY);
        }
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));
    }

    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOXCOLOR);
        checkBox.setOpaque(false);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        Border line = BorderFactory.createLineBorder(BUTTONBG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
    }
}
```
------------------------------------------------------------
### File: VolunteerDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VolunteerDashboardPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(VolunteerDashboardPanel.class);

    private final Runnable logoutAction; // To store the logged-in user's data
    private User currentUser; // To store the logged-in user's data
    private JLabel userLabel; // To update the user's name on the display

    // --- Colors (Same as AdminDashboardPanel) ---
    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color BUTTONAPPLY_BG = new Color(87, 190, 106);
    private static final Color BUTTONAPPLY_HOVER_BG = new Color(97, 200, 116);

    public VolunteerDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize VolunteerDashboardPanel", e);
        }
    }

    /**
     * Sets the currently logged-in volunteer user for this panel. This method updates the UI with
     * the user's information.
     *
     * @param user The logged-in volunteer.
     */
    public void setVolunteerUser(User user) {
        this.currentUser = new User(user);
        if (user != null) {
            this.userLabel.setText("User: " + user.getUsername());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // --- Header Panel ---
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);

        // --- Main Content Area (Search + Table + Status) ---
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));

        // --- Search/Filter Panel ---
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);

        // --- Opportunities Table ---
        JTable opportunitiesTable = createOpportunitiesTable();
        JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);

        // --- Application Status Panel (Placeholder) ---
        JPanel statusPanel = createStatusPanel();
        contentPanel.add(statusPanel, BorderLayout.SOUTH);

        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));

        // Left side: Role Icon and Title
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2605"); // Star symbol
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0)); // Gold color
        JLabel nameLabel = new JLabel("Volunteer Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        // Right side: User info and Logout Button
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);

        userLabel = new JLabel("Welcome, Volunteer");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);

        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43)); // Reddish logout
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(e -> logoutAction.run());

        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);

        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);

        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"}; // Placeholders
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);

        JLabel lblFilterSkills = new JLabel("Skills:");
        styleFormLabel(lblFilterSkills);
        JTextField txtSkills = new JTextField(15); // Text field for skills keywords
        styleTextField(txtSkills);

        JLabel lblFilterTime = new JLabel("Commitment:");
        styleFormLabel(lblFilterTime);
        String[] times = {
            "Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"
        }; // Placeholders
        JComboBox<String> cmbTime = new JComboBox<>(times);
        styleComboBox(cmbTime);

        JButton btnSearch = new JButton("Find Opportunities");
        styleActionButton(btnSearch, "Search for volunteer roles matching criteria");
        btnSearch.addActionListener(
                e ->
                        JOptionPane.showMessageDialog(
                                this,
                                "Search logic not implemented.",
                                "Search",
                                JOptionPane.INFORMATION_MESSAGE));

        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterSkills);
        panel.add(txtSkills);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterTime);
        panel.add(cmbTime);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);

        return panel;
    }

    private JTable createOpportunitiesTable() {
        String[] columnNames = {
            "Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Action"
        };
        Object[][] data = {
            {
                "Hope Children's Home",
                "Weekend Tutor",
                "City A",
                "Teaching, Patience",
                "Weekends",
                "Apply"
            },
            {
                "Bright Future Orphanage",
                "Event Helper",
                "City B",
                "Organizing, Energetic",
                "Event-Based",
                "Apply"
            },
            {
                "Little Angels Shelter",
                "After-School Care",
                "City A",
                "Childcare, First Aid",
                "Weekdays",
                "Applied"
            },
            {"Sunshine House", "Gardening Assistant", "Region C", "Gardening", "Flexible", "Apply"},
            {
                "Hope Children's Home",
                "Reading Buddy",
                "City A",
                "Reading, Communication",
                "Weekdays",
                "Apply"
            }
        };

        JTable table =
                new JTable(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return column == 5 && "Apply".equals(getValueAt(row, column));
                    }
                };

        styleTable(table);

        // Add button renderer/editor for the "Action" column
        table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer(BUTTONAPPLY_BG));
        table.getColumnModel()
                .getColumn(5)
                .setCellEditor(
                        new ButtonEditor(
                                new JCheckBox(),
                                BUTTONAPPLY_BG,
                                () -> {
                                    int selectedRow =
                                            table.convertRowIndexToModel(table.getEditingRow());
                                    String oppName =
                                            (String) table.getModel().getValueAt(selectedRow, 1);
                                    String orphName =
                                            (String) table.getModel().getValueAt(selectedRow, 0);
                                    JOptionPane.showMessageDialog(
                                            this,
                                            "Apply for: "
                                                    + oppName
                                                    + " at "
                                                    + orphName
                                                    + "\n(Functionality not implemented)",
                                            "Apply",
                                            JOptionPane.INFORMATION_MESSAGE);

                                    // Example to update status using DefaultTableModel:
                                    // ((DefaultTableModel) table.getModel()).setValueAt("Applied",
                                    // selectedRow, 5);
                                }));

        // Adjust column widths
        table.getColumnModel().getColumn(0).setPreferredWidth(150); // Orphanage
        table.getColumnModel().getColumn(1).setPreferredWidth(150); // Opportunity
        table.getColumnModel().getColumn(2).setPreferredWidth(100); // Location
        table.getColumnModel().getColumn(3).setPreferredWidth(180); // Skills
        table.getColumnModel().getColumn(4).setPreferredWidth(120); // Time
        table.getColumnModel().getColumn(5).setPreferredWidth(90); // Action

        return table;
    }

    private JPanel createStatusPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panel.setOpaque(false);
        panel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(
                                1, 0, 0, 0, BORDERCOLOR_DARK), // Top border separator
                        new EmptyBorder(10, 5, 5, 5) // Padding
                        ));

        JLabel lblStatus = new JLabel("Status: 3 applications pending, 1 opportunity active");
        lblStatus.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 13));
        lblStatus.setForeground(TEXTCOLOR_DARK);
        panel.add(lblStatus);

        return panel;
    }

    // --- Styling Helpers ---
    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        Border padding = new EmptyBorder(4, 6, 4, 6);
        field.setBorder(
                new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));

        for (Component c : comboBox.getComponents()) {
            if (c instanceof JButton) {
                ((JButton) c).setBackground(BUTTONBG_DARK);
                ((JButton) c).setBorder(BorderFactory.createEmptyBorder());
                break;
            }
        }

        Object p = comboBox.getUI().getAccessibleChild(comboBox, 0);
        if (p instanceof JPopupMenu) {
            JPopupMenu pm = (JPopupMenu) p;
            pm.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
            for (Component comp : pm.getComponents()) {
                if (comp instanceof JScrollPane) {
                    JScrollPane sp = (JScrollPane) comp;
                    sp.getViewport().setBackground(INPUTBG_DARK);
                    applyScrollbarUI(sp.getVerticalScrollBar());
                    Component l = sp.getViewport().getView();
                    if (l instanceof JList) {
                        @SuppressWarnings("rawtypes")
                        JList list = (JList) l;
                        list.setBackground(INPUTBG_DARK);
                        list.setForeground(INPUTFG_DARK);
                        list.setSelectionBackground(BUTTONBG_DARK);
                        list.setSelectionForeground(BUTTONFG_DARK);
                    }
                }
            }
        }
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0, 1));

        JTableHeader h = table.getTableHeader();
        h.setBackground(TABLEHEADER_BG);
        h.setForeground(TABLEHEADER_FG);
        h.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        h.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        h.setReorderingAllowed(true);
        h.setResizingAllowed(true);

        DefaultTableCellRenderer r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.LEFT);
        r.setVerticalAlignment(SwingConstants.CENTER);
        r.setBorder(new EmptyBorder(2, 5, 2, 5));
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(r);
        }
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int orientation) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int orientation) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        b.setMaximumSize(new Dimension(0, 0));
                        b.setMinimumSize(new Dimension(0, 0));
                        return b;
                    }

                    @Override
                    protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
                        g.setColor(thumbColor);
                        g.fillRect(r.x, r.y, r.width, r.height);
                    }

                    @Override
                    protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
                        g.setColor(trackColor);
                        g.fillRect(r.x, r.y, r.width, r.height);
                    }
                });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), padding));
        btn.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        if (btn.getBackground().equals(BUTTONBG_DARK)) {
                            btn.setBackground(BUTTONHOVER_BG_DARK);
                        }
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        if (btn.getBackground().equals(BUTTONHOVER_BG_DARK)) {
                            btn.setBackground(BUTTONBG_DARK);
                        }
                    }
                });
    }

    // --- Inner classes for Table Button ---
    static class ButtonRenderer extends JButton implements javax.swing.table.TableCellRenderer {
        private final Color defaultBg;

        public ButtonRenderer(Color background) {
            setOpaque(true);
            this.defaultBg = background;
            setForeground(BUTTONFG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable t, Object v, boolean s, boolean f, int r, int c) {
            setText(v == null ? "" : v.toString());
            setBackground(s ? defaultBg.brighter() : defaultBg);
            return this;
        }
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private final Runnable action;
        private final Color bgColor;

        public ButtonEditor(JCheckBox c, Color bg, Runnable act) {
            super(c);
            this.action = act;
            this.bgColor = bg;
            button = new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTONFG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable t, Object v, boolean s, int r, int c) {
            label = (v == null) ? "" : v.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed && action != null) {
                action.run();
            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
}
```
------------------------------------------------------------
### Resource: frmHome.png
[Binary image file (28417 bytes) — not shown inline]
------------------------------------------------------------
### Resource: home.png
[Binary image file (25487 bytes) — not shown inline]

================================================================================
## 6. SUMMARY / STATS
================================================================================

- Total files scanned: 16
- Java files: 9
- Backup (.bak) files: 4
- Images / binary: 2

Generated by updateGuis.py
