# 🔍 ORPHANAGEHUB CONFIGURATION QUERY
Generated: 2025-09-06 20:50:58
Mode: current
Keyword: gui
================================================================================
## GUI FILES
Found: 11 files
================================================================================

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
Source: current | Size: 18795 bytes
```java
// src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.Donation;
import com.orphanagehub.model.Orphanage;
import com.orphanagehub.dao.OrphanageDAO;
import com.orphanagehub.service.DonorService;
import io.vavr.control.Try;
import io.vavr.collection.List;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class DonorDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final String donorUsername = "donor_user";
    private final DonorService donorService = new DonorService();
    private final OrphanageDAO orphanageDAO = new OrphanageDAO();
    private JTable resultsTable;
    private DefaultTableModel donationModel;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_SEARCH_BG = new Color(72, 149, 239);
    private static final Color BUTTON_SEARCH_HOVER_BG = new Color(92, 169, 249);

    public DonorDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);
        
        resultsTable = createResultsTable();
        JScrollPane scrollPane = new JScrollPane(resultsTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\uD83E\uDEC2");
        iconLabel.setFont(new Font("Segoe UI Symbol", Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Donor Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("User: " + donorUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        
        JLabel lblSearch = new JLabel("Search:");
        styleFormLabel(lblSearch);
        JTextField txtSearch = new JTextField(20);
        styleTextField(txtSearch);
        
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"};
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);
        
        JLabel lblFilterCategory = new JLabel("Need Category:");
        styleFormLabel(lblFilterCategory);
        String[] categories = {"Any Category", "Food", "Clothing", "Education", "Medical", "Funding"};
        JComboBox<String> cmbCategory = new JComboBox<>(categories);
        styleComboBox(cmbCategory);
        
        JButton btnSearch = new JButton("Apply Filters");
        styleActionButton(btnSearch, "Find orphanages or requests matching criteria");
        btnSearch.setBackground(BUTTON_SEARCH_BG);
        btnSearch.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_BG); }
        });
        btnSearch.addActionListener(e -> loadOrphanageData());
        
        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterCategory);
        panel.add(cmbCategory);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        
        return panel;
    }

    private void loadOrphanageData() {
        // Use Try for functional error handling
        Try<List<Orphanage>> orphanagesTry = orphanageDAO.findAll()
            .map(List::ofAll);
            
        orphanagesTry
            .onSuccess(orphanages -> {
                donationModel.setRowCount(0);
                orphanages.forEach(o -> 
                    donationModel.addRow(new Object[]{
                        o.name(),  // FIXED: Use name() instead of orphanageName()
                        o.address(),
                        "Various Needs", // This would come from resource requests
                        "View Details"
                    })
                );
            })
            .onFailure(ex -> {
                JOptionPane.showMessageDialog(this, 
                    "Failed to load orphanages: " + ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            });
    }

    private JTable createResultsTable() {
        String[] columnNames = {"Orphanage Name", "Location", "Key Needs", "Actions"};
        Object[][] data = {
            {"Hope Children's Home", "City A", "Food, Winter Clothing", "View Details"},
            {"Bright Future Orphanage", "City B", "School Supplies, Funding", "View Details"},
            {"Little Angels Shelter", "City A", "Medical Supplies", "View Details"},
            {"Sunshine House", "Region C", "Food, Volunteers", "View Details"},
            {"New Dawn Center", "City B", "Clothing (All Ages)", "View Details"}
        };
        
        donationModel = new DefaultTableModel(data, columnNames);
        JTable table = new JTable(donationModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 3; }
        };
        styleTable(table);
        
        table.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer(BUTTON_SEARCH_BG));
        table.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox(), BUTTON_SEARCH_BG, () -> {
            int selectedRow = table.convertRowIndexToModel(table.getEditingRow());
            String orphanageName = (String) table.getModel().getValueAt(selectedRow, 0);
            JOptionPane.showMessageDialog(this, "View Details for: " + orphanageName, "View Details", JOptionPane.INFORMATION_MESSAGE);
        }));
        
        table.getColumnModel().getColumn(0).setPreferredWidth(200);
        table.getColumnModel().getColumn(1).setPreferredWidth(120);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(120);
        
        return table;
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JTextField field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p = new EmptyBorder(4, 6, 4, 6); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1), p)); 
        field.setCaretColor(Color.LIGHT_GRAY); 
    }
    
    private void styleComboBox(JComboBox<?> comboBox) { 
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        comboBox.setForeground(INPUT_FG_DARK); 
        comboBox.setBackground(INPUT_BG_DARK); 
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1)); 
        
        Object p = comboBox.getUI().getAccessibleChild(comboBox, 0); 
        if (p instanceof JPopupMenu) {
            JPopupMenu pm = (JPopupMenu) p;
            pm.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
            for (Component comp : pm.getComponents()) {
                if (comp instanceof JScrollPane) {
                    JScrollPane sp = (JScrollPane) comp;
                    sp.getViewport().setBackground(INPUT_BG_DARK);
                    applyScrollbarUI(sp.getVerticalScrollBar()); 
                    Component l = sp.getViewport().getView(); 
                    if (l instanceof JList) {
                        ((JList<?>) l).setBackground(INPUT_BG_DARK);
                        ((JList<?>) l).setForeground(INPUT_FG_DARK);
                        ((JList<?>) l).setSelectionBackground(BUTTON_BG_DARK);
                        ((JList<?>) l).setSelectionForeground(BUTTON_FG_DARK);
                    }
                }
            }
        }
    }
    
    private void styleTable(JTable table) { 
        table.setBackground(TABLE_CELL_BG); 
        table.setForeground(TABLE_CELL_FG); 
        table.setGridColor(TABLE_GRID_COLOR); 
        table.setRowHeight(28); 
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        table.setFillsViewportHeight(true); 
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG); 
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG); 
        table.setShowGrid(true); 
        table.setIntercellSpacing(new Dimension(0, 1)); 
        
        JTableHeader h = table.getTableHeader(); 
        h.setBackground(TABLE_HEADER_BG); 
        h.setForeground(TABLE_HEADER_FG); 
        h.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14)); 
        h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        h.setReorderingAllowed(true); 
        h.setResizingAllowed(true); 
        
        DefaultTableCellRenderer r = new DefaultTableCellRenderer(); 
        r.setHorizontalAlignment(SwingConstants.LEFT); 
        r.setVerticalAlignment(SwingConstants.CENTER); 
        r.setBorder(new EmptyBorder(2, 5, 2, 5)); 
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(r);
        } 
    }
    
    private void styleScrollPane(JScrollPane scrollPane) { 
        scrollPane.setOpaque(false); 
        scrollPane.getViewport().setOpaque(false); 
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        applyScrollbarUI(scrollPane.getVerticalScrollBar()); 
        applyScrollbarUI(scrollPane.getHorizontalScrollBar()); 
    }
    
    private void applyScrollbarUI(JScrollBar scrollBar) { 
        scrollBar.setUI(new BasicScrollBarUI() { 
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK; 
                this.trackColor = DARK_BG_END;
            } 
            @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); } 
            @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); } 
            private JButton createZeroButton() {
                JButton b = new JButton();
                b.setPreferredSize(new Dimension(0, 0));
                b.setMaximumSize(new Dimension(0, 0));
                b.setMinimumSize(new Dimension(0, 0));
                return b;
            } 
            @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
                g.setColor(thumbColor);
                g.fillRect(r.x, r.y, r.width, r.height);
            } 
            @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
                g.setColor(trackColor);
                g.fillRect(r.x, r.y, r.width, r.height);
            } 
        }); 
        scrollBar.setUnitIncrement(16); 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        btn.setBackground(BUTTON_BG_DARK); 
        Border p = new EmptyBorder(6, 12, 6, 12); 
        btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()), p)); 
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        }); 
    }

    static class ButtonRenderer extends JButton implements TableCellRenderer {
        private final Color defaultBg;
        
        public ButtonRenderer(Color background) {
            setOpaque(true);
            this.defaultBg = background;
            setForeground(BUTTON_FG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
        }
        
        @Override 
        public Component getTableCellRendererComponent(JTable t, Object v, boolean s, boolean f, int r, int c) {
            setText((v == null) ? "" : v.toString());
            setBackground(s ? defaultBg.brighter() : defaultBg);
            return this;
        }
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private final Runnable action;
        private final Color bgColor;
        
        public ButtonEditor(JCheckBox c, Color bg, Runnable act) {
            super(c);
            this.action = act;
            this.bgColor = bg;
            button = new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTON_FG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.addActionListener(e -> fireEditingStopped());
        }
        
        @Override 
        public Component getTableCellEditorComponent(JTable t, Object v, boolean s, int r, int c) {
            label = (v == null) ? "" : v.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }
        
        @Override 
        public Object getCellEditorValue() {
            if (isPushed && action != null) {
                action.run();
            }
            isPushed = false;
            return label;
        }
        
        @Override 
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }
        
        @Override 
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
Source: current | Size: 15623 bytes
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AdminService;
import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.function.BiConsumer;

public class AdminDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final AdminService adminService;
    private DefaultTableModel verificationModel;
    private DefaultTableModel userModel;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPROVE_BG = new Color(60, 179, 113);
    private static final Color BUTTON_APPROVE_HOVER_BG = new Color(70, 190, 123);
    private static final Color BUTTON_REJECT_BG = new Color(192, 57, 43);
    private static final Color BUTTON_REJECT_HOVER_BG = new Color(231, 76, 60);
    private static final Color BUTTON_SUSPEND_BG = BUTTON_REJECT_BG;
    private static final Color BUTTON_SUSPEND_HOVER_BG = BUTTON_REJECT_HOVER_BG;

    public AdminDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.adminService = new AdminService();
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
        loadData();
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2699");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(TITLE_COLOR_DARK);
        JLabel nameLabel = new JLabel("Administrator Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        
        String adminUsername = SessionManager.getInstance()
            .getAttribute("currentUser")
            .map(Object::toString)
            .getOrElse("Admin");
        
        JLabel userLabel = new JLabel("Admin User: " + adminUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(BUTTON_REJECT_BG);
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_BG); }
        });
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo("Home");
        });
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        
        tabbedPane.addTab("Orphanage Verification", createVerificationTab());
        tabbedPane.addTab("User Management", createUserManagementTab());
        tabbedPane.addTab("System Overview", createSystemOverviewTab());
        
        return tabbedPane;
    }

    private JPanel createVerificationTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        String[] columnNames = {"Orphanage Name", "Contact", "Email", "Registered", "Status", "Actions"};
        verificationModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(verificationModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createUserManagementTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        searchPanel.setOpaque(false);
        
        JLabel lblSearchUser = new JLabel("Search User:");
        JTextField txtUserSearch = new JTextField(20);
        JLabel lblUserRole = new JLabel("Role:");
        JComboBox<String> cmbUserRole = new JComboBox<>(new String[]{"Any Role", "Admin", "OrphanageStaff", "Donor", "Volunteer"});
        JButton btnUserSearch = new JButton("Search");
        
        styleFormLabel(lblSearchUser);
        styleTextField(txtUserSearch);
        styleFormLabel(lblUserRole);
        styleComboBox(cmbUserRole);
        styleActionButton(btnUserSearch, "Find users");
        
        searchPanel.add(lblSearchUser);
        searchPanel.add(txtUserSearch);
        searchPanel.add(lblUserRole);
        searchPanel.add(cmbUserRole);
        searchPanel.add(btnUserSearch);
        panel.add(searchPanel, BorderLayout.NORTH);
        
        String[] columnNames = {"Username", "Email", "Role", "Status", "Registered", "Actions"};
        userModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(userModel) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createSystemOverviewTab() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 30, 25, 30));
        
        panel.add(createOverviewStat("Total Registered Users:", "157"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Verified Orphanages:", "34"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Pending Verification:", "3"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Open Resource Requests:", "48"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Active Volunteers:", "22"));
        panel.add(Box.createVerticalGlue());
        
        return panel;
    }

    private Component createOverviewStat(String labelText, String valueText) {
        JPanel statPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statPanel.setOpaque(false);
        JLabel label = new JLabel(labelText);
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 16));
        label.setForeground(TEXT_COLOR_DARK);
        JLabel value = new JLabel(valueText);
        value.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        value.setForeground(TITLE_COLOR_DARK);
        statPanel.add(label);
        statPanel.add(value);
        return statPanel;
    }

    private void loadData() {
        // Load mock data for verification
        verificationModel.setRowCount(0);
        verificationModel.addRow(new Object[]{"New Hope Center", "Alice Smith", "alice@newhope.org", "2024-05-10", "Pending", "Actions"});
        verificationModel.addRow(new Object[]{"Future Stars", "Bob Jones", "bob@futurestars.net", "2024-05-08", "Pending", "Actions"});
        verificationModel.addRow(new Object[]{"Safe Haven Kids", "Charlie P.", "contact@safehaven.com", "2024-04-20", "Verified", "Actions"});
        
        // Load mock data for users
        userModel.setRowCount(0);
        userModel.addRow(new Object[]{"staff_user", "staff@example.com", "OrphanageStaff", "Active", "2024-01-15", "Actions"});
        userModel.addRow(new Object[]{"donor_user", "donor@mail.net", "Donor", "Active", "2024-02-10", "Actions"});
        userModel.addRow(new Object[]{"volunteer_A", "vol@provider.org", "Volunteer", "Active", "2024-03-01", "Actions"});
        userModel.addRow(new Object[]{"admin_user", "admin@orphanagehub.com", "Admin", "Active", "2023-10-01", "Actions"});
    }

    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, 
            "Error loading data: " + message, 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JTextField field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p=new EmptyBorder(4,6,4,6); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); 
        field.setCaretColor(Color.LIGHT_GRAY); 
    }
    
    private void styleComboBox(JComboBox<?> comboBox) { 
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        comboBox.setForeground(INPUT_FG_DARK); 
        comboBox.setBackground(INPUT_BG_DARK); 
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1)); 
    }
    
    private void styleTable(JTable table) { 
        table.setBackground(TABLE_CELL_BG); 
        table.setForeground(TABLE_CELL_FG); 
        table.setGridColor(TABLE_GRID_COLOR); 
        table.setRowHeight(28); 
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); 
        table.setFillsViewportHeight(true); 
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG); 
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG); 
        table.setShowGrid(true); 
        table.setIntercellSpacing(new Dimension(0,1)); 
        JTableHeader h=table.getTableHeader(); 
        h.setBackground(TABLE_HEADER_BG); 
        h.setForeground(TABLE_HEADER_FG); 
        h.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); 
        h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
    }
    
    private void styleScrollPane(JScrollPane scrollPane) { 
        scrollPane.setOpaque(false); 
        scrollPane.getViewport().setOpaque(false); 
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); 
        applyScrollbarUI(scrollPane.getVerticalScrollBar()); 
        applyScrollbarUI(scrollPane.getHorizontalScrollBar()); 
    }
    
    private void applyScrollbarUI(JScrollBar scrollBar) { 
        scrollBar.setUI(new BasicScrollBarUI() { 
            @Override protected void configureScrollBarColors(){
                this.thumbColor=BUTTON_BG_DARK; 
                this.trackColor=DARK_BG_END;
            } 
            @Override protected JButton createDecreaseButton(int o){return createZeroButton();} 
            @Override protected JButton createIncreaseButton(int o){return createZeroButton();} 
            private JButton createZeroButton(){
                JButton b=new JButton(); 
                b.setPreferredSize(new Dimension(0,0)); 
                return b;
            } 
        }); 
        scrollBar.setUnitIncrement(16); 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        btn.setBackground(BUTTON_BG_DARK); 
        Border p=new EmptyBorder(6,12,6,12); 
        btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),p)); 
        btn.addMouseListener(new MouseAdapter() { 
            @Override public void mouseEntered(MouseEvent e){
                if(btn.getBackground().equals(BUTTON_BG_DARK)){
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override public void mouseExited(MouseEvent e){
                if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){
                    btn.setBackground(BUTTON_BG_DARK);
                }
            } 
        }); 
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
Source: current | Size: 21309 bytes
```java
package com.orphanagehub.gui;

import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class VolunteerDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    
    private final transient OrphanageHubApp mainApp;
    
    private JLabel userLabel;
    private DefaultTableModel opportunitiesModel;
    private DefaultTableModel applicationsModel;
    private JTextField txtSkills;
    private JComboBox<String> cmbLocation;
    private JComboBox<String> cmbTime;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPLY_BG = new Color(87, 190, 106);
    private static final Color BUTTON_APPLY_HOVER_BG = new Color(97, 200, 116);

    public VolunteerDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.addTab("Browse Opportunities", createBrowseTab());
        tabbedPane.addTab("My Applications", createApplicationsTab());
        tabbedPane.addTab("Profile", createProfileTab());
        add(tabbedPane, BorderLayout.CENTER);
        
        SwingUtilities.invokeLater(() -> {
            updateUserLabel();
            loadOpportunities();
            loadApplications();
        });
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2605");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Volunteer Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("Welcome, Volunteer");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo("Home"));
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private void updateUserLabel() {
        SessionManager.getInstance().getAttribute("currentUser")
            .map(user -> "Welcome, " + user.toString())
            .peek(userLabel::setText)
            .onEmpty(() -> userLabel.setText("Welcome, Volunteer"));
    }

    private JPanel createBrowseTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 15));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 20, 20, 20));
        
        JPanel searchFilterPanel = createSearchFilterPanel();
        panel.add(searchFilterPanel, BorderLayout.NORTH);
        
        String[] columnNames = {"Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Status"};
        opportunitiesModel = new DefaultTableModel(columnNames, 0);
        JTable opportunitiesTable = new JTable(opportunitiesModel);
        styleTable(opportunitiesTable);
        
        opportunitiesTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = opportunitiesTable.getSelectedRow();
                    if (row >= 0) {
                        showApplyDialog(row);
                    }
                }
            }
        });
        
        JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        
        JButton btnApply = new JButton("Apply to Selected");
        styleActionButton(btnApply, "Apply to the selected opportunity");
        btnApply.setBackground(BUTTON_APPLY_BG);
        btnApply.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnApply.setBackground(BUTTON_APPLY_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnApply.setBackground(BUTTON_APPLY_BG); }
        });
        btnApply.addActionListener(e -> {
            int row = opportunitiesTable.getSelectedRow();
            if (row >= 0) {
                showApplyDialog(row);
            } else {
                showErrorMessage("Please select an opportunity to apply");
            }
        });
        
        buttonPanel.add(btnApply);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        
        JLabel lblLocation = new JLabel("Location:");
        styleFormLabel(lblLocation);
        cmbLocation = new JComboBox<>(new String[]{"Any Location", "City A", "City B", "Region C"});
        styleComboBox(cmbLocation);
        
        JLabel lblSkills = new JLabel("Skills:");
        styleFormLabel(lblSkills);
        txtSkills = new JTextField(15);
        styleTextField(txtSkills);
        
        JLabel lblTime = new JLabel("Commitment:");
        styleFormLabel(lblTime);
        cmbTime = new JComboBox<>(new String[]{"Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"});
        styleComboBox(cmbTime);
        
        JButton btnSearch = new JButton("Find Opportunities");
        styleActionButton(btnSearch, "Search for volunteer roles matching criteria");
        btnSearch.addActionListener(e -> performSearch());
        
        panel.add(lblLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblSkills);
        panel.add(txtSkills);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblTime);
        panel.add(cmbTime);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        
        return panel;
    }

    private JPanel createApplicationsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        String[] columnNames = {"Application Date", "Orphanage", "Opportunity", "Status", "Interview Date", "Actions"};
        applicationsModel = new DefaultTableModel(columnNames, 0);
        JTable applicationsTable = new JTable(applicationsModel);
        styleTable(applicationsTable);
        
        JScrollPane scrollPane = new JScrollPane(applicationsTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel statusPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statusPanel.setOpaque(false);
        statusPanel.setBorder(new CompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 0, 0, BORDER_COLOR_DARK),
            new EmptyBorder(10, 5, 5, 5)
        ));
        
        JLabel lblStatus = new JLabel("Total Applications: 0 | Pending: 0 | Accepted: 0 | Rejected: 0");
        lblStatus.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 13));
        lblStatus.setForeground(TEXT_COLOR_DARK);
        statusPanel.add(lblStatus);
        panel.add(statusPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createProfileTab() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField nameField = new JTextField(20);
        JTextField emailField = new JTextField(20);
        JTextArea skillsArea = new JTextArea(3, 20);
        JTextArea experienceArea = new JTextArea(4, 20);
        JComboBox<String> availabilityCombo = new JComboBox<>(new String[]{"Weekends", "Weekdays", "Flexible", "Event-Based"});
        
        int row = 0;
        
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Full Name:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        panel.add(emailField, gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Skills:"), gbc);
        gbc.gridx = 1;
        panel.add(new JScrollPane(skillsArea), gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Experience:"), gbc);
        gbc.gridx = 1;
        panel.add(new JScrollPane(experienceArea), gbc);
        
        row++;
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Availability:"), gbc);
        gbc.gridx = 1;
        panel.add(availabilityCombo, gbc);
        
        row++;
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Save Profile");
        styleActionButton(saveButton, "Save your profile changes");
        saveButton.addActionListener(e -> saveProfile());
        buttonPanel.add(saveButton);
        
        gbc.gridx = 0; gbc.gridy = row;
        gbc.gridwidth = 2;
        panel.add(buttonPanel, gbc);
        
        styleTextField(nameField);
        styleTextField(emailField);
        styleTextArea(skillsArea);
        styleTextArea(experienceArea);
        styleComboBox(availabilityCombo);
        
        return panel;
    }

    private void loadOpportunities() {
        opportunitiesModel.setRowCount(0);
        opportunitiesModel.addRow(new Object[]{
            "Hope Children's Home", "Weekend Tutor", "City A", "Teaching", "Weekends", "Open"
        });
        opportunitiesModel.addRow(new Object[]{
            "Bright Future", "Event Helper", "City B", "Organizing", "Event-Based", "Open"
        });
    }

    private void loadApplications() {
        applicationsModel.setRowCount(0);
        applicationsModel.addRow(new Object[]{
            "2024-01-15", "Hope Children's Home", "Weekend Tutor", "Pending", "TBD", "View"
        });
    }

    private void performSearch() {
        loadOpportunities();
    }

    private void showApplyDialog(int row) {
        String orphanage = opportunitiesModel.getValueAt(row, 0).toString();
        String opportunity = opportunitiesModel.getValueAt(row, 1).toString();
        
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Apply for Opportunity", true);
        dialog.setLayout(new GridBagLayout());
        dialog.setSize(450, 400);
        dialog.setLocationRelativeTo(this);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JLabel titleLabel = new JLabel("Applying for: " + opportunity);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        
        JLabel orphanageLabel = new JLabel("At: " + orphanage);
        
        JTextArea coverLetterArea = new JTextArea(8, 30);
        JTextField availabilityField = new JTextField(20);
        
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.gridwidth = 2;
        dialog.add(titleLabel, gbc);
        
        gbc.gridy = 1;
        dialog.add(orphanageLabel, gbc);
        
        gbc.gridwidth = 1;
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(new JLabel("Cover Letter:"), gbc);
        gbc.gridx = 1;
        dialog.add(new JScrollPane(coverLetterArea), gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(new JLabel("Availability:"), gbc);
        gbc.gridx = 1;
        dialog.add(availabilityField, gbc);
        
        JPanel buttonPanel = new JPanel();
        JButton applyButton = new JButton("Submit Application");
        JButton cancelButton = new JButton("Cancel");
        
        applyButton.addActionListener(e -> {
            submitApplication(orphanage, opportunity, coverLetterArea.getText(), availabilityField.getText());
            dialog.dispose();
        });
        
        cancelButton.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(applyButton);
        buttonPanel.add(cancelButton);
        
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);
        
        dialog.setVisible(true);
    }

    private void submitApplication(String orphanage, String opportunity, String coverLetter, String availability) {
        showSuccessMessage("Application submitted successfully!");
        loadApplications();
    }

    private void saveProfile() {
        showSuccessMessage("Profile saved successfully!");
    }

    private void showSuccessMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXT_COLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(4, 6, 4, 6);
        field.setBorder(new CompoundBorder(
            BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
            padding
        ));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleTextArea(JTextArea area) {
        area.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        area.setForeground(INPUT_FG_DARK);
        area.setBackground(INPUT_BG_DARK);
        area.setBorder(new EmptyBorder(4, 6, 4, 6));
        area.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLE_CELL_BG);
        table.setForeground(TABLE_CELL_FG);
        table.setGridColor(TABLE_GRID_COLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG);
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0, 1));
        
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLE_HEADER_BG);
        header.setForeground(TABLE_HEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);
        renderer.setVerticalAlignment(SwingConstants.CENTER);
        renderer.setBorder(new EmptyBorder(2, 5, 2, 5));
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton b = new JButton();
                b.setPreferredSize(new Dimension(0, 0));
                return b;
            }
        });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(new CompoundBorder(
            BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),
            padding
        ));
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            }
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        });
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
Source: current | Size: 7008 bytes
```java
// src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;
import java.util.Optional;

public class OrphanageHubApp extends JFrame {

    private final CardLayout cardLayout;
    private final JPanel mainPanel;
    
    // Immutable role tracking using Optional for null safety
    private volatile String lastSelectedRole = "Donor"; // Default role

    // Panel Instances (keep references)
    private HomePanel homePanel;
    private LoginPanel loginPanel;
    private RegistrationPanel registrationPanel;
    private OrphanageDashboardPanel orphanageDashboardPanel;
    private DonorDashboardPanel donorDashboardPanel;
    private VolunteerDashboardPanel volunteerDashboardPanel;
    private AdminDashboardPanel adminDashboardPanel;

    // Panel names for CardLayout
    public static final String HOME_PANEL = "Home";
    public static final String LOGIN_PANEL = "Login";
    public static final String REGISTRATION_PANEL = "Registration";
    public static final String ORPHANAGE_DASHBOARD_PANEL = "OrphanageDashboard";
    public static final String DONOR_DASHBOARD_PANEL = "DonorDashboard";
    public static final String VOLUNTEER_DASHBOARD_PANEL = "VolunteerDashboard";
    public static final String ADMIN_DASHBOARD_PANEL = "AdminDashboard";

    public OrphanageHubApp() {
        super("OrphanageHub");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set Nimbus Look and Feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("CRITICAL FAILURE: Cannot set Nimbus Look and Feel. UI may appear incorrect.");
        }

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
        
        initComponents(); // Initialize components and layout

        // Set initial size
        setPreferredSize(new Dimension(900, 700));
        pack();
        setMinimumSize(new Dimension(750, 550));
        setLocationRelativeTo(null);
        setResizable(true);
    }

    private void initComponents() {
        // Instantiate CORE panels immediately
        homePanel = new HomePanel(this);
        loginPanel = new LoginPanel(this);
        registrationPanel = new RegistrationPanel(this);
        // Dashboard panels are instantiated on demand via showDashboard()

        // Add core panels to the CardLayout container
        mainPanel.add(homePanel, HOME_PANEL);
        mainPanel.add(loginPanel, LOGIN_PANEL);
        mainPanel.add(registrationPanel, REGISTRATION_PANEL);

        setContentPane(mainPanel);
    }

    /**
     * Navigates directly to a panel already added to the CardLayout.
     * @param panelName The name constant of the panel to show.
     */
    public void navigateTo(String panelName) {
        System.out.println("Navigating to: " + panelName); // Debug
        cardLayout.show(mainPanel, panelName);
    }

    /**
     * Creates (if necessary) and navigates to a dashboard panel.
     * Handles lazy instantiation of dashboard panels.
     * @param panelName The name constant of the dashboard panel to show.
     */
    public void showDashboard(String panelName) {
        System.out.println("Attempting to show dashboard: " + panelName); // Debug
        
        boolean panelAdded = switch (panelName) {
            case ORPHANAGE_DASHBOARD_PANEL -> {
                if (orphanageDashboardPanel == null) {
                    System.out.println("Creating Orphanage Dashboard Panel...");
                    orphanageDashboardPanel = new OrphanageDashboardPanel(this);
                    mainPanel.add(orphanageDashboardPanel, ORPHANAGE_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case DONOR_DASHBOARD_PANEL -> {
                if (donorDashboardPanel == null) {
                    System.out.println("Creating Donor Dashboard Panel...");
                    donorDashboardPanel = new DonorDashboardPanel(this);
                    mainPanel.add(donorDashboardPanel, DONOR_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case VOLUNTEER_DASHBOARD_PANEL -> {
                if (volunteerDashboardPanel == null) {
                    System.out.println("Creating Volunteer Dashboard Panel...");
                    volunteerDashboardPanel = new VolunteerDashboardPanel(this);
                    mainPanel.add(volunteerDashboardPanel, VOLUNTEER_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            case ADMIN_DASHBOARD_PANEL -> {
                if (adminDashboardPanel == null) {
                    System.out.println("Creating Admin Dashboard Panel...");
                    adminDashboardPanel = new AdminDashboardPanel(this);
                    mainPanel.add(adminDashboardPanel, ADMIN_DASHBOARD_PANEL);
                    yield true;
                }
                yield false;
            }
            default -> {
                System.err.println("Error: Attempted to show unknown or unsupported dashboard panel: " + panelName);
                navigateTo(HOME_PANEL); // Fallback to home screen
                yield false;
            }
        };

        // Revalidate the main panel if a new component was actually added
        if (panelAdded) {
            mainPanel.revalidate();
            System.out.println(panelName + " Added and Revalidated.");
        }

        navigateTo(panelName); // Navigate to the requested panel
    }

    /**
     * Gets the selected role from HomePanel in a null-safe manner.
     * @return The selected role or "Unknown" if homePanel is null.
     */
    public String getSelectedRole() {
        return Optional.ofNullable(homePanel)
                .map(HomePanel::getSelectedRole)
                .orElse(lastSelectedRole); // Use last selected role as fallback
    }

    /**
     * Sets the last selected role for persistence across panel changes.
     * Thread-safe using volatile field.
     * @param role The role to remember.
     */
    public void setLastSelectedRole(String role) {
        if (role != null && !role.trim().isEmpty()) {
            this.lastSelectedRole = role;
            System.out.println("Role updated to: " + role); // Debug
        }
    }

    /**
     * Gets the last selected role.
     * @return The last selected role, never null.
     */
    public String getLastSelectedRole() {
        return lastSelectedRole;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            OrphanageHubApp app = new OrphanageHubApp();
            app.setVisible(true);
        });
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/LoginPanel.java
Source: current | Size: 10915 bytes
```java
// src/main/java/com/orphanagehub/gui/LoginPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import com.orphanagehub.service.AuthService;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class LoginPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final AuthService authService = new AuthService();
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color LINK_COLOR = new Color(100, 180, 255);

    public LoginPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new GridBagLayout());
        setBorder(new EmptyBorder(40, 60, 40, 60));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Title
        JLabel lblTitle = new JLabel("User Login", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        gbc.gridx = 0; 
        gbc.gridy = 0; 
        gbc.gridwidth = 2; 
        gbc.weightx = 1.0; 
        gbc.insets = new Insets(0, 5, 25, 5);
        add(lblTitle, gbc);
        
        gbc.gridwidth = 1; 
        gbc.insets = new Insets(8, 5, 8, 5);

        // Username
        JLabel lblUsername = new JLabel("Username:"); 
        styleFormLabel(lblUsername);
        gbc.gridx = 0; 
        gbc.gridy = 1; 
        gbc.anchor = GridBagConstraints.EAST; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.weightx = 0;
        add(lblUsername, gbc);
        
        txtUsername = new JTextField(20); 
        styleTextField(txtUsername);
        gbc.gridx = 1; 
        gbc.gridy = 1; 
        gbc.anchor = GridBagConstraints.WEST; 
        gbc.fill = GridBagConstraints.HORIZONTAL; 
        gbc.weightx = 1.0;
        add(txtUsername, gbc);

        // Password
        JLabel lblPassword = new JLabel("Password:"); 
        styleFormLabel(lblPassword);
        gbc.gridx = 0; 
        gbc.gridy = 2; 
        gbc.anchor = GridBagConstraints.EAST; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.weightx = 0;
        add(lblPassword, gbc);
        
        txtPassword = new JPasswordField(20); 
        styleTextField(txtPassword);
        gbc.gridx = 1; 
        gbc.gridy = 2; 
        gbc.anchor = GridBagConstraints.WEST; 
        gbc.fill = GridBagConstraints.HORIZONTAL; 
        gbc.weightx = 1.0;
        add(txtPassword, gbc);

        // Login Button
        JButton btnLogin = new JButton("Login"); 
        styleActionButton(btnLogin, "Authenticate and access your dashboard");
        gbc.gridx = 0; 
        gbc.gridy = 3; 
        gbc.gridwidth = 2; 
        gbc.fill = GridBagConstraints.NONE; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(20, 5, 10, 5);
        add(btnLogin, gbc);

        // Links Panel
        JPanel linksPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0)); 
        linksPanel.setOpaque(false);
        
        JLabel lblForgotPassword = createHyperlinkLabel("Forgot Password?"); 
        lblForgotPassword.setToolTipText("Click here to reset your password");
        lblForgotPassword.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseClicked(MouseEvent e) { 
                JOptionPane.showMessageDialog(LoginPanel.this, 
                    "Password reset functionality not yet implemented.", 
                    "Forgot Password", 
                    JOptionPane.INFORMATION_MESSAGE); 
            }
        });
        
        JLabel lblRegister = createHyperlinkLabel("Need an account? Register"); 
        lblRegister.setToolTipText("Click here to go to the registration page");
        lblRegister.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseClicked(MouseEvent e) { 
                mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); 
            }
        });
        
        linksPanel.add(lblForgotPassword); 
        linksPanel.add(lblRegister);
        gbc.gridx = 0; 
        gbc.gridy = 4; 
        gbc.gridwidth = 2; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(5, 5, 15, 5);
        add(linksPanel, gbc);

        // Back Button
        JButton btnBack = new JButton("Back"); 
        styleActionButton(btnBack, "Return to the welcome screen"); 
        btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() { 
            @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); } 
            @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        gbc.gridx = 0; 
        gbc.gridy = 5; 
        gbc.gridwidth = 2; 
        gbc.anchor = GridBagConstraints.CENTER; 
        gbc.insets = new Insets(10, 5, 5, 5);
        add(btnBack, gbc);

        // Login action with functional error handling
        btnLogin.addActionListener(e -> handleLogin());
    }
    
    private void handleLogin() {
        String username = txtUsername.getText().trim();
        char[] password = txtPassword.getPassword();
        
        if (username.isEmpty() || password.length == 0) {
            JOptionPane.showMessageDialog(this, 
                "Username and Password are required.", 
                "Login Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Use Try monad for functional error handling
        Try<User> authResult = authService.authenticate(username, new String(password));
        
        authResult
            .onSuccess(user -> {
                String target = getDashboardForRole(user.userRole());
                SwingUtilities.invokeLater(() -> {
                    clearPasswordField();
                    mainApp.showDashboard(target);
                });
            })
            .onFailure(ex -> {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, 
                        "Invalid credentials or authentication error", 
                        "Login Failed", 
                        JOptionPane.ERROR_MESSAGE);
                    clearPasswordField();
                    txtUsername.requestFocusInWindow();
                });
            });
        
        // Clear password array for security
        java.util.Arrays.fill(password, ' ');
    }
    
    private String getDashboardForRole(String role) {
        return switch (role) {
            case "OrphanageStaff" -> OrphanageHubApp.ORPHANAGE_DASHBOARD_PANEL;
            case "Donor" -> OrphanageHubApp.DONOR_DASHBOARD_PANEL;
            case "Volunteer" -> OrphanageHubApp.VOLUNTEER_DASHBOARD_PANEL;
            case "Admin" -> OrphanageHubApp.ADMIN_DASHBOARD_PANEL;
            default -> OrphanageHubApp.HOME_PANEL;
        };
    }
    
    private void clearPasswordField() {
        txtPassword.setText("");
    }

    private void styleFormLabel(JLabel label) { 
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); 
        label.setForeground(TEXT_COLOR_DARK); 
    }
    
    private void styleTextField(JComponent field) { 
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); 
        field.setForeground(INPUT_FG_DARK); 
        field.setBackground(INPUT_BG_DARK); 
        Border p = new EmptyBorder(5, 8, 5, 8); 
        field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1), p)); 
        if (field instanceof JTextField) {
            ((JTextField) field).setCaretColor(Color.LIGHT_GRAY); 
        } else if (field instanceof JPasswordField) {
            ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
        }
    }
    
    private JLabel createHyperlinkLabel(String text) { 
        JLabel l = new JLabel("<html><u>" + text + "</u></html>"); 
        l.setForeground(LINK_COLOR); 
        l.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12)); 
        l.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        return l; 
    }
    
    private void styleActionButton(JButton btn, String tooltip) { 
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14)); 
        btn.setPreferredSize(new Dimension(130, 40)); 
        btn.setToolTipText(tooltip); 
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 
        btn.setBackground(BUTTON_BG_DARK); 
        btn.setForeground(BUTTON_FG_DARK); 
        btn.setFocusPainted(false); 
        Border l = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()); 
        Border p = new EmptyBorder(5, 15, 5, 15); 
        btn.setBorder(new CompoundBorder(l, p)); 
        btn.addMouseListener(new MouseAdapter() { 
            @Override 
            public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            } 
            @Override 
            public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            } 
        }); 
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/RegistrationPanel.java
Source: current | Size: 14574 bytes
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;
import io.vavr.control.Try;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class RegistrationPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final RegistrationService registrationService;
    private String currentRole = "User";
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtFullName;
    private JPasswordField txtPassword;
    private JPasswordField txtConfirmPassword;
    private JComboBox<String> cmbOrphanage;
    private JCheckBox chkTerms;
    private JLabel lblTitle;
    private JLabel lblRoleIcon;
    private JPanel orphanagePanel;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTON_REGISTER_BG = new Color(60, 179, 113);
    private static final Color BUTTON_REGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOX_COLOR = new Color(180, 180, 180);

    public RegistrationPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.registrationService = new RegistrationService();
        setLayout(new BorderLayout());
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);

        lblRoleIcon = new JLabel("?");
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblRoleIcon);

        lblTitle = new JLabel("Register as " + currentRole);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblTitle);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 5, 20, 5);
        formPanel.add(titlePanel, gbc);

        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5);

        int gridY = 1;

        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword = new JPasswordField(25));
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword = new JPasswordField(25));

        orphanagePanel = new JPanel(new BorderLayout(5, 0));
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        String[] orphanages = {"Select Orphanage...", "Hope Children's Home", "Bright Future Orphanage", "Little Angels Shelter"};
        cmbOrphanage = new JComboBox<>(orphanages);
        styleComboBox(cmbOrphanage);
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false);

        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(15, 5, 15, 5);
        formPanel.add(chkTerms, gbc);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        btnRegister.setBackground(BUTTON_REGISTER_BG);
        btnRegister.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_HOVER_BG); }
            @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_BG); }
        });
        btnRegister.addActionListener(e -> registerAction());

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); }
            @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(10, 5, 5, 5);
        formPanel.add(buttonPanel, gbc);

        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }
        });
        verticalScrollBar.setUnitIncrement(16);

        add(scrollPane, BorderLayout.CENTER);
    }

    private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        panel.add(label, gbc);

        styleTextField(field);
        gbc.gridx = 1;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXT_COLOR_DARK);
    }

    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
                padding
        ));
        if (field instanceof JTextField) ((JTextField) field).setCaretColor(Color.LIGHT_GRAY);
        else if (field instanceof JPasswordField) ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
    }

    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOX_COLOR);
        checkBox.setOpaque(false);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
    }

    private void registerAction() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        char[] password = txtPassword.getPassword();
        char[] confirmPassword = txtConfirmPassword.getPassword();

        if (username.isEmpty() || email.isEmpty() || fullName.isEmpty() || password.length == 0) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!java.util.Arrays.equals(password, confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            java.util.Arrays.fill(password, '\0');
            java.util.Arrays.fill(confirmPassword, '\0');
            return;
        }
        if (currentRole.equals("OrphanageStaff") && cmbOrphanage.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Orphanage Staff must select an orphanage.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Using the correct method signature for RegistrationService
        registrationService.register(username, email, fullName, password, confirmPassword, currentRole)
            .onSuccess(user -> {
                // Clear sensitive data
                java.util.Arrays.fill(password, '\0');
                java.util.Arrays.fill(confirmPassword, '\0');
                
                JOptionPane.showMessageDialog(this, 
                    "Registration successful! Please login to continue.", 
                    "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
                clearForm();
                mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
            })
            .onFailure(ex -> {
                // Clear sensitive data
                java.util.Arrays.fill(password, '\0');
                java.util.Arrays.fill(confirmPassword, '\0');
                
                JOptionPane.showMessageDialog(this, 
                    ex.getMessage(), 
                    "Registration Error", 
                    JOptionPane.ERROR_MESSAGE);
            });
    }

    private void clearForm() {
        txtUsername.setText("");
        txtEmail.setText("");
        txtFullName.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        chkTerms.setSelected(false);
        if (cmbOrphanage != null) {
            cmbOrphanage.setSelectedIndex(0);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        
        // Get role from HomePanel
        currentRole = mainApp.getSelectedRole();
        
        lblTitle.setText("Register as " + currentRole);

        switch (currentRole) {
            case "Donor":
                lblRoleIcon.setText("\u2764");
                lblRoleIcon.setForeground(new Color(255, 105, 180));
                break;
            case "OrphanageStaff":
                lblRoleIcon.setText("\u2302");
                lblRoleIcon.setForeground(new Color(135, 206, 250));
                break;
            case "Volunteer":
                lblRoleIcon.setText("\u2605");
                lblRoleIcon.setForeground(new Color(255, 215, 0));
                break;
            default:
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLE_COLOR_DARK);
                break;
        }

        boolean isStaff = currentRole.equals("OrphanageStaff");
        orphanagePanel.setVisible(isStaff);

        revalidate();
        repaint();
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/WelcomePanel.java
Source: current | Size: 3433 bytes
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WelcomePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(WelcomePanel.class);

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

    public WelcomePanel(Runnable registerAction, Runnable loginAction) {
        setLayout(new BorderLayout());

        JPanel contentPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        contentPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Welcome to OrphanageHub");
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLECOLOR_DARK);

        JButton btnRegister = createButton("Register", registerAction);
        JButton btnLogin = createButton("Login", loginAction);

        contentPanel.add(lblTitle);
        contentPanel.add(btnRegister);
        contentPanel.add(btnLogin);

        add(contentPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private JButton createButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        button.setPreferredSize(new Dimension(150, 50));
        button.setForeground(BUTTONFG_DARK);
        button.setBackground(BUTTONBG_DARK);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(e -> action.run());
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(BUTTONHOVER_BG_DARK);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(BUTTONBG_DARK);
            }
        });
        return button;
    }
}

```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/HomePanel.java
Source: current | Size: 10717 bytes
```java
// src/main/java/com/orphanagehub/gui/HomePanel.java
package com.orphanagehub.gui;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.util.function.Consumer;

public class HomePanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final JRadioButton radDonor;
    private final JRadioButton radOrphanageStaff;
    private final JRadioButton radVolunteer;
    private final JRadioButton radAdmin;
    private final ButtonGroup roleGroup;
    
    // Define colors locally for better encapsulation
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color FALLBACK_BG_DARK = new Color(60, 60, 60);

    public HomePanel(OrphanageHubApp app) {
        this.mainApp = app;
        setBorder(new EmptyBorder(30, 40, 30, 40));
        setLayout(new BorderLayout(20, 20));
        
        // Initialize radio buttons as final
        this.radDonor = new JRadioButton("Donor", true);
        this.radOrphanageStaff = new JRadioButton("Orphanage Staff");
        this.radVolunteer = new JRadioButton("Volunteer");
        this.radAdmin = new JRadioButton("Admin");
        this.roleGroup = new ButtonGroup();
        
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // Title
        JLabel lblTitle = new JLabel("Welcome to OrphanageHub", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        lblTitle.setBorder(new EmptyBorder(0, 0, 25, 0));
        add(lblTitle, BorderLayout.NORTH);
        
        // Center Panel with Image and Description
        JPanel centerPanel = new JPanel(new BorderLayout(30, 0));
        centerPanel.setOpaque(false);
        
        // Image Label
        JLabel lblImage = createImageLabel();
        centerPanel.add(lblImage, BorderLayout.WEST);
        
        // Description
        String htmlDesc = "<html><body style='width:350px; font-family: Sans-Serif; font-size: 14pt; color: rgb(200,200,200);'>"
                + "<p><b>A better world starts with care.</b></p>"
                + "<p>OrphanageHub connects orphanages with the donors and volunteers needed "
                + "to create lasting change for vulnerable children.</p>"
                + "</body></html>";
        JLabel lblDesc = new JLabel(htmlDesc);
        lblDesc.setVerticalAlignment(SwingConstants.CENTER);
        lblDesc.setHorizontalAlignment(SwingConstants.LEFT);
        lblDesc.setOpaque(false);
        lblDesc.setBorder(new EmptyBorder(0, 10, 0, 0));
        centerPanel.add(lblDesc, BorderLayout.CENTER);
        
        add(centerPanel, BorderLayout.CENTER);
        
        // South Panel with Role Selection and Buttons
        JPanel southPanel = new JPanel(new BorderLayout(10, 20));
        southPanel.setOpaque(false);
        
        // Role Panel
        JPanel rolePanel = createRolePanel();
        southPanel.add(rolePanel, BorderLayout.CENTER);
        
        // Button Panel
        JPanel buttonPanel = createButtonPanel();
        southPanel.add(buttonPanel, BorderLayout.SOUTH);
        
        add(southPanel, BorderLayout.SOUTH);
    }

    private JLabel createImageLabel() {
        JLabel lblImage = new JLabel();
        Dimension imageSize = new Dimension(220, 220);
        lblImage.setPreferredSize(imageSize);
        lblImage.setMinimumSize(imageSize);
        lblImage.setMaximumSize(imageSize);
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        lblImage.setVerticalAlignment(SwingConstants.CENTER);
        lblImage.setOpaque(false);
        
        URL imageURL = getClass().getResource("home.png");
        if (imageURL != null) {
            ImageIcon icon = new ImageIcon(imageURL);
            if (icon.getImageLoadStatus() == MediaTracker.COMPLETE && icon.getIconWidth() > 0) {
                Image img = icon.getImage().getScaledInstance(imageSize.width, imageSize.height, Image.SCALE_SMOOTH);
                lblImage.setIcon(new ImageIcon(img));
                lblImage.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK, 1));
            } else {
                setFallbackImageStyleDark(lblImage);
            }
        } else {
            setFallbackImageStyleDark(lblImage);
        }
        return lblImage;
    }

    private JPanel createRolePanel() {
        JPanel rolePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 25, 10));
        rolePanel.setOpaque(false);
        
        TitledBorder titledBorder = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(BORDER_COLOR_DARK),
                " Select Your Role ",
                TitledBorder.CENTER,
                TitledBorder.DEFAULT_POSITION,
                new Font(Font.SANS_SERIF, Font.BOLD, 15),
                TITLE_COLOR_DARK
        );
        rolePanel.setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10)));
        
        // Style radio buttons
        styleRadioButton(radDonor, "Select if you wish to donate or view needs.");
        styleRadioButton(radOrphanageStaff, "Select if you manage an orphanage profile.");
        styleRadioButton(radVolunteer, "Select if you want to find volunteer opportunities.");
        styleRadioButton(radAdmin, "Select if you are an administrator.");
        
        // Add to button group
        roleGroup.add(radDonor);
        roleGroup.add(radOrphanageStaff);
        roleGroup.add(radVolunteer);
        roleGroup.add(radAdmin);
        
        // Add role change listener using functional approach
        Consumer<JRadioButton> roleListener = button -> {
            if (button.isSelected()) {
                mainApp.setLastSelectedRole(getRoleFromButton(button));
            }
        };
        
        radDonor.addActionListener(e -> roleListener.accept(radDonor));
        radOrphanageStaff.addActionListener(e -> roleListener.accept(radOrphanageStaff));
        radVolunteer.addActionListener(e -> roleListener.accept(radVolunteer));
        radAdmin.addActionListener(e -> roleListener.accept(radAdmin));
        
        // Add to panel
        rolePanel.add(radDonor);
        rolePanel.add(radOrphanageStaff);
        rolePanel.add(radVolunteer);
        rolePanel.add(radAdmin);
        
        return rolePanel;
    }

    private JPanel createButtonPanel() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 5));
        buttonPanel.setOpaque(false);
        buttonPanel.setBorder(new EmptyBorder(15, 0, 10, 0));
        
        JButton btnLogin = new JButton("Login");
        JButton btnRegister = new JButton("Register");
        
        styleActionButton(btnLogin, "Proceed to login with your existing account.");
        styleActionButton(btnRegister, "Create a new account based on your selected role.");
        
        btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL));
        btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL));
        
        buttonPanel.add(btnLogin);
        buttonPanel.add(btnRegister);
        
        return buttonPanel;
    }

    private void setFallbackImageStyleDark(JLabel label) {
        label.setText("<html><div style='text-align: center; color: #AAAAAA;'>Image<br>Not Found<br>(home.png)</div></html>");
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 14));
        label.setForeground(new Color(170, 170, 170));
        label.setBorder(BorderFactory.createDashedBorder(BORDER_COLOR_DARK, 5, 5));
        label.setOpaque(true);
        label.setBackground(FALLBACK_BG_DARK);
    }

    private void styleRadioButton(JRadioButton rb, String tooltip) {
        rb.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        rb.setForeground(TEXT_COLOR_DARK);
        rb.setOpaque(false);
        rb.setToolTipText(tooltip);
        rb.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setBackground(BUTTON_BG_DARK);
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
        
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    private String getRoleFromButton(JRadioButton button) {
        if (button == radDonor) return "Donor";
        if (button == radOrphanageStaff) return "OrphanageStaff";
        if (button == radVolunteer) return "Volunteer";
        if (button == radAdmin) return "Admin";
        return "Unknown";
    }

    public String getSelectedRole() {
        if (radDonor.isSelected()) return "Donor";
        if (radOrphanageStaff.isSelected()) return "OrphanageStaff";
        if (radVolunteer.isSelected()) return "Volunteer";
        if (radAdmin.isSelected()) return "Admin";
        return "Unknown";
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
Source: current | Size: 21272 bytes
```java
package com.orphanagehub.gui;

import com.orphanagehub.model.ResourceRequest;
import com.orphanagehub.service.OrphanageService;
import com.orphanagehub.util.SessionManager;
import io.vavr.control.Try;
import io.vavr.control.Option;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.time.LocalDateTime;

public class OrphanageDashboardPanel extends JPanel {
    private final OrphanageHubApp mainApp;
    private final OrphanageService orphanageService;
    private DefaultTableModel resourceModel;
    private JTable resourceTable;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color ACCENT_COLOR_ORANGE = new Color(230, 145, 56);
    private static final Color ACCENT_COLOR_BLUE = new Color(72, 149, 239);
    private static final Color ACCENT_COLOR_GREEN = new Color(87, 190, 106);

    public OrphanageDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        this.orphanageService = new OrphanageService();
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2302");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(135, 206, 250));
        
        String orphanageName = SessionManager.getInstance()
            .getAttribute("orphanageName")
            .map(Object::toString)
            .getOrElse("Orphanage Dashboard");
            
        JLabel nameLabel = new JLabel(orphanageName);
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        
        String username = SessionManager.getInstance()
            .getAttribute("currentUsername")
            .map(Object::toString)
            .getOrElse("staff_user");
            
        JLabel userLabel = new JLabel("User: " + username);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
        
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
            @Override protected void installDefaults() {
                super.installDefaults();
                lightHighlight = TAB_BG_SELECTED;
                shadow = BORDER_COLOR_DARK;
                darkShadow = DARK_BG_END;
                focus = TAB_BG_SELECTED;
            }
            @Override protected void paintTabBackground(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) {
                g.setColor(isSelected ? TAB_BG_SELECTED : TAB_BG_UNSELECTED);
                g.fillRoundRect(x, y, w, h + 5, 5, 5);
            }
            @Override protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) { }
            @Override protected void paintContentBorder(Graphics g, int tabPlacement, int selectedIndex) {
                int width = tabPane.getWidth();
                int height = tabPane.getHeight();
                Insets insets = tabPane.getInsets();
                int tabAreaHeight = calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
                int x = insets.left;
                int y = insets.top + tabAreaHeight - 1;
                int w = width - insets.right - insets.left;
                int h = height - insets.top - insets.bottom - y;
                g.setColor(BORDER_COLOR_DARK);
                g.drawRect(x, y, w - 1, h - 1);
            }
        });
        
        tabbedPane.addTab("Overview", createOverviewTab());
        tabbedPane.addTab("Resource Requests", createResourceRequestsTab());
        tabbedPane.addTab("Donations", createPlaceholderTab("Donations Management"));
        tabbedPane.addTab("Volunteers", createPlaceholderTab("Volunteer Management"));
        tabbedPane.addTab("Orphanage Profile", createPlaceholderTab("Orphanage Profile Editor"));
        return tabbedPane;
    }

    private JPanel createOverviewTab() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 25, 25, 25));
        panel.add(createStatCard("Active Requests", "12", ACCENT_COLOR_ORANGE));
        panel.add(createStatCard("Pending Donations", "3", ACCENT_COLOR_BLUE));
        panel.add(createStatCard("Active Volunteers", "8", ACCENT_COLOR_GREEN));
        return panel;
    }

    private JPanel createStatCard(String title, String value, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout(5, 5));
        card.setBackground(TAB_BG_UNSELECTED);
        card.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),
                new EmptyBorder(15, 20, 15, 20)
        ));
        JLabel valueLabel = new JLabel(value, SwingConstants.CENTER);
        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 36));
        valueLabel.setForeground(TITLE_COLOR_DARK);
        card.add(valueLabel, BorderLayout.CENTER);
        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        titleLabel.setForeground(TEXT_COLOR_DARK);
        card.add(titleLabel, BorderLayout.SOUTH);
        return card;
    }

    private JPanel createResourceRequestsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        toolbar.setOpaque(false);
        
        JButton btnAdd = new JButton("Add Request");
        JButton btnEdit = new JButton("Edit Selected");
        JButton btnDelete = new JButton("Delete Selected");
        
        styleActionButton(btnAdd, "Create a new resource request");
        styleActionButton(btnEdit, "Modify the selected request");
        styleActionButton(btnDelete, "Remove the selected request");
        
        btnDelete.setBackground(new Color(192, 57, 43));
        btnDelete.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnDelete.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnDelete.setBackground(new Color(192, 57, 43)); }
        });
        
        btnAdd.addActionListener(e -> showAddResourceDialog());
        
        toolbar.add(btnAdd);
        toolbar.add(btnEdit);
        toolbar.add(btnDelete);
        panel.add(toolbar, BorderLayout.NORTH);
        
        String[] columnNames = {"ID", "Category", "Description", "Needed", "Fulfilled", "Urgency", "Status"};
        resourceModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        resourceTable = new JTable(resourceModel);
        styleTable(resourceTable);
        
        JScrollPane scrollPane = new JScrollPane(resourceTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        loadResourceRequests();
        
        return panel;
    }

    private void showAddResourceDialog() {
        JDialog dialog = new JDialog((Frame)SwingUtilities.getWindowAncestor(this), "Add Resource Request", true);
        dialog.setLayout(new GridBagLayout());
        dialog.setSize(400, 350);
        dialog.setLocationRelativeTo(this);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(new JLabel("Category:"), gbc);
        JComboBox<String> cmbCategory = new JComboBox<>(new String[]{"Food", "Clothing", "Education", "Medical", "Other"});
        gbc.gridx = 1;
        dialog.add(cmbCategory, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(new JLabel("Description:"), gbc);
        JTextField txtDescription = new JTextField(20);
        gbc.gridx = 1;
        dialog.add(txtDescription, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(new JLabel("Quantity Needed:"), gbc);
        JSpinner spnQuantity = new JSpinner(new SpinnerNumberModel(1, 1, 1000, 1));
        gbc.gridx = 1;
        dialog.add(spnQuantity, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(new JLabel("Urgency:"), gbc);
        JComboBox<String> cmbUrgency = new JComboBox<>(new String[]{"Low", "Medium", "High", "Critical"});
        gbc.gridx = 1;
        dialog.add(cmbUrgency, gbc);
        
        JPanel buttonPanel = new JPanel();
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");
        
        btnSave.addActionListener(e -> {
            String category = (String) cmbCategory.getSelectedItem();
            String description = txtDescription.getText().trim();
            int qty = (Integer) spnQuantity.getValue();
            String urgency = (String) cmbUrgency.getSelectedItem();
            
            if (description.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Please enter a description", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            SessionManager.getInstance().getAttribute("currentOrphanageId")
                .map(Object::toString)
                .forEach(orphanageId -> {
                    String userId = SessionManager.getInstance().getAttribute("currentUserId")
                        .map(Object::toString)
                        .getOrElse("unknown");
                    
                    ResourceRequest request = new ResourceRequest(
                        null,  // ID will be generated by database
                        orphanageId,
                        userId,
                        category,
                        description,
                        qty,   // quantityNeeded
                        0,     // quantityFulfilled (starts at 0)
                        urgency,
                        "Open",
                        Timestamp.valueOf(LocalDateTime.now())
                    );
                    
                    orphanageService.manageResourceRequest(request)
                        .onSuccess(v -> {
                            resourceModel.addRow(new Object[]{
                                request.requestId(),
                                request.itemCategory(),
                                request.itemDescription(),
                                request.quantityNeeded(),
                                request.quantityFulfilled(),
                                request.urgency(),
                                request.status()
                            });
                            dialog.dispose();
                            JOptionPane.showMessageDialog(this, "Resource request added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        })
                        .onFailure(ex -> 
                            JOptionPane.showMessageDialog(dialog, "Failed to add request: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE)
                        );
                });
        });
        
        btnCancel.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);
        
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);
        
        dialog.setVisible(true);
    }

    private void loadResourceRequests() {
        SessionManager.getInstance().getAttribute("currentOrphanageId")
            .map(Object::toString)
            .forEach(orphanageId -> 
                orphanageService.getRequests(orphanageId)
                    .onSuccess(requests -> {
                        resourceModel.setRowCount(0);
                        requests.forEach(r -> 
                            resourceModel.addRow(new Object[]{
                                r.requestId(),
                                r.itemCategory(),
                                r.itemDescription(),
                                r.quantityNeeded(),
                                r.quantityFulfilled(),
                                r.urgency(),
                                r.status()
                            })
                        );
                    })
                    .onFailure(ex -> 
                        JOptionPane.showMessageDialog(this, "Failed to load requests: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE)
                    )
            );
    }

    private JPanel createPlaceholderTab(String title) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        JLabel label = new JLabel(title + " - Content Area", SwingConstants.CENTER);
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 18));
        label.setForeground(TEXT_COLOR_DARK);
        panel.add(label);
        return panel;
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLE_CELL_BG);
        table.setForeground(TABLE_CELL_FG);
        table.setGridColor(TABLE_GRID_COLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG);
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0,1));
        
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLE_HEADER_BG);
        header.setForeground(TABLE_HEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
        table.getColumnModel().getColumn(0).setPreferredWidth(60);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setPreferredWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(80);
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(4).setPreferredWidth(80);
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(5).setPreferredWidth(100);
        table.getColumnModel().getColumn(6).setPreferredWidth(100);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
            @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
            @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }
        });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),
                padding));
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_BG_DARK)) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
                }
            }
            @Override public void mouseExited(MouseEvent e) {
                if (btn.getBackground().equals(BUTTON_HOVER_BG_DARK)) {
                    btn.setBackground(BUTTON_BG_DARK);
                }
            }
        });
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/all_gui_code.txt
Source: current | Size: 110754 bytes
```text
# all_gui_code.txt

Generated: 2025-09-05 19:06:43 (local)
Source directory: /home/jared/OrphanageHub_PAT2025/src/main/java/com/orphanagehub/gui

================================================================================
## 1. DIRECTORY SNAPSHOT
================================================================================

```
AdminDashboardPanel.java
DonorDashboardPanel.java
DonorDashboardPanel.java.bak
HomePanel.java
LoginPanel.java
OrphanageDashboardPanel.java
OrphanageDashboardPanel.java.bak
OrphanageHubApp.java
RegistrationPanel.java
RegistrationPanel.java.bak
VolunteerDashboardPanel.java
VolunteerDashboardPanel.java.bak
WelcomePanel.java
frmHome.png
home.png
updateGuis.py
```

================================================================================
## 2. PROJECT OVERVIEW
================================================================================

This file groups GUI source files, backup copies, and resources for easy review.
Plaintext files (.java, .txt, .md, .properties, etc.) are embedded below (truncated if large).
Binary files (images, .class) are listed with size and a note.

================================================================================
## 3. FILE GROUPS
================================================================================

### Java source files
```
./AdminDashboardPanel.java
./DonorDashboardPanel.java
./HomePanel.java
./LoginPanel.java
./OrphanageDashboardPanel.java
./OrphanageHubApp.java
./RegistrationPanel.java
./VolunteerDashboardPanel.java
./WelcomePanel.java
```

### Backup files (.bak)
```
./DonorDashboardPanel.java.bak
./OrphanageDashboardPanel.java.bak
./RegistrationPanel.java.bak
./VolunteerDashboardPanel.java.bak
```

### Image / Binary resources
```
./frmHome.png
./home.png
```

### Other readable files
```
./DonorDashboardPanel.java.bak
./OrphanageDashboardPanel.java.bak
./RegistrationPanel.java.bak
./VolunteerDashboardPanel.java.bak
```

================================================================================
## 4. DIRECTORY TREE (short)
================================================================================

```
gui/
  AdminDashboardPanel.java
  DonorDashboardPanel.java
  DonorDashboardPanel.java.bak
  HomePanel.java
  LoginPanel.java
  OrphanageDashboardPanel.java
  OrphanageDashboardPanel.java.bak
  OrphanageHubApp.java
  RegistrationPanel.java
  RegistrationPanel.java.bak
  VolunteerDashboardPanel.java
  VolunteerDashboardPanel.java.bak
  WelcomePanel.java
  frmHome.png
  home.png
  updateGuis.py
```

================================================================================
## 5. DETAILED SECTIONS (FILES)
================================================================================
------------------------------------------------------------
### File: AdminDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AdminService;
import com.orphanagehub.util.SessionManager;

import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for admins.
 * Matches Phase 2 FrmAdminDashboard: header, stats, search, tables, buttons.
 */
public class AdminDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient AdminService adminService = new AdminService();

    public AdminDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header and stats
        JPanel top = new JPanel(new GridLayout(2, 1));
        JLabel lblHeader = new JLabel("Administrator Dashboard");
        JPanel stats = new JPanel(new FlowLayout());
        JLabel lblUserCount = new JLabel("Users: 0"); // From service
        JLabel lblOrphanageCount = new JLabel("Orphanages: 0");
        JLabel lblPendingVerifications = new JLabel("Pending: 0");
        stats.add(lblUserCount); stats.add(lblOrphanageCount); stats.add(lblPendingVerifications);
        top.add(lblHeader); top.add(stats);
        add(top, BorderLayout.NORTH);

        // User management
        JPanel userMgmt = new JPanel(new BorderLayout());
        JPanel userSearch = new JPanel(new FlowLayout());
        JTextField txtUserSearch = new JTextField(20);
        JComboBox<String> cmbRoleFilter = new JComboBox<>(new String[]{"All", "Donor", "Staff"});
        JButton btnUserSearch = new JButton("Search");
        userSearch.add(txtUserSearch); userSearch.add(cmbRoleFilter); userSearch.add(btnUserSearch);
        JTable tblUserManagement = new JTable();
        userMgmt.add(userSearch, BorderLayout.NORTH);
        userMgmt.add(new JScrollPane(tblUserManagement), BorderLayout.CENTER);
        add(userMgmt, BorderLayout.CENTER);

        // Verification queue
        JTable tblVerificationQueue = new JTable();
        add(new JScrollPane(tblVerificationQueue), BorderLayout.SOUTH);

        JButton btnLogout = new JButton("Logout");
        add(btnLogout, BorderLayout.EAST);

        // Listeners
        btnUserSearch.addActionListener(e -> /* Filter users */ {});
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });

        // Load data after panel is ready (deferred to avoid initialization issues)
        SwingUtilities.invokeLater(() -> {
            adminService.getPendingVerifications()
                .onSuccess(list -> { /* Set queue table */ })
                .onFailure(error -> {
                    // Log error but don't crash the application
                    System.err.println("Failed to load pending verifications: " + error.getMessage());
                });
        });
    }
}
```
------------------------------------------------------------
### File: DonorDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.DonorService;
import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for donors.
 * Matches Phase 2 FrmDonorDashboard: search, filter, table, buttons.
 */
public class DonorDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    
    private final transient OrphanageHubApp mainApp;
    private final transient DonorService donorService = new DonorService();

    public DonorDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JTextField txtSearch = new JTextField(20);
        JComboBox<String> cmbFilter = new JComboBox<>(new String[]{"Location", "Needs"});
        JButton btnSearch = new JButton("Search");
        JButton btnViewDetails = new JButton("View Details");
        JButton btnLogout = new JButton("Logout");
        searchPanel.add(txtSearch); 
        searchPanel.add(cmbFilter); 
        searchPanel.add(btnSearch); 
        searchPanel.add(btnViewDetails); 
        searchPanel.add(btnLogout);
        add(searchPanel, BorderLayout.NORTH);

        // Table
        JTable tblOrphanages = new JTable(); // Model from search
        JScrollPane scroll = new JScrollPane(tblOrphanages);
        add(scroll, BorderLayout.CENTER);

        // Listeners
        btnSearch.addActionListener(e -> {
            // donorService.searchByLocation/... update table
        });
        btnViewDetails.addActionListener(e -> {
            // Show details dialog
        });
        btnLogout.addActionListener(e -> {
            // Clear any session data if needed
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
    }
}
```
------------------------------------------------------------
### File: HomePanel.java
```java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Home panel for role selection and navigation.
 * Matches Phase 2 FrmHome: title, prompt, description, radios, buttons.
 */
public class HomePanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final OrphanageHubApp mainApp;
    private final ButtonGroup roleGroup = new ButtonGroup();
    private JRadioButton radDonor;
    private JRadioButton radOrphanageStaff;
    private JRadioButton radVolunteer;
    private JRadioButton radAdmin;

    public HomePanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        // Title
        JLabel lblTitle = new JLabel("OrphanageHub");
        lblTitle.setFont(new Font("Lato", Font.BOLD, 45));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        add(lblTitle, gbc);

        // Description
        JTextArea txtDescription = new JTextArea("Welcome to OrphanageHub, a platform connecting donors, volunteers, and orphanages.");
        txtDescription.setEditable(false);
        txtDescription.setLineWrap(true);
        txtDescription.setWrapStyleWord(true);
        txtDescription.setBackground(getBackground());
        gbc.gridy = 1; gbc.gridwidth = 2;
        add(txtDescription, gbc);

        // Role Prompt
        JLabel lblRolePrompt = new JLabel("Select Your Role:");
        gbc.gridy = 2; gbc.gridwidth = 1;
        add(lblRolePrompt, gbc);

        // Radios
        radDonor = new JRadioButton("Donor");
        radOrphanageStaff = new JRadioButton("Orphanage Staff");
        radVolunteer = new JRadioButton("Volunteer");
        radAdmin = new JRadioButton("Admin");
        roleGroup.add(radDonor); 
        roleGroup.add(radOrphanageStaff); 
        roleGroup.add(radVolunteer); 
        roleGroup.add(radAdmin);
        
        gbc.gridy = 3;
        add(radDonor, gbc); 
        gbc.gridy = 4; 
        add(radOrphanageStaff, gbc);
        gbc.gridy = 5; 
        add(radVolunteer, gbc); 
        gbc.gridy = 6; 
        add(radAdmin, gbc);

        // Buttons
        JButton btnLogin = new JButton("Login");
        JButton btnRegister = new JButton("Register");
        gbc.gridy = 7; gbc.gridx = 0;
        add(btnLogin, gbc); 
        gbc.gridx = 1; 
        add(btnRegister, gbc);

        // Listeners
        ActionListener roleListener = e -> mainApp.setLastSelectedRole(((JRadioButton) e.getSource()).getText());
        radDonor.addActionListener(roleListener);
        radOrphanageStaff.addActionListener(roleListener);
        radVolunteer.addActionListener(roleListener);
        radAdmin.addActionListener(roleListener);

        btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL));
        btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL));

        // Restore last role
        if (mainApp.getLastSelectedRole() != null) {
            // Select radio based on last role
            switch (mainApp.getLastSelectedRole()) {
                case "Donor":
                    radDonor.setSelected(true);
                    break;
                case "Orphanage Staff":
                    radOrphanageStaff.setSelected(true);
                    break;
                case "Volunteer":
                    radVolunteer.setSelected(true);
                    break;
                case "Admin":
                    radAdmin.setSelected(true);
                    break;
            }
        }
    }
    
    // Add method to get selected role
    public String getSelectedRole() {
        if (radDonor.isSelected()) return "Donor";
        if (radOrphanageStaff.isSelected()) return "OrphanageStaff";
        if (radVolunteer.isSelected()) return "Volunteer";
        if (radAdmin.isSelected()) return "Admin";
        return null;
    }
}
```
------------------------------------------------------------
### File: LoginPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AuthenticationService;
import com.orphanagehub.util.SessionManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;

/**
 * Login panel for authentication.
 * Matches Phase 2 FrmLogin: labels, fields, button, hyperlink.
 */
public class LoginPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient AuthenticationService authService = new AuthenticationService();

    public LoginPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        JLabel lblUsername = new JLabel("Username:");
        gbc.gridx = 0; gbc.gridy = 0;
        add(lblUsername, gbc);

        JTextField txtUsername = new JTextField(20);
        gbc.gridx = 1;
        add(txtUsername, gbc);

        JLabel lblPassword = new JLabel("Password:");
        gbc.gridx = 0; gbc.gridy = 1;
        add(lblPassword, gbc);

        JPasswordField txtPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtPassword, gbc);

        JButton btnLogin = new JButton("Login");
        gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 2;
        add(btnLogin, gbc);

        JLabel lblHyperlink = new JLabel("<html><u>Register or Forgot Password?</u></html>");
        lblHyperlink.setForeground(Color.BLUE);
        lblHyperlink.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        gbc.gridy = 3;
        add(lblHyperlink, gbc);

        // Login listener
        btnLogin.addActionListener(e -> {
            authService.authenticate(txtUsername.getText(), txtPassword.getPassword())
                    .onSuccess(user -> {
                        SessionManager.getInstance().setAttribute("currentUser", user);
                        mainApp.navigateTo(mainApp.dashboardForRole(user.userRole()));
                    })
                    .onFailure(ex -> showError(ex.getMessage()));
            Arrays.fill(txtPassword.getPassword(), '0'); // Secure clear
        });

        // Hyperlink listener
        lblHyperlink.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); // Or password reset if implemented
            }
        });
    }

    // Custom error dialog (polish: red border, per suggestion)
    private void showError(String msg) {
        JDialog dialog = new JDialog(mainApp, "Error", true);
        JLabel label = new JLabel(msg);
        label.setForeground(Color.RED);
        label.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa)); // From CSS
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }
}
```
------------------------------------------------------------
### File: OrphanageDashboardPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import com.orphanagehub.service.OrphanageService;
import com.orphanagehub.util.SessionManager;
import javax.swing.*;
import java.awt.*;
/**
 * Dashboard for orphanage staff.
 * Matches Phase 2 FrmOrphanageDashboard: name, user, table, buttons.
 */
public class OrphanageDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient OrphanageService orphanageService = new OrphanageService();

    public OrphanageDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header
        JPanel header = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel lblOrphanageName = new JLabel("Orphanage Name"); // From session/service
        JLabel lblUserDisplay = new JLabel(SessionManager.getInstance().getAttribute("currentUser").map(u -> {
            if (u instanceof User) {
                return ((User) u).username();
            }
            return "User";
        }).getOrElse("User"));
        header.add(lblOrphanageName);
        header.add(lblUserDisplay);
        add(header, BorderLayout.NORTH);

        // Table
        JTable tblResourceRequests = new JTable(); // Model from service.getRequests
        JScrollPane scroll = new JScrollPane(tblResourceRequests);
        add(scroll, BorderLayout.CENTER);

        // Buttons
        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton btnAddRequest = new JButton("Add Request");
        JButton btnEditRequest = new JButton("Edit Request");
        JButton btnDeleteRequest = new JButton("Delete Request");
        JButton btnLogout = new JButton("Logout");
        buttons.add(btnAddRequest); buttons.add(btnEditRequest); buttons.add(btnDeleteRequest); buttons.add(btnLogout);
        add(buttons, BorderLayout.SOUTH);

        // Listeners (stubs; implement dialogs)
        btnAddRequest.addActionListener(e -> /* Open add dialog */ {});
        btnEditRequest.addActionListener(e -> /* Edit selected */ {});
        btnDeleteRequest.addActionListener(e -> /* Delete selected */ {});
        btnLogout.addActionListener(e -> {
            SessionManager.getInstance().clear();
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });

        // Load data
        String orphanageId = SessionManager.getInstance().getAttribute("currentOrphanageId")
                .map(Object::toString)
                .getOrElse("");
        orphanageService.getRequests(orphanageId).onSuccess(list -> {
            // Set table model; e.g., DefaultTableModel with list
        });
    }
}
```
------------------------------------------------------------
### File: OrphanageHubApp.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.AuthenticationService;
import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.util.EdtGuard;
import com.orphanagehub.util.GlobalExceptionHandler;
import com.orphanagehub.util.SessionManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;

/**
 * Main application frame.
 * Manages navigation between panels using CardLayout.
 */
public class OrphanageHubApp extends JFrame {
    private static final long serialVersionUID = 1L;

    private static final Logger logger = LoggerFactory.getLogger(OrphanageHubApp.class);

    public static final String HOME_PANEL = "Home";
    public static final String LOGIN_PANEL = "Login";
    public static final String REGISTRATION_PANEL = "Registration";
    public static final String ADMIN_DASHBOARD = "AdminDashboard";
    public static final String ORPHANAGE_DASHBOARD = "OrphanageDashboard";
    public static final String DONOR_DASHBOARD = "DonorDashboard";
    public static final String VOLUNTEER_DASHBOARD = "VolunteerDashboard";

    private final JPanel mainPanel = new JPanel(new CardLayout());
    private String lastSelectedRole; // For role persistence

    public OrphanageHubApp() {
        super("OrphanageHub");
        GlobalExceptionHandler.install();
        initUI();
        add(mainPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(960, 720); // From Phase 2 container-width
        setLocationRelativeTo(null);
        setVisible(true);
        logger.info("OrphanageHub application started");
    }

    private void initUI() {
        // Apply Nimbus Look and Feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            logger.info("Nimbus Look and Feel applied successfully");
        } catch (Exception e) {
            logger.warn("Failed to apply Nimbus Look and Feel", e);
        }

        // Define colors from Phase 2 CSS
        Color primary = new Color(0x004a99);
        Color primaryLight = new Color(0xe6f0ff);
        Color textPrimary = new Color(0x212529);
        Color textSecondary = new Color(0x5a6268);
        Color border = new Color(0xdee2e6);
        Color background = new Color(0xf8f9fa);
        Color white = Color.WHITE;
        Color success = new Color(0x198754);

        // Set global UI defaults
        UIManager.put("OptionPane.background", background);
        UIManager.put("Panel.background", background);
        UIManager.put("Button.background", primary);
        UIManager.put("Button.foreground", white);
        UIManager.put("Label.foreground", textPrimary);
        UIManager.put("TextField.background", white);
        UIManager.put("TextField.border", BorderFactory.createLineBorder(border));
        // Etc. for other components

        // Add panels
        mainPanel.add(new HomePanel(this), HOME_PANEL);
        mainPanel.add(new LoginPanel(this), LOGIN_PANEL);
        mainPanel.add(new RegistrationPanel(this), REGISTRATION_PANEL);
        mainPanel.add(new AdminDashboardPanel(this), ADMIN_DASHBOARD);
        mainPanel.add(new OrphanageDashboardPanel(this), ORPHANAGE_DASHBOARD);
        mainPanel.add(new DonorDashboardPanel(this), DONOR_DASHBOARD);
        mainPanel.add(new VolunteerDashboardPanel(this), VOLUNTEER_DASHBOARD);

        navigateTo(HOME_PANEL); // Start at home
    }

    /**
     * Navigates to a specific panel.
     * @param panelName The name of the panel to show.
     */
    public void navigateTo(String panelName) {
        EdtGuard.runOnEdt(() -> {
            CardLayout cl = (CardLayout) mainPanel.getLayout();
            cl.show(mainPanel, panelName);
            logger.debug("Navigating to: {}", panelName);
        });
    }

    /**
     * Gets the last selected role.
     * @return The role string.
     */
    public String getLastSelectedRole() {
        return lastSelectedRole;
    }

    /**
     * Sets the last selected role.
     * @param role The role to set.
     */
    public void setLastSelectedRole(String role) {
        this.lastSelectedRole = role;
    }

    // Helper: Navigate based on role (from session)
    public String dashboardForRole(String role) {
        return switch (role) {
            case "Admin" -> ADMIN_DASHBOARD;
            case "OrphanageStaff" -> ORPHANAGE_DASHBOARD;
            case "Donor" -> DONOR_DASHBOARD;
            case "Volunteer" -> VOLUNTEER_DASHBOARD;
            default -> HOME_PANEL;
        };
    }

    public static void main(String[] args) {
        EdtGuard.runOnEdt(() -> new OrphanageHubApp());
    }
}
```
------------------------------------------------------------
### File: RegistrationPanel.java
```java
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.util.ValidationUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Arrays;

/**
 * Registration panel for new users.
 * Matches Phase 2 FrmRegistration: labels, fields, combo (adaptive), button.
 */
public class RegistrationPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final transient OrphanageHubApp mainApp;
    private final transient RegistrationService registrationService = new RegistrationService();

    public RegistrationPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;

        JLabel lblUsername = new JLabel("Username:");
        gbc.gridx = 0; gbc.gridy = 0;
        add(lblUsername, gbc);

        JTextField txtUsername = new JTextField(20);
        gbc.gridx = 1;
        add(txtUsername, gbc);

        JLabel lblEmail = new JLabel("Email:");
        gbc.gridx = 0; gbc.gridy = 1;
        add(lblEmail, gbc);

        JTextField txtEmail = new JTextField(20);
        gbc.gridx = 1;
        add(txtEmail, gbc);

        JLabel lblFullName = new JLabel("Full Name:");
        gbc.gridx = 0; gbc.gridy = 2;
        add(lblFullName, gbc);

        JTextField txtFullName = new JTextField(20);
        gbc.gridx = 1;
        add(txtFullName, gbc);

        JLabel lblPassword = new JLabel("Password:");
        gbc.gridx = 0; gbc.gridy = 3;
        add(lblPassword, gbc);

        JPasswordField txtPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtPassword, gbc);

        JLabel lblConfirmPassword = new JLabel("Confirm Password:");
        gbc.gridx = 0; gbc.gridy = 4;
        add(lblConfirmPassword, gbc);

        JPasswordField txtConfirmPassword = new JPasswordField(20);
        gbc.gridx = 1;
        add(txtConfirmPassword, gbc);

        // Role/orphanage selector (adaptive: show combo if staff)
        JLabel lblRole = new JLabel("Role:");
        gbc.gridx = 0; gbc.gridy = 5;
        add(lblRole, gbc);

        JComboBox<String> cmbRole = new JComboBox<>(new String[]{"Donor", "Orphanage Staff", "Volunteer", "Admin"});
        gbc.gridx = 1;
        add(cmbRole, gbc);

        JComboBox<String> cmbOrphanage = new JComboBox<>(); // Populate from DAO if needed
        cmbOrphanage.setVisible(false);
        gbc.gridy = 6;
        add(cmbOrphanage, gbc);

        // Adaptive listener
        cmbRole.addActionListener(e -> cmbOrphanage.setVisible("Orphanage Staff".equals(cmbRole.getSelectedItem())));

        JButton btnRegister = new JButton("Register");
        gbc.gridx = 0; gbc.gridy = 7; gbc.gridwidth = 2;
        add(btnRegister, gbc);

        // Register listener
        btnRegister.addActionListener(e -> {
            registrationService.register(txtUsername.getText(), txtEmail.getText(), txtFullName.getText(),
                            txtPassword.getPassword(), txtConfirmPassword.getPassword(), (String) cmbRole.getSelectedItem())
                    .onSuccess(user -> {
                        showSuccess("Registration successful!");
                        mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
                    })
                    .onFailure(ex -> showError(ex.getMessage()));
            Arrays.fill(txtPassword.getPassword(), '0');
            Arrays.fill(txtConfirmPassword.getPassword(), '0');
        });
    }

    // Custom success dialog (green border)
    private void showSuccess(String msg) {
        JDialog dialog = new JDialog(mainApp, "Success", true);
        JLabel label = new JLabel(msg);
        label.setForeground(new Color(0x198754)); // Success from CSS
        label.setBorder(BorderFactory.createLineBorder(new Color(0x198754), 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa));
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }

    private void showError(String msg) {
        // Same as LoginPanel
        JDialog dialog = new JDialog(mainApp, "Error", true);
        JLabel label = new JLabel(msg);
        label.setForeground(Color.RED);
        label.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        label.setOpaque(true);
        label.setBackground(new Color(0xf8f9fa));
        dialog.add(label, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(mainApp);
        dialog.setVisible(true);
    }
}
```
------------------------------------------------------------
### File: VolunteerDashboardPanel.java
```java
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;

/**
 * Dashboard for volunteers.
 * Matches Phase 2 FrmVolunteerDashboard: header, search, filters, table, buttons.
 */
public class VolunteerDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    private final OrphanageHubApp mainApp;

    public VolunteerDashboardPanel(OrphanageHubApp mainApp) {
        this.mainApp = mainApp;
        setLayout(new BorderLayout());

        // Header
        JLabel lblHeader = new JLabel("Volunteer Dashboard");
        add(lblHeader, BorderLayout.NORTH);

        // Search
        JPanel searchPanel = new JPanel(new FlowLayout());
        JTextField txtSearchOpportunities = new JTextField(20);
        JComboBox<String> cmbFilterLocation = new JComboBox<>(new String[]{"All", "City1"});
        JComboBox<String> cmbSkillFilter = new JComboBox<>(new String[]{"All", "Teaching"});
        JButton btnSearch = new JButton("Search");
        JButton btnSignUp = new JButton("Sign Up");
        JButton btnLogout = new JButton("Logout");
        searchPanel.add(txtSearchOpportunities); 
        searchPanel.add(cmbFilterLocation); 
        searchPanel.add(cmbSkillFilter);
        searchPanel.add(btnSearch); 
        searchPanel.add(btnSignUp); 
        searchPanel.add(btnLogout);
        add(searchPanel, BorderLayout.NORTH);

        // Table
        JTable tblOpportunities = new JTable();
        add(new JScrollPane(tblOpportunities), BorderLayout.CENTER);

        // Listeners
        btnSearch.addActionListener(e -> {
            // Filter opportunities
        });
        btnSignUp.addActionListener(e -> {
            // Sign up for selected
        });
        btnLogout.addActionListener(e -> {
            mainApp.navigateTo(OrphanageHubApp.HOME_PANEL);
        });
    }
}
```
------------------------------------------------------------
### File: WelcomePanel.java
```java
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WelcomePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(WelcomePanel.class);

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

    public WelcomePanel(Runnable registerAction, Runnable loginAction) {
        setLayout(new BorderLayout());

        JPanel contentPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        contentPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Welcome to OrphanageHub");
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLECOLOR_DARK);

        JButton btnRegister = createButton("Register", registerAction);
        JButton btnLogin = createButton("Login", loginAction);

        contentPanel.add(lblTitle);
        contentPanel.add(btnRegister);
        contentPanel.add(btnLogin);

        add(contentPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private JButton createButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        button.setPreferredSize(new Dimension(150, 50));
        button.setForeground(BUTTONFG_DARK);
        button.setBackground(BUTTONBG_DARK);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(e -> action.run());
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(BUTTONHOVER_BG_DARK);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(BUTTONBG_DARK);
            }
        });
        return button;
    }
}
```
------------------------------------------------------------
### File: DonorDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DonorDashboardPanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LoggerFactory.getLogger(DonorDashboardPanel.class);

    private final transient Runnable logoutAction;
    private transient User donorUser;
    private JLabel userLabel;
    private JTable resultsTable;
    private DefaultTableModel tableModel;
    private JTextField txtSearch;
    private JComboBox<String> cmbLocation;
    private JComboBox<String> cmbCategory;

    private transient DonorService donorService;

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color BUTTONSEARCH_BG = new Color(72, 149, 239);
    private static final Color BUTTONSEARCH_HOVER_BG = new Color(92, 169, 249);
    private static final Color BUTTONDONATEBG = new Color(60, 179, 113);
    private static final Color BUTTONDONATEHOVER_BG = new Color(70, 190, 123);

    public DonorDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        this.donorService = new DonorService();
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize DonorDashboardPanel", e);
        }
        logger.debug("DonorDashboard initialized");
    }

    public void setDonorUser(User user) {
        this.donorUser = new User(user);
        logger.info("Donor user set: {}", user.getUsername());
        refreshUI();
        loadOrphanageData();
    }

    private void refreshUI() {
        if (donorUser != null && userLabel != null) {
            userLabel.setText("User: " + donorUser.getUsername());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        add(createHeaderPanel(), BorderLayout.NORTH);
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        contentPanel.add(createSearchFilterPanel(), BorderLayout.NORTH);
        createResultsTable();
        JScrollPane scrollPane = new JScrollPane(resultsTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2764");
        iconLabel.setFont(new Font("Segoe UI Symbol", Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 105, 180));
        JLabel nameLabel = new JLabel("Donor Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("User: Loading...");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(
                e -> {
                    int confirm =
                            JOptionPane.showConfirmDialog(
                                    this,
                                    "Are you sure you want to logout?",
                                    "Confirm Logout",
                                    JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        logoutAction.run();
                    }
                });
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        JLabel lblSearch = new JLabel("Search:");
        styleFormLabel(lblSearch);
        txtSearch = new JTextField(20);
        styleTextField(txtSearch);
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        cmbLocation = new JComboBox<>(new String[] {"Any Location"});
        styleComboBox(cmbLocation);
        JLabel lblFilterCategory = new JLabel("Need Category:");
        styleFormLabel(lblFilterCategory);
        cmbCategory =
                new JComboBox<>(
                        new String[] {
                            "Any Category",
                            "Food",
                            "Clothing",
                            "Education",
                            "Medical",
                            "Funding",
                            "Other"
                        });
        styleComboBox(cmbCategory);
        JButton btnSearch = new JButton("Apply Filters");
        styleActionButton(btnSearch, "Find orphanages or requests matching criteria");
        btnSearch.setBackground(BUTTONSEARCH_BG);
        btnSearch.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnSearch.setBackground(BUTTONSEARCH_HOVER_BG);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnSearch.setBackground(BUTTONSEARCH_BG);
                    }
                });
        btnSearch.addActionListener(e -> performSearch());
        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterCategory);
        panel.add(cmbCategory);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        return panel;
    }

    private void createResultsTable() {
        String[] columnNames = {
            "Orphanage Name", "Location", "Contact", "Current Needs", "Actions"
        };
        tableModel =
                new DefaultTableModel(columnNames, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return column == 4;
                    }
                };
        resultsTable = new JTable(tableModel);
        styleTable(resultsTable);
        resultsTable.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
        resultsTable.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox()));
        resultsTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        resultsTable.getColumnModel().getColumn(1).setPreferredWidth(120);
        resultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        resultsTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        resultsTable.getColumnModel().getColumn(4).setPreferredWidth(120);
    }

    private void loadOrphanageData() {
        List<OrphanageInfo> orphanages = new ArrayList<>();
        // Add sample data
        orphanages.add(
                new OrphanageInfo(
                        "Hope Children's Home", "New York, NY", "John Doe", "Food, Clothing"));
        orphanages.add(
                new OrphanageInfo(
                        "Sunshine Orphanage",
                        "Los Angeles, CA",
                        "Jane Smith",
                        "Education materials"));
        orphanages.add(
                new OrphanageInfo(
                        "Future Stars", "Chicago, IL", "Bob Johnson", "Medical supplies"));

        updateTable(orphanages);
        updateLocationFilter(orphanages);
    }

    private void updateTable(List<OrphanageInfo> orphanages) {
        tableModel.setRowCount(0);
        for (OrphanageInfo info : orphanages) {
            Object[] row = {
                info.getName(),
                info.getAddress(),
                info.getContactPerson(),
                info.getCurrentNeeds(),
                "View Details"
            };
            tableModel.addRow(row);
        }
    }

    private void updateLocationFilter(List<OrphanageInfo> orphanages) {
        cmbLocation.removeAllItems();
        cmbLocation.addItem("Any Location");
        List<String> locations =
                orphanages.stream()
                        .map(info -> extractCity(info.getAddress()))
                        .distinct()
                        .collect(Collectors.toList());
        for (String location : locations) {
            cmbLocation.addItem(location);
        }
    }

    private String extractCity(String address) {
        if (address != null && address.contains(",")) {
            return address.split(",")[0].trim();
        }
        return address != null ? address : "Unknown";
    }

    private void performSearch() {
        String searchText = txtSearch.getText();
        String location = (String) cmbLocation.getSelectedItem();
        String category = (String) cmbCategory.getSelectedItem();

        JOptionPane.showMessageDialog(
                this,
                "Searching for: "
                        + searchText
                        + "\nLocation: "
                        + location
                        + "\nCategory: "
                        + category,
                "Search",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void showOrphanageDetails(int row) {
        String orphanageName = (String) tableModel.getValueAt(row, 0);
        JOptionPane.showMessageDialog(
                this,
                "Showing details for: " + orphanageName,
                "Orphanage Details",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(35);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLEHEADER_BG);
        header.setForeground(TABLEHEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int o) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int o) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        return b;
                    }
                });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()),
                        new EmptyBorder(6, 12, 6, 12)));
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        field.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),
                        new EmptyBorder(4, 6, 4, 6)));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));
    }

    static class ButtonRenderer extends JButton implements TableCellRenderer {
        private static final long serialVersionUID = 1L;
        public ButtonRenderer() {
            setOpaque(true);
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            setForeground(BUTTONFG_DARK);
            setBackground(BUTTONSEARCH_BG);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            setText((value == null) ? " " : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        private static final long serialVersionUID = 1L;
        protected JButton button;
        private String label;
        private boolean isPushed;
        private int currentRow;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.setForeground(BUTTONFG_DARK);
            button.setBackground(BUTTONSEARCH_BG);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table, Object value, boolean isSelected, int row, int column) {
            label = (value == null) ? " " : value.toString();
            button.setText(label);
            isPushed = true;
            currentRow = row;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                showOrphanageDetails(currentRow);
            }
            isPushed = false;
            return label;
        }
    }

    // Placeholder model class
    static class OrphanageInfo {
        private String name;
        private String address;
        private String contactPerson;
        private String currentNeeds;

        public OrphanageInfo(
                String name, String address, String contactPerson, String currentNeeds) {
            this.name = name;
            this.address = address;
            this.contactPerson = contactPerson;
            this.currentNeeds = currentNeeds;
        }

        public String getName() {
            return name;
        }

        public String getAddress() {
            return address;
        }

        public String getContactPerson() {
            return contactPerson;
        }

        public String getCurrentNeeds() {
            return currentNeeds;
        }
    }
}
```
------------------------------------------------------------
### File: OrphanageDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.*;
import com.orphanagehub.service.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrphanageDashboardPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(OrphanageDashboardPanel.class);

    private final Runnable logoutAction;
    private JLabel orphanageNameLabel;
    private JLabel userLabel;
    private JLabel statActiveRequests;
    private JLabel statPendingDonations;
    private JLabel statActiveVolunteers;
    private JTable resourceTable;
    private DefaultTableModel tableModel;
    private JTabbedPane tabbedPane;

    private User staffUser;
    private Orphanage orphanage;
    private OrphanageService orphanageService;

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BGSELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLECOLOR_DARK;
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color ACCENTCOLORORANGE = new Color(230, 145, 56);
    private static final Color ACCENTCOLOR_BLUE = new Color(72, 149, 239);
    private static final Color ACCENTCOLOR_GREEN = new Color(87, 190, 106);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);

    public OrphanageDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        this.orphanageService = new OrphanageService();
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize OrphanageDashboardPanel", e);
        }
        logger.debug("OrphanageDashboard initialized");
    }

    public void setStaffUser(User user) {
        this.staffUser = new User(user);
        logger.info("Staff user set: {}", user.getUsername());
        loadOrphanageData();
        refreshUI();
        if (tabbedPane != null) {
            tabbedPane.setSelectedIndex(0);
        }
    }

    private void loadOrphanageData() {
        if (staffUser == null) {
            logger.warn("Attempted to load orphanage data with null user");
            return;
        }
        try {
            orphanage = orphanageService.getOrphanageForStaff(staffUser);
            if (orphanage == null) {
                logger.error("No orphanage found for user: {}", staffUser.getUsername());
                JOptionPane.showMessageDialog(
                        this,
                        "No orphanage is associated with your account.\n"
                                + "Please contact the system administrator.",
                        "Configuration Error",
                        JOptionPane.ERROR_MESSAGE);
                logoutAction.run();
            } else {
                logger.info("Loaded orphanage: {}", orphanage.getName());
            }
        } catch (ServiceException e) {
            logger.error("Failed to load orphanage data", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Error loading orphanage data:\n" + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            logoutAction.run();
        }
    }

    private void refreshUI() {
        if (orphanage != null && orphanageNameLabel != null) {
            orphanageNameLabel.setText(orphanage.getName());
        }
        if (staffUser != null && userLabel != null) {
            userLabel.setText("User: " + staffUser.getUsername());
        }
        loadResourceRequests();
        updateStatistics();
    }

    private void updateStatistics() {
        if (orphanage == null) return;
        try {
            List<ResourceRequest> requests =
                    orphanageService.getRequestsForOrphanage(orphanage.getOrphanageID());
            long activeRequests =
                    requests.stream().filter(r -> "Open".equalsIgnoreCase(r.getCategory())).count();
            long pendingDonations = 0;

            if (statActiveRequests != null)
                statActiveRequests.setText(String.valueOf(activeRequests));
            if (statPendingDonations != null)
                statPendingDonations.setText(String.valueOf(pendingDonations));
            if (statActiveVolunteers != null) statActiveVolunteers.setText("8");
        } catch (ServiceException e) {
            logger.error("Failed to update statistics", e);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        add(createHeaderPanel(), BorderLayout.NORTH);
        tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2302");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(135, 206, 250));
        orphanageNameLabel = new JLabel("Loading...");
        orphanageNameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        orphanageNameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(orphanageNameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        userLabel = new JLabel("User: Loading...");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(
                e -> {
                    int confirm =
                            JOptionPane.showConfirmDialog(
                                    this,
                                    "Are you sure you want to logout?",
                                    "Confirm Logout",
                                    JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        logger.info("User logged out: {}", staffUser.getUsername());
                        logoutAction.run();
                    }
                });
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane pane = new JTabbedPane();
        pane.setOpaque(false);
        pane.setForeground(TAB_FG);
        pane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        pane.setUI(
                new javax.swing.plaf.basic.BasicTabbedPaneUI() {
                    @Override
                    protected void installDefaults() {
                        super.installDefaults();
                        lightHighlight = TAB_BGSELECTED;
                        shadow = BORDERCOLOR_DARK;
                        darkShadow = DARKBGEND;
                        focus = TAB_BGSELECTED;
                    }

                    @Override
                    protected void paintTabBackground(
                            Graphics g, int p, int i, int x, int y, int w, int h, boolean s) {
                        g.setColor(s ? TAB_BGSELECTED : TAB_BG_UNSELECTED);
                        g.fillRoundRect(x, y, w, h + 5, 5, 5);
                    }

                    @Override
                    protected void paintTabBorder(
                            Graphics g, int p, int i, int x, int y, int w, int h, boolean s) {}

                    @Override
                    protected void paintContentBorder(
                            Graphics g, int tabPlacement, int selectedIndex) {
                        int width = tabPane.getWidth();
                        int height = tabPane.getHeight();
                        Insets insets = tabPane.getInsets();
                        int tabAreaHeight =
                                calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
                        int x = insets.left;
                        int y = insets.top + tabAreaHeight - 1;
                        int w = width - insets.right - insets.left;
                        int h = height - insets.top - insets.bottom - tabAreaHeight;
                        g.setColor(BORDERCOLOR_DARK);
                        g.drawRect(x, y, w - 1, h - 1);
                    }
                });
        pane.addTab("Overview", createOverviewTab());
        pane.addTab("Resource Requests", createResourceRequestsTab());
        pane.addTab("Orphanage Profile", createProfileTab());
        return pane;
    }

    private JPanel createOverviewTab() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 25, 25, 25));

        statActiveRequests = new JLabel("0", SwingConstants.CENTER);
        statPendingDonations = new JLabel("0", SwingConstants.CENTER);
        statActiveVolunteers = new JLabel("0", SwingConstants.CENTER);

        JPanel activeRequestsCard =
                createStatCard("Active Requests", statActiveRequests, ACCENTCOLORORANGE);
        JPanel pendingDonationsCard =
                createStatCard("Pending Donations", statPendingDonations, ACCENTCOLOR_BLUE);
        JPanel activeVolunteersCard =
                createStatCard("Active Volunteers", statActiveVolunteers, ACCENTCOLOR_GREEN);

        panel.add(activeRequestsCard);
        panel.add(pendingDonationsCard);
        panel.add(activeVolunteersCard);
        return panel;
    }

    private JPanel createStatCard(String title, JLabel valueLabel, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout(5, 5));
        card.setBackground(TAB_BG_UNSELECTED);
        card.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),
                        new EmptyBorder(15, 20, 15, 20)));

        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 36));
        valueLabel.setForeground(TITLECOLOR_DARK);
        card.add(valueLabel, BorderLayout.CENTER);

        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        titleLabel.setForeground(TEXTCOLOR_DARK);
        card.add(titleLabel, BorderLayout.SOUTH);

        return card;
    }

    private JPanel createResourceRequestsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        // Add toolbar
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT));
        toolbar.setOpaque(false);
        JButton btnNewRequest = new JButton("New Request");
        styleActionButton(btnNewRequest, "Create a new resource request");
        toolbar.add(btnNewRequest);
        panel.add(toolbar, BorderLayout.NORTH);

        // Create table
        String[] columnNames = {"Item", "Category", "Quantity", "Priority", "Status", "Date"};
        tableModel = new DefaultTableModel(columnNames, 0);
        resourceTable = new JTable(tableModel);
        styleTable(resourceTable);

        JScrollPane scrollPane = new JScrollPane(resourceTable);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private void loadResourceRequests() {
        if (tableModel != null) {
            tableModel.setRowCount(0);
            // Add sample data
            tableModel.addRow(
                    new Object[] {
                        "School Supplies", "Education", "50", "High", "Open", "2025-01-15"
                    });
            tableModel.addRow(
                    new Object[] {
                        "Winter Clothes", "Clothing", "30", "Medium", "Partial", "2025-01-10"
                    });
        }
    }

    private JPanel createProfileTab() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Add form fields
        gbc.gridx = 0;
        gbc.gridy = 0;
        JLabel lblName = new JLabel("Orphanage Name:");
        styleFormLabel(lblName);
        formPanel.add(lblName, gbc);

        gbc.gridx = 1;
        JTextField txtName = new JTextField(20);
        styleTextField(txtName);
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        JLabel lblAddress = new JLabel("Address:");
        styleFormLabel(lblAddress);
        formPanel.add(lblAddress, gbc);

        gbc.gridx = 1;
        JTextArea txtAddress = new JTextArea(3, 20);
        styleTextArea(txtAddress);
        formPanel.add(new JScrollPane(txtAddress), gbc);

        panel.add(formPanel, BorderLayout.NORTH);
        return panel;
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int o) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int o) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        return b;
                    }
                });
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()),
                        new EmptyBorder(6, 12, 6, 12)));
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        field.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(INPUTBORDER_DARK, 1),
                        new EmptyBorder(4, 6, 4, 6)));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleTextArea(JTextArea area) {
        area.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        area.setForeground(INPUTFG_DARK);
        area.setBackground(INPUTBG_DARK);
        area.setBorder(new EmptyBorder(4, 6, 4, 6));
        area.setCaretColor(Color.LIGHT_GRAY);
    }
}
```
------------------------------------------------------------
### File: RegistrationPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.Orphanage;
import com.orphanagehub.model.User;
import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.service.ServiceException;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.function.Supplier;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UI panel for user registration. This class is responsible for gathering user input and passing it
 * to the RegistrationService for validation and persistence.
 *
 * <p>PAT Rubric Coverage: - 3.2: Strict separation of UI from logic. - 3.3: Communicates with the
 * service layer via the performRegistration() method. - 3.6: Displays user-friendly error messages
 * from ServiceException. - 3.8: Provides a clear, role-aware registration form.
 */
public class RegistrationPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(RegistrationPanel.class);

    private final Runnable backAction;
    private final Runnable loginAction;
    private final Supplier<String> roleSupplier;
    private String currentRole = "User";

    // Backend service reference
    private final RegistrationService registrationService;

    // Input fields
    private final JTextField txtUsername;
    private final JTextField txtEmail;
    private final JTextField txtFullName;
    private final JPasswordField txtPassword;
    private final JPasswordField txtConfirmPassword;
    private final JComboBox<String> cmbOrphanage;
    private final JCheckBox chkTerms;

    // UI elements that update by role
    private final JLabel lblTitle;
    private final JLabel lblRoleIcon;
    private final JPanel orphanagePanel;

    // Colors
    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTONREGISTER_BG = new Color(60, 179, 113);
    private static final Color BUTTONREGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOXCOLOR = new Color(180, 180, 180);

    public RegistrationPanel(
            Runnable backAction, Runnable loginAction, Supplier<String> roleSupplier) {
        this.backAction = backAction;
        this.loginAction = loginAction;
        this.roleSupplier = roleSupplier;
        this.registrationService = new RegistrationService();
        setLayout(new BorderLayout());

        // Initialize components
        txtUsername = new JTextField(25);
        txtEmail = new JTextField(25);
        txtFullName = new JTextField(25);
        txtPassword = new JPasswordField(25);
        txtConfirmPassword = new JPasswordField(25);
        cmbOrphanage = new JComboBox<>();
        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        lblTitle = new JLabel("Register as " + currentRole);
        lblRoleIcon = new JLabel("?");
        orphanagePanel = new JPanel(new BorderLayout(5, 0));

        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize RegistrationPanel", e);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        var g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Title & Role Icon
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLECOLOR_DARK);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLECOLOR_DARK);
        titlePanel.add(lblRoleIcon);
        titlePanel.add(lblTitle);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 5, 20, 5);
        formPanel.add(titlePanel, gbc);

        // Input Fields
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5);

        int gridY = 1;
        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername);
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail);
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName);
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword);
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword);

        // Orphanage Selection (for staff)
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        styleComboBox(cmbOrphanage);
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false);

        // Terms Checkbox
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        formPanel.add(chkTerms, gbc);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        btnRegister.setBackground(BUTTONREGISTER_BG);
        btnRegister.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnRegister.setBackground(BUTTONREGISTER_HOVER_BG);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnRegister.setBackground(BUTTONREGISTER_BG);
                    }
                });
        btnRegister.addActionListener(e -> performRegistration());

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTONBG_DARK.darker());
        btnBack.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnBack.setBackground(BUTTONHOVER_BG_DARK);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnBack.setBackground(BUTTONBG_DARK.darker());
                    }
                });
        btnBack.addActionListener(e -> backAction.run());

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        formPanel.add(buttonPanel, gbc);

        // Scroll
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        add(scrollPane, BorderLayout.CENTER);
    }

    private void performRegistration() {
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(
                    this,
                    "You must agree to the Terms of Service.",
                    "Registration Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        String password = new String(txtPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());
        String selectedOrphanage =
                orphanagePanel.isVisible() ? (String) cmbOrphanage.getSelectedItem() : null;

        try {
            logger.info("Attempting registration for user: " + username);
            User newUser =
                    registrationService.registerUser(
                            username,
                            email,
                            fullName,
                            password,
                            confirmPassword,
                            currentRole,
                            selectedOrphanage);

            logger.info("Registration successful for user: " + newUser.getUsername());
            JOptionPane.showMessageDialog(
                    this,
                    "Registration successful for "
                            + newUser.getUsername()
                            + "!\nYou can now log in.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            loginAction.run();

        } catch (ServiceException ex) {
            logger.warn("Registration failed for user " + username + ": " + ex.getMessage());
            JOptionPane.showMessageDialog(
                    this, ex.getMessage(), "Registration Failed", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        currentRole = roleSupplier.get();
        lblTitle.setText("Register as " + currentRole);
        updateRoleSpecificUI();
    }

    private void updateRoleSpecificUI() {
        switch (currentRole) {
            case "Donor" -> {
                lblRoleIcon.setText("\u2764");
                lblRoleIcon.setForeground(new Color(255, 105, 180));
            }
            case "OrphanageStaff" -> {
                lblRoleIcon.setText("\u2302");
                lblRoleIcon.setForeground(new Color(135, 206, 250));
            }
            case "Volunteer" -> {
                lblRoleIcon.setText("\u2605");
                lblRoleIcon.setForeground(new Color(255, 215, 0));
            }
            default -> {
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLECOLOR_DARK);
            }
        }

        boolean isStaff = "OrphanageStaff".equals(currentRole);
        orphanagePanel.setVisible(isStaff);
        if (isStaff) {
            loadAvailableOrphanages();
        }
        revalidate();
        repaint();
    }

    private void loadAvailableOrphanages() {
        try {
            List<Orphanage> orphanages = registrationService.getUnassignedOrphanages();
            cmbOrphanage.removeAllItems();
            cmbOrphanage.addItem("Select Orphanage...");
            for (Orphanage o : orphanages) {
                cmbOrphanage.addItem(o.getName());
            }
        } catch (ServiceException e) {
            logger.error("Could not load orphanages for registration form", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Could not load orphanages: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Styling
    private void addFormField(
            JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.fill = GridBagConstraints.NONE;
        panel.add(label, gbc);

        styleTextField(field);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(field, gbc);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(
                new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding));

        if (field instanceof JTextField textField) {
            textField.setCaretColor(Color.LIGHT_GRAY);
        } else if (field instanceof JPasswordField passwordField) {
            passwordField.setCaretColor(Color.LIGHT_GRAY);
        }
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));
    }

    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOXCOLOR);
        checkBox.setOpaque(false);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        Border line = BorderFactory.createLineBorder(BUTTONBG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
    }
}
```
------------------------------------------------------------
### File: VolunteerDashboardPanel.java.bak
```text
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VolunteerDashboardPanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(VolunteerDashboardPanel.class);

    private final Runnable logoutAction; // To store the logged-in user's data
    private User currentUser; // To store the logged-in user's data
    private JLabel userLabel; // To update the user's name on the display

    // --- Colors (Same as AdminDashboardPanel) ---
    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXTCOLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDERCOLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUTBG_DARK = new Color(60, 60, 60);
    private static final Color INPUTFG_DARK = new Color(220, 220, 220);
    private static final Color INPUTBORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLEHEADER_BG = new Color(65, 75, 77);
    private static final Color TABLEHEADER_FG = TITLECOLOR_DARK;
    private static final Color TABLEGRIDCOLOR = BORDERCOLOR_DARK;
    private static final Color TABLECELLBG = new Color(55, 62, 64);
    private static final Color TABLECELLFG = TEXTCOLOR_DARK;
    private static final Color TABLECELLSELECTED_BG = BUTTONBG_DARK;
    private static final Color TABLECELLSELECTED_FG = BUTTONFG_DARK;
    private static final Color BUTTONAPPLY_BG = new Color(87, 190, 106);
    private static final Color BUTTONAPPLY_HOVER_BG = new Color(97, 200, 116);

    public VolunteerDashboardPanel(Runnable logoutAction) {
        this.logoutAction = logoutAction;
        setLayout(new BorderLayout(0, 0));
        try {
            initComponents();
        } catch (Exception e) {
            logger.error("Failed to initialize VolunteerDashboardPanel", e);
        }
    }

    /**
     * Sets the currently logged-in volunteer user for this panel. This method updates the UI with
     * the user's information.
     *
     * @param user The logged-in volunteer.
     */
    public void setVolunteerUser(User user) {
        this.currentUser = new User(user);
        if (user != null) {
            this.userLabel.setText("User: " + user.getUsername());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // --- Header Panel ---
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);

        // --- Main Content Area (Search + Table + Status) ---
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));

        // --- Search/Filter Panel ---
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);

        // --- Opportunities Table ---
        JTable opportunitiesTable = createOpportunitiesTable();
        JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);

        // --- Application Status Panel (Placeholder) ---
        JPanel statusPanel = createStatusPanel();
        contentPanel.add(statusPanel, BorderLayout.SOUTH);

        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, BORDERCOLOR_DARK),
                        new EmptyBorder(10, 20, 10, 20)));

        // Left side: Role Icon and Title
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2605"); // Star symbol
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0)); // Gold color
        JLabel nameLabel = new JLabel("Volunteer Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLECOLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);

        // Right side: User info and Logout Button
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);

        userLabel = new JLabel("Welcome, Volunteer");
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXTCOLOR_DARK);

        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43)); // Reddish logout
        btnLogout.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        btnLogout.setBackground(new Color(231, 76, 60));
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        btnLogout.setBackground(new Color(192, 57, 43));
                    }
                });
        btnLogout.addActionListener(e -> logoutAction.run());

        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);

        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);

        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"}; // Placeholders
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);

        JLabel lblFilterSkills = new JLabel("Skills:");
        styleFormLabel(lblFilterSkills);
        JTextField txtSkills = new JTextField(15); // Text field for skills keywords
        styleTextField(txtSkills);

        JLabel lblFilterTime = new JLabel("Commitment:");
        styleFormLabel(lblFilterTime);
        String[] times = {
            "Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"
        }; // Placeholders
        JComboBox<String> cmbTime = new JComboBox<>(times);
        styleComboBox(cmbTime);

        JButton btnSearch = new JButton("Find Opportunities");
        styleActionButton(btnSearch, "Search for volunteer roles matching criteria");
        btnSearch.addActionListener(
                e ->
                        JOptionPane.showMessageDialog(
                                this,
                                "Search logic not implemented.",
                                "Search",
                                JOptionPane.INFORMATION_MESSAGE));

        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterSkills);
        panel.add(txtSkills);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterTime);
        panel.add(cmbTime);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);

        return panel;
    }

    private JTable createOpportunitiesTable() {
        String[] columnNames = {
            "Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Action"
        };
        Object[][] data = {
            {
                "Hope Children's Home",
                "Weekend Tutor",
                "City A",
                "Teaching, Patience",
                "Weekends",
                "Apply"
            },
            {
                "Bright Future Orphanage",
                "Event Helper",
                "City B",
                "Organizing, Energetic",
                "Event-Based",
                "Apply"
            },
            {
                "Little Angels Shelter",
                "After-School Care",
                "City A",
                "Childcare, First Aid",
                "Weekdays",
                "Applied"
            },
            {"Sunshine House", "Gardening Assistant", "Region C", "Gardening", "Flexible", "Apply"},
            {
                "Hope Children's Home",
                "Reading Buddy",
                "City A",
                "Reading, Communication",
                "Weekdays",
                "Apply"
            }
        };

        JTable table =
                new JTable(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return column == 5 && "Apply".equals(getValueAt(row, column));
                    }
                };

        styleTable(table);

        // Add button renderer/editor for the "Action" column
        table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer(BUTTONAPPLY_BG));
        table.getColumnModel()
                .getColumn(5)
                .setCellEditor(
                        new ButtonEditor(
                                new JCheckBox(),
                                BUTTONAPPLY_BG,
                                () -> {
                                    int selectedRow =
                                            table.convertRowIndexToModel(table.getEditingRow());
                                    String oppName =
                                            (String) table.getModel().getValueAt(selectedRow, 1);
                                    String orphName =
                                            (String) table.getModel().getValueAt(selectedRow, 0);
                                    JOptionPane.showMessageDialog(
                                            this,
                                            "Apply for: "
                                                    + oppName
                                                    + " at "
                                                    + orphName
                                                    + "\n(Functionality not implemented)",
                                            "Apply",
                                            JOptionPane.INFORMATION_MESSAGE);

                                    // Example to update status using DefaultTableModel:
                                    // ((DefaultTableModel) table.getModel()).setValueAt("Applied",
                                    // selectedRow, 5);
                                }));

        // Adjust column widths
        table.getColumnModel().getColumn(0).setPreferredWidth(150); // Orphanage
        table.getColumnModel().getColumn(1).setPreferredWidth(150); // Opportunity
        table.getColumnModel().getColumn(2).setPreferredWidth(100); // Location
        table.getColumnModel().getColumn(3).setPreferredWidth(180); // Skills
        table.getColumnModel().getColumn(4).setPreferredWidth(120); // Time
        table.getColumnModel().getColumn(5).setPreferredWidth(90); // Action

        return table;
    }

    private JPanel createStatusPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panel.setOpaque(false);
        panel.setBorder(
                new CompoundBorder(
                        BorderFactory.createMatteBorder(
                                1, 0, 0, 0, BORDERCOLOR_DARK), // Top border separator
                        new EmptyBorder(10, 5, 5, 5) // Padding
                        ));

        JLabel lblStatus = new JLabel("Status: 3 applications pending, 1 opportunity active");
        lblStatus.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 13));
        lblStatus.setForeground(TEXTCOLOR_DARK);
        panel.add(lblStatus);

        return panel;
    }

    // --- Styling Helpers ---
    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        label.setForeground(TEXTCOLOR_DARK);
    }

    private void styleTextField(JTextField field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        field.setForeground(INPUTFG_DARK);
        field.setBackground(INPUTBG_DARK);
        Border padding = new EmptyBorder(4, 6, 4, 6);
        field.setBorder(
                new CompoundBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1), padding));
        field.setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        comboBox.setForeground(INPUTFG_DARK);
        comboBox.setBackground(INPUTBG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUTBORDER_DARK, 1));

        for (Component c : comboBox.getComponents()) {
            if (c instanceof JButton) {
                ((JButton) c).setBackground(BUTTONBG_DARK);
                ((JButton) c).setBorder(BorderFactory.createEmptyBorder());
                break;
            }
        }

        Object p = comboBox.getUI().getAccessibleChild(comboBox, 0);
        if (p instanceof JPopupMenu) {
            JPopupMenu pm = (JPopupMenu) p;
            pm.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
            for (Component comp : pm.getComponents()) {
                if (comp instanceof JScrollPane) {
                    JScrollPane sp = (JScrollPane) comp;
                    sp.getViewport().setBackground(INPUTBG_DARK);
                    applyScrollbarUI(sp.getVerticalScrollBar());
                    Component l = sp.getViewport().getView();
                    if (l instanceof JList) {
                        @SuppressWarnings("rawtypes")
                        JList list = (JList) l;
                        list.setBackground(INPUTBG_DARK);
                        list.setForeground(INPUTFG_DARK);
                        list.setSelectionBackground(BUTTONBG_DARK);
                        list.setSelectionForeground(BUTTONFG_DARK);
                    }
                }
            }
        }
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLECELLBG);
        table.setForeground(TABLECELLFG);
        table.setGridColor(TABLEGRIDCOLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLECELLSELECTED_BG);
        table.setSelectionForeground(TABLECELLSELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0, 1));

        JTableHeader h = table.getTableHeader();
        h.setBackground(TABLEHEADER_BG);
        h.setForeground(TABLEHEADER_FG);
        h.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        h.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        h.setReorderingAllowed(true);
        h.setResizingAllowed(true);

        DefaultTableCellRenderer r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.LEFT);
        r.setVerticalAlignment(SwingConstants.CENTER);
        r.setBorder(new EmptyBorder(2, 5, 2, 5));
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(r);
        }
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDERCOLOR_DARK));
        applyScrollbarUI(scrollPane.getVerticalScrollBar());
        applyScrollbarUI(scrollPane.getHorizontalScrollBar());
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(
                new BasicScrollBarUI() {
                    @Override
                    protected void configureScrollBarColors() {
                        this.thumbColor = BUTTONBG_DARK;
                        this.trackColor = DARKBGEND;
                    }

                    @Override
                    protected JButton createDecreaseButton(int orientation) {
                        return createZeroButton();
                    }

                    @Override
                    protected JButton createIncreaseButton(int orientation) {
                        return createZeroButton();
                    }

                    private JButton createZeroButton() {
                        JButton b = new JButton();
                        b.setPreferredSize(new Dimension(0, 0));
                        b.setMaximumSize(new Dimension(0, 0));
                        b.setMinimumSize(new Dimension(0, 0));
                        return b;
                    }

                    @Override
                    protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
                        g.setColor(thumbColor);
                        g.fillRect(r.x, r.y, r.width, r.height);
                    }

                    @Override
                    protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
                        g.setColor(trackColor);
                        g.fillRect(r.x, r.y, r.width, r.height);
                    }
                });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTONFG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTONBG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(
                new CompoundBorder(
                        BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), padding));
        btn.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        if (btn.getBackground().equals(BUTTONBG_DARK)) {
                            btn.setBackground(BUTTONHOVER_BG_DARK);
                        }
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        if (btn.getBackground().equals(BUTTONHOVER_BG_DARK)) {
                            btn.setBackground(BUTTONBG_DARK);
                        }
                    }
                });
    }

    // --- Inner classes for Table Button ---
    static class ButtonRenderer extends JButton implements javax.swing.table.TableCellRenderer {
        private final Color defaultBg;

        public ButtonRenderer(Color background) {
            setOpaque(true);
            this.defaultBg = background;
            setForeground(BUTTONFG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2, 5, 2, 5));
            setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable t, Object v, boolean s, boolean f, int r, int c) {
            setText(v == null ? "" : v.toString());
            setBackground(s ? defaultBg.brighter() : defaultBg);
            return this;
        }
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private final Runnable action;
        private final Color bgColor;

        public ButtonEditor(JCheckBox c, Color bg, Runnable act) {
            super(c);
            this.action = act;
            this.bgColor = bg;
            button = new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTONFG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2, 5, 2, 5));
            button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 11));
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable t, Object v, boolean s, int r, int c) {
            label = (v == null) ? "" : v.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed && action != null) {
                action.run();
            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
}
```
------------------------------------------------------------
### Resource: frmHome.png
[Binary image file (28417 bytes) — not shown inline]
------------------------------------------------------------
### Resource: home.png
[Binary image file (25487 bytes) — not shown inline]

================================================================================
## 6. SUMMARY / STATS
================================================================================

- Total files scanned: 16
- Java files: 9
- Backup (.bak) files: 4
- Images / binary: 2

Generated by updateGuis.py

```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/commit_outputs/all_guis.txt
Source: current | Size: 167913 bytes
```text
================================================================================
Commit 2 — b8c09b86
Full hash: b8c09b86f52aa4cf1e790eacedefb4b31de99a22
Author: jared-one
Date: 2025-08-28 10:43:46 +0200
Message: latest
Generated: 2025-09-06T08:46:23.417345

Files (gui-only):
- src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
- src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
- src/main/java/com/orphanagehub/gui/HomePanel.java
- src/main/java/com/orphanagehub/gui/LoginPanel.java
- src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
- src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
- src/main/java/com/orphanagehub/gui/RegistrationPanel.java
- src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
- src/main/java/com/orphanagehub/gui/WelcomePanel.java
- src/main/java/com/orphanagehub/gui/frmHome.png
- src/main/java/com/orphanagehub/gui/home.png


------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
```
// src/main/java/com/orphanagehub/gui/AdminDashboardPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.service.AdminService;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.function.BiConsumer;

public class AdminDashboardPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private String adminUsername = "admin_user";
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPROVE_BG = new Color(60, 179, 113);
    private static final Color BUTTON_APPROVE_HOVER_BG = new Color(70, 190, 123);
    private static final Color BUTTON_REJECT_BG = new Color(192, 57, 43);
    private static final Color BUTTON_REJECT_HOVER_BG = new Color(231, 76, 60);
    private static final Color BUTTON_SUSPEND_BG = BUTTON_REJECT_BG;
    private static final Color BUTTON_SUSPEND_HOVER_BG = BUTTON_REJECT_HOVER_BG;

    public AdminDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2699");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(TITLE_COLOR_DARK);
        JLabel nameLabel = new JLabel("Administrator Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("Admin User: " + adminUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(BUTTON_REJECT_BG);
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_HOVER_BG); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(BUTTON_REJECT_BG); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
             @Override protected void installDefaults() { super.installDefaults(); lightHighlight=TAB_BG_SELECTED; shadow=BORDER_COLOR_DARK; darkShadow=DARK_BG_END; focus=TAB_BG_SELECTED; }
             @Override protected void paintTabBackground(Graphics g, int p, int i, int x, int y, int w, int h, boolean s) { g.setColor(s ? TAB_BG_SELECTED : TAB_BG_UNSELECTED); g.fillRoundRect(x, y, w, h+5, 5, 5); }
             @Override protected void paintTabBorder(Graphics g, int p, int i, int x, int y, int w, int h, boolean s) { /* Minimal border */ }
             @Override protected void paintContentBorder(Graphics g, int p, int i) { int w=tabPane.getWidth(); int h=tabPane.getHeight(); Insets ins=tabPane.getInsets(); int th=calculateTabAreaHeight(p, runCount, maxTabHeight); int x=ins.left; int y=ins.top+th-(lightHighlight.getAlpha()>0?1:0); int cw=w-ins.right-ins.left; int ch=h-ins.top-ins.bottom-y; g.setColor(BORDER_COLOR_DARK); g.drawRect(x, y, cw-1, ch-1); }
        });
        tabbedPane.addTab("Orphanage Verification", createVerificationTab());
        tabbedPane.addTab("User Management", createUserManagementTab());
        tabbedPane.addTab("System Overview", createSystemOverviewTab());
        return tabbedPane;
    }

    private JPanel createVerificationTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        String[] columnNames = {"Orphanage Name", "Contact", "Email", "Registered", "Status", "Actions"};
        Object[][] data = {
            {"New Hope Center", "Alice Smith", "alice@newhope.org", "2024-05-10", "Pending", "Verify"},
            {"Future Stars", "Bob Jones", "bob@futurestars.net", "2024-05-08", "Pending", "Verify"},
            {"Safe Haven Kids", "Charlie P.", "contact@safehaven.com", "2024-04-20", "Verified", "View"},
            {"Distant Dreams", "Diana Ross", "info@distdreams.org", "2024-05-11", "Pending", "Verify"}
        };
        JTable table = new JTable(data, columnNames) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        JPanel buttonPanelRenderer = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0));
        buttonPanelRenderer.setOpaque(false);
        JButton approveBtnRend = new JButton("✓");
        JButton rejectBtnRend = new JButton("✕");
        JButton detailsBtnRend = new JButton("...");
        styleMiniButton(approveBtnRend, BUTTON_APPROVE_BG);
        styleMiniButton(rejectBtnRend, BUTTON_REJECT_BG);
        styleMiniButton(detailsBtnRend, BUTTON_BG_DARK);
        buttonPanelRenderer.add(approveBtnRend);
        buttonPanelRenderer.add(rejectBtnRend);
        buttonPanelRenderer.add(detailsBtnRend);
        table.getColumnModel().getColumn(5).setCellRenderer((tbl, value, isSelected, hasFocus, row, column) -> buttonPanelRenderer);
        table.getColumnModel().getColumn(5).setCellEditor(new ActionPanelEditor(new JCheckBox(), (actionCommand, row) -> {
            String orphanageName = (String) table.getModel().getValueAt(row, 0);
            AdminService adminService = new AdminService();
            switch(actionCommand) {
                case "approve":
                    JOptionPane.showMessageDialog(this, "Approved: " + orphanageName, "Approve", JOptionPane.INFORMATION_MESSAGE);
                    table.getModel().setValueAt("Verified", row, 4);
                    break;
                case "reject":
                     if (JOptionPane.showConfirmDialog(this, "Reject " + orphanageName + "?", "Confirm Reject", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                         JOptionPane.showMessageDialog(this, "Rejected: " + orphanageName, "Reject", JOptionPane.INFORMATION_MESSAGE);
                         table.getModel().setValueAt("Rejected", row, 4);
                     }
                    break;
                case "details":
                    JOptionPane.showMessageDialog(this, "Details for: " + orphanageName, "Details", JOptionPane.INFORMATION_MESSAGE);
                    break;
            }
        }));
        table.getColumnModel().getColumn(0).setPreferredWidth(180);
        table.getColumnModel().getColumn(1).setPreferredWidth(120);
        table.getColumnModel().getColumn(2).setPreferredWidth(180);
        table.getColumnModel().getColumn(3).setPreferredWidth(100);
        table.getColumnModel().getColumn(4).setPreferredWidth(80);
        table.getColumnModel().getColumn(5).setPreferredWidth(120);
        table.setRowHeight(approveBtnRend.getPreferredSize().height + 4);
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createUserManagementTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        searchPanel.setOpaque(false);
        JLabel lblSearchUser = new JLabel("Search User:");
        JTextField txtUserSearch = new JTextField(20);
        JLabel lblUserRole = new JLabel("Role:");
        JComboBox<String> cmbUserRole = new JComboBox<>(new String[]{"Any Role", "Admin", "OrphanageStaff", "Donor", "Volunteer"});
        JButton btnUserSearch = new JButton("Search");
        styleFormLabel(lblSearchUser);
        styleTextField(txtUserSearch);
        styleFormLabel(lblUserRole);
        styleComboBox(cmbUserRole);
        styleActionButton(btnUserSearch, "Find users");
        searchPanel.add(lblSearchUser);
        searchPanel.add(txtUserSearch);
        searchPanel.add(lblUserRole);
        searchPanel.add(cmbUserRole);
        searchPanel.add(btnUserSearch);
        panel.add(searchPanel, BorderLayout.NORTH);
        String[] columnNames = {"Username", "Email", "Role", "Status", "Registered", "Actions"};
        Object[][] data = {
            {"staff_user", "staff@example.com", "OrphanageStaff", "Active", "2024-01-15", "Manage"},
            {"donor_user", "donor@mail.net", "Donor", "Active", "2024-02-10", "Manage"},
            {"volunteer_A", "vol@provider.org", "Volunteer", "Active", "2024-03-01", "Manage"},
            {"old_staff", "old@example.com", "OrphanageStaff", "Suspended", "2023-11-20", "Manage"},
            {"admin_user", "admin@orphanagehub.com", "Admin", "Active", "2023-10-01", "Manage"}
        };
        JTable table = new JTable(data, columnNames) {
            @Override public boolean isCellEditable(int row, int column) { return column == 5; }
        };
        styleTable(table);
        JPanel userActionPanelRenderer = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0));
        userActionPanelRenderer.setOpaque(false);
        JButton activateBtnRend = new JButton("✓");
        JButton suspendBtnRend = new JButton("✕");
        JButton viewBtnRend = new JButton("...");
        styleMiniButton(activateBtnRend, BUTTON_APPROVE_BG);
        styleMiniButton(suspendBtnRend, BUTTON_SUSPEND_BG);
        styleMiniButton(viewBtnRend, BUTTON_BG_DARK);
        userActionPanelRenderer.add(activateBtnRend);
        userActionPanelRenderer.add(suspendBtnRend);
        userActionPanelRenderer.add(viewBtnRend);
         table.getColumnModel().getColumn(5).setCellRenderer((tbl, value, isSelected, hasFocus, row, column) -> {
             String currentStatus = (String) tbl.getValueAt(row, 3);
             activateBtnRend.setVisible("Suspended".equals(currentStatus));
             suspendBtnRend.setVisible("Active".equals(currentStatus));
             String username = (String) tbl.getValueAt(row, 0);
             if (username.equals(adminUsername)) {
                 activateBtnRend.setVisible(false);
                 suspendBtnRend.setVisible(false);
             }
            return userActionPanelRenderer;
        });
        table.getColumnModel().getColumn(5).setCellEditor(new ActionPanelEditor(new JCheckBox(), (actionCommand, row) -> {
             String username = (String) table.getModel().getValueAt(row, 0);
             if (username.equals(adminUsername)) return;
             String currentStatus = (String) table.getModel().getValueAt(row, 3);
             switch(actionCommand) {
                 case "activate":
                      if ("Suspended".equals(currentStatus)) {
                          JOptionPane.showMessageDialog(this, "Activate User: " + username, "Activate", JOptionPane.INFORMATION_MESSAGE);
                      }
                     break;
                 case "suspend":
                     if ("Active".equals(currentStatus)) {
                         if (JOptionPane.showConfirmDialog(this, "Suspend User: " + username + "?", "Confirm Suspend", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                             JOptionPane.showMessageDialog(this, "Suspend User: " + username, "Suspend", JOptionPane.INFORMATION_MESSAGE);
                         }
                     }
                     break;
                 case "view":
                     JOptionPane.showMessageDialog(this, "View User Profile: " + username, "View User", JOptionPane.INFORMATION_MESSAGE);
                     break;
             }
         }));
        table.getColumnModel().getColumn(0).setPreferredWidth(120);
        table.getColumnModel().getColumn(1).setPreferredWidth(180);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
        table.getColumnModel().getColumn(3).setPreferredWidth(80);
        table.getColumnModel().getColumn(4).setPreferredWidth(100);
        table.getColumnModel().getColumn(5).setPreferredWidth(120);
        table.setRowHeight(activateBtnRend.getPreferredSize().height + 4);
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createSystemOverviewTab() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 30, 25, 30));
        panel.add(createOverviewStat("Total Registered Users:", "157"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Verified Orphanages:", "34"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Pending Verification:", "3"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Open Resource Requests:", "48"));
        panel.add(Box.createVerticalStrut(10));
        panel.add(createOverviewStat("Active Volunteers:", "22"));
        panel.add(Box.createVerticalGlue());
        return panel;
    }

    private Component createOverviewStat(String labelText, String valueText) {
        JPanel statPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statPanel.setOpaque(false);
        JLabel label = new JLabel(labelText);
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 16));
        label.setForeground(TEXT_COLOR_DARK);
        JLabel value = new JLabel(valueText);
       value.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        value.setForeground(TITLE_COLOR_DARK);
        statPanel.add(label);
        statPanel.add(value);
        return statPanel;
    }

    private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); label.setForeground(TEXT_COLOR_DARK); }
    private void styleTextField(JTextField field) { field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); field.setForeground(INPUT_FG_DARK); field.setBackground(INPUT_BG_DARK); Border p=new EmptyBorder(4,6,4,6); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); field.setCaretColor(Color.LIGHT_GRAY); }
    private void styleComboBox(JComboBox<?> comboBox) { comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); comboBox.setForeground(INPUT_FG_DARK); comboBox.setBackground(INPUT_BG_DARK); comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1)); Object p=comboBox.getUI().getAccessibleChild(comboBox,0); if(p instanceof JPopupMenu){JPopupMenu pm=(JPopupMenu)p;pm.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); for(Component comp:pm.getComponents()){if(comp instanceof JScrollPane){JScrollPane sp=(JScrollPane)comp;sp.getViewport().setBackground(INPUT_BG_DARK);applyScrollbarUI(sp.getVerticalScrollBar()); Component l=sp.getViewport().getView(); if(l instanceof JList){((JList<?>)l).setBackground(INPUT_BG_DARK);((JList<?>)l).setForeground(INPUT_FG_DARK);((JList<?>)l).setSelectionBackground(BUTTON_BG_DARK);((JList<?>)l).setSelectionForeground(BUTTON_FG_DARK);}}}}}
    private void styleTable(JTable table) { table.setBackground(TABLE_CELL_BG); table.setForeground(TABLE_CELL_FG); table.setGridColor(TABLE_GRID_COLOR); table.setRowHeight(28); table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); table.setFillsViewportHeight(true); table.setSelectionBackground(TABLE_CELL_SELECTED_BG); table.setSelectionForeground(TABLE_CELL_SELECTED_FG); table.setShowGrid(true); table.setIntercellSpacing(new Dimension(0,1)); JTableHeader h=table.getTableHeader(); h.setBackground(TABLE_HEADER_BG); h.setForeground(TABLE_HEADER_FG); h.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); h.setReorderingAllowed(true); h.setResizingAllowed(true); DefaultTableCellRenderer r=new DefaultTableCellRenderer(); r.setHorizontalAlignment(SwingConstants.LEFT); r.setVerticalAlignment(SwingConstants.CENTER); r.setBorder(new EmptyBorder(2,5,2,5)); for(int i=0; i<table.getColumnCount()-1; i++){table.getColumnModel().getColumn(i).setCellRenderer(r);} }
    private void styleScrollPane(JScrollPane scrollPane) { scrollPane.setOpaque(false); scrollPane.getViewport().setOpaque(false); scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); applyScrollbarUI(scrollPane.getVerticalScrollBar()); applyScrollbarUI(scrollPane.getHorizontalScrollBar()); }
    private void applyScrollbarUI(JScrollBar scrollBar) { scrollBar.setUI(new BasicScrollBarUI() { @Override protected void configureScrollBarColors(){this.thumbColor=BUTTON_BG_DARK; this.trackColor=DARK_BG_END;} @Override protected JButton createDecreaseButton(int o){return createZeroButton();} @Override protected JButton createIncreaseButton(int o){return createZeroButton();} private JButton createZeroButton(){JButton b=new JButton(); b.setPreferredSize(new Dimension(0,0)); return b;} }); scrollBar.setUnitIncrement(16); }
    private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12)); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); btn.setForeground(BUTTON_FG_DARK); btn.setFocusPainted(false); btn.setBackground(BUTTON_BG_DARK); Border p=new EmptyBorder(6,12,6,12); btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),p)); btn.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTON_BG_DARK)){btn.setBackground(BUTTON_HOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){btn.setBackground(BUTTON_BG_DARK);}} }); }
    private static void styleMiniButton(JButton btn, Color bg) { btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14)); btn.setMargin(new Insets(0, 2, 0, 2)); btn.setFocusPainted(false); btn.setBackground(bg); btn.setForeground(BUTTON_FG_DARK); btn.setBorder(BorderFactory.createLineBorder(bg.darker())); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); }

    static class ActionPanelEditor extends DefaultCellEditor {
        protected JPanel panel;
        private String actionCommand;
        private int row;
        private BiConsumer<String, Integer> actionListener;
        private JButton approveBtn;
        private JButton rejectBtn;
        private JButton detailsBtn;
        public ActionPanelEditor(JCheckBox checkBox, BiConsumer<String, Integer> listener) {
            super(checkBox);
            this.actionListener = listener;
            panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0));
            panel.setOpaque(false);
            approveBtn = new JButton("✓");
            rejectBtn = new JButton("✕");
            detailsBtn = new JButton("...");
            styleMiniButton(approveBtn, BUTTON_APPROVE_BG);
            styleMiniButton(rejectBtn, BUTTON_REJECT_BG);
            styleMiniButton(detailsBtn, BUTTON_BG_DARK);
            approveBtn.addActionListener(e -> fireEditingStoppedWithCommand("approve"));
            rejectBtn.addActionListener(e -> fireEditingStoppedWithCommand("reject"));
            detailsBtn.addActionListener(e -> fireEditingStoppedWithCommand("details"));
            panel.add(approveBtn);
            panel.add(rejectBtn);
            panel.add(detailsBtn);
        }
        private void fireEditingStoppedWithCommand(String command) {
            actionCommand = command;
            fireEditingStopped();
        }
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.row = row;
            String currentStatus = (String) table.getValueAt(row, 4);
            approveBtn.setVisible("Pending".equals(currentStatus));
            rejectBtn.setVisible("Pending".equals(currentStatus));
            detailsBtn.setVisible(true);
            return panel;
        }
        @Override
        public Object getCellEditorValue() {
            if (actionListener != null && actionCommand != null) {
                actionListener.accept(actionCommand, row);
            }
            return null;
        }
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
```
// src/main/java/com/orphanagehub/gui/DonorDashboardPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.Donation;
import com.orphanagehub.service.DonorService;
import com.orphanagehub.service.ServiceException;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.List;

public class DonorDashboardPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private String donorUsername = "donor_user";
    private JTable resultsTable;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_SEARCH_BG = new Color(72, 149, 239);
    private static final Color BUTTON_SEARCH_HOVER_BG = new Color(92, 169, 249);

    public DonorDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);
        resultsTable = createResultsTable();
        JScrollPane scrollPane = new JScrollPane(resultsTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\uD83E\uDEC2");
        iconLabel.setFont(new Font("Segoe UI Symbol", Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Donor Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("User: " + donorUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        JLabel lblSearch = new JLabel("Search:");
        styleFormLabel(lblSearch);
        JTextField txtSearch = new JTextField(20);
        styleTextField(txtSearch);
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"};
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);
        JLabel lblFilterCategory = new JLabel("Need Category:");
        styleFormLabel(lblFilterCategory);
        String[] categories = {"Any Category", "Food", "Clothing", "Education", "Medical", "Funding"};
        JComboBox<String> cmbCategory = new JComboBox<>(categories);
        styleComboBox(cmbCategory);
        JButton btnSearch = new JButton("Apply Filters");
        styleActionButton(btnSearch, "Find orphanages or requests matching criteria");
        btnSearch.setBackground(BUTTON_SEARCH_BG);
        btnSearch.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_HOVER_BG); }
             @Override public void mouseExited(MouseEvent e) { btnSearch.setBackground(BUTTON_SEARCH_BG); }
        });
        btnSearch.addActionListener(e -> {
            DonorService service = new DonorService();
            try {
                List<Donation> donations = service.getDonationsForDonor("donorId_placeholder");
                DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
                model.setRowCount(0);
                for (Donation d : donations) {
                    model.addRow(new Object[]{d.getOrphanageId(), "Location Placeholder", "Needs Placeholder", "View Details"});
                }
            } catch (ServiceException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterCategory);
        panel.add(cmbCategory);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        return panel;
    }

    private JTable createResultsTable() {
        String[] columnNames = {"Orphanage Name", "Location", "Key Needs", "Actions"};
        Object[][] data = {
                {"Hope Children's Home", "City A", "Food, Winter Clothing", "View Details"},
                {"Bright Future Orphanage", "City B", "School Supplies, Funding", "View Details"},
                {"Little Angels Shelter", "City A", "Medical Supplies", "View Details"},
                {"Sunshine House", "Region C", "Food, Volunteers", "View Details"},
                {"New Dawn Center", "City B", "Clothing (All Ages)", "View Details"}
        };
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        JTable table = new JTable(model) {
             @Override public boolean isCellEditable(int row, int column) { return column == 3; }
        };
        styleTable(table);
        table.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer(BUTTON_SEARCH_BG));
        table.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox(), BUTTON_SEARCH_BG, () -> {
             int selectedRow = table.convertRowIndexToModel(table.getEditingRow());
             String orphanageName = (String) table.getModel().getValueAt(selectedRow, 0);
             JOptionPane.showMessageDialog(this, "View Details for: " + orphanageName, "View Details", JOptionPane.INFORMATION_MESSAGE);
         }));
        table.getColumnModel().getColumn(0).setPreferredWidth(200);
        table.getColumnModel().getColumn(1).setPreferredWidth(120);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(120);
        return table;
    }

    private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); label.setForeground(TEXT_COLOR_DARK); }
    private void styleTextField(JTextField field) { field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); field.setForeground(INPUT_FG_DARK); field.setBackground(INPUT_BG_DARK); Border p=new EmptyBorder(4,6,4,6); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); field.setCaretColor(Color.LIGHT_GRAY); }
    private void styleComboBox(JComboBox<?> comboBox) { comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); comboBox.setForeground(INPUT_FG_DARK); comboBox.setBackground(INPUT_BG_DARK); comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1)); Object p=comboBox.getUI().getAccessibleChild(comboBox,0); if(p instanceof JPopupMenu){JPopupMenu pm=(JPopupMenu)p;pm.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); for(Component comp:pm.getComponents()){if(comp instanceof JScrollPane){JScrollPane sp=(JScrollPane)comp;sp.getViewport().setBackground(INPUT_BG_DARK);applyScrollbarUI(sp.getVerticalScrollBar()); Component l=sp.getViewport().getView(); if(l instanceof JList){((JList<?>)l).setBackground(INPUT_BG_DARK);((JList<?>)l).setForeground(INPUT_FG_DARK);((JList<?>)l).setSelectionBackground(BUTTON_BG_DARK);((JList<?>)l).setSelectionForeground(BUTTON_FG_DARK);}}}}}
    private void styleTable(JTable table) { table.setBackground(TABLE_CELL_BG); table.setForeground(TABLE_CELL_FG); table.setGridColor(TABLE_GRID_COLOR); table.setRowHeight(28); table.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13)); table.setFillsViewportHeight(true); table.setSelectionBackground(TABLE_CELL_SELECTED_BG); table.setSelectionForeground(TABLE_CELL_SELECTED_FG); table.setShowGrid(true); table.setIntercellSpacing(new Dimension(0,1)); JTableHeader h=table.getTableHeader(); h.setBackground(TABLE_HEADER_BG); h.setForeground(TABLE_HEADER_FG); h.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); h.setReorderingAllowed(true); h.setResizingAllowed(true); DefaultTableCellRenderer r=new DefaultTableCellRenderer(); r.setHorizontalAlignment(SwingConstants.LEFT); r.setVerticalAlignment(SwingConstants.CENTER); r.setBorder(new EmptyBorder(2,5,2,5)); for(int i=0;i<table.getColumnCount()-1;i++){table.getColumnModel().getColumn(i).setCellRenderer(r);} }
    private void styleScrollPane(JScrollPane scrollPane) { scrollPane.setOpaque(false); scrollPane.getViewport().setOpaque(false); scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); applyScrollbarUI(scrollPane.getVerticalScrollBar()); applyScrollbarUI(scrollPane.getHorizontalScrollBar()); }
    private void applyScrollbarUI(JScrollBar scrollBar) { scrollBar.setUI(new BasicScrollBarUI() { @Override protected void configureScrollBarColors(){this.thumbColor=BUTTON_BG_DARK; this.trackColor=DARK_BG_END;} @Override protected JButton createDecreaseButton(int o){return createZeroButton();} @Override protected JButton createIncreaseButton(int o){return createZeroButton();} private JButton createZeroButton(){JButton b=new JButton();b.setPreferredSize(new Dimension(0,0));b.setMaximumSize(new Dimension(0,0));b.setMinimumSize(new Dimension(0,0));return b;} @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r){g.setColor(thumbColor);g.fillRect(r.x,r.y,r.width,r.height);} @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r){g.setColor(trackColor);g.fillRect(r.x,r.y,r.width,r.height);} }); scrollBar.setUnitIncrement(16); }
    private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANS_SERIF,Font.BOLD,12)); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); btn.setForeground(BUTTON_FG_DARK); btn.setFocusPainted(false); btn.setBackground(BUTTON_BG_DARK); Border p=new EmptyBorder(6,12,6,12); btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),p)); btn.addMouseListener(new MouseAdapter(){@Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTON_BG_DARK)){btn.setBackground(BUTTON_HOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){btn.setBackground(BUTTON_BG_DARK);}}}); }

    static class ButtonRenderer extends JButton implements javax.swing.table.TableCellRenderer {
        private Color defaultBg;
        public ButtonRenderer(Color background){
            setOpaque(true);
            this.defaultBg=background;
            setForeground(BUTTON_FG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2,5,2,5));
            setFont(new Font(Font.SANS_SERIF,Font.BOLD,11));
        }
        @Override public Component getTableCellRendererComponent(JTable t,Object v,boolean s,boolean f,int r,int c){setText((v==null)?"":v.toString());setBackground(s?defaultBg.brighter():defaultBg);return this;}
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private Runnable action;
        private Color bgColor;
        public ButtonEditor(JCheckBox c,Color bg,Runnable act){
            super(c);
            this.action=act;
            this.bgColor=bg;
            button=new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTON_FG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2,5,2,5));
            button.setFont(new Font(Font.SANS_SERIF,Font.BOLD,11));
            button.addActionListener(e->fireEditingStopped());
        }
        @Override public Component getTableCellEditorComponent(JTable t,Object v,boolean s,int r,int c){label=(v==null)?"":v.toString();button.setText(label);isPushed=true;return button;}
        @Override public Object getCellEditorValue(){if(isPushed&&action!=null){action.run();}isPushed=false;return label;}
        @Override public boolean stopCellEditing(){isPushed=false;return super.stopCellEditing();}
        @Override protected void fireEditingStopped(){super.fireEditingStopped();}
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/HomePanel.java
```
// src/main/java/com/orphanagehub/gui/HomePanel.java
package com.orphanagehub.gui;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.net.URL;

public class HomePanel extends JPanel {
    private OrphanageHubApp mainApp;
    private JRadioButton rbDonor;
    private JRadioButton rbStaff;
    private JRadioButton rbVolunteer;
    private ButtonGroup roleGroup;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color FALLBACK_BG_DARK = new Color(60, 60, 60);

    public HomePanel(OrphanageHubApp app) {
        this.mainApp = app;
        setBorder(new EmptyBorder(30, 40, 30, 40));
        setLayout(new BorderLayout(20, 20));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JLabel lblTitle = new JLabel("Welcome to OrphanageHub", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        lblTitle.setBorder(new EmptyBorder(0, 0, 25, 0));
        add(lblTitle, BorderLayout.NORTH);
        JPanel centerPanel = new JPanel(new BorderLayout(30, 0));
        centerPanel.setOpaque(false);
        JLabel lblImage = new JLabel();
        Dimension imageSize = new Dimension(220, 220);
        lblImage.setPreferredSize(imageSize);
        lblImage.setMinimumSize(imageSize);
        lblImage.setMaximumSize(imageSize);
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        lblImage.setVerticalAlignment(SwingConstants.CENTER);
        lblImage.setOpaque(false);
        URL imageURL = getClass().getResource("home.png");
        if (imageURL != null) {
            ImageIcon icon = new ImageIcon(imageURL);
            if (icon.getImageLoadStatus() == MediaTracker.COMPLETE && icon.getIconWidth() > 0) {
                Image img = icon.getImage().getScaledInstance(imageSize.width, imageSize.height, Image.SCALE_SMOOTH);
                lblImage.setIcon(new ImageIcon(img));
                lblImage.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK, 1));
            } else {
                setFallbackImageStyleDark(lblImage);
            }
        } else {
            setFallbackImageStyleDark(lblImage);
        }
        centerPanel.add(lblImage, BorderLayout.WEST);
        String htmlDesc = "<html><body style='width:350px; font-family: Sans-Serif; font-size: 14pt; color: rgb(200,200,200);'>"
                + "<p><b>A better world starts with care.</b></p>"
                + "<p>OrphanageHub connects orphanages with the donors and volunteers needed "
                + "to create lasting change for vulnerable children.</p>"
                + "</body></html>";
        JLabel lblDesc = new JLabel(htmlDesc);
        lblDesc.setVerticalAlignment(SwingConstants.CENTER);
        lblDesc.setHorizontalAlignment(SwingConstants.LEFT);
        lblDesc.setOpaque(false);
        lblDesc.setBorder(new EmptyBorder(0, 10, 0, 0));
        centerPanel.add(lblDesc, BorderLayout.CENTER);
        add(centerPanel, BorderLayout.CENTER);
        JPanel southPanel = new JPanel(new BorderLayout(10, 20));
        southPanel.setOpaque(false);
        JPanel rolePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 25, 10));
        rolePanel.setOpaque(false);
        TitledBorder titledBorder = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(BORDER_COLOR_DARK),
                " Select Your Role ",
                TitledBorder.CENTER,
                TitledBorder.DEFAULT_POSITION,
                new Font(Font.SANS_SERIF, Font.BOLD, 15),
                TITLE_COLOR_DARK
        );
        rolePanel.setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10)));
        rbDonor = new JRadioButton("Donor", true);
        rbStaff = new JRadioButton("Orphanage Staff");
        rbVolunteer = new JRadioButton("Volunteer");
        styleRadioButton(rbDonor, "Select if you wish to donate or view needs.");
        styleRadioButton(rbStaff, "Select if you manage an orphanage profile.");
        styleRadioButton(rbVolunteer, "Select if you want to find volunteer opportunities.");
        roleGroup = new ButtonGroup();
        roleGroup.add(rbDonor);
        roleGroup.add(rbStaff);
        roleGroup.add(rbVolunteer);
        rolePanel.add(rbDonor);
        rolePanel.add(rbStaff);
        rolePanel.add(rbVolunteer);
        southPanel.add(rolePanel, BorderLayout.CENTER);
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 5));
        buttonPanel.setOpaque(false);
        buttonPanel.setBorder(new EmptyBorder(15, 0, 10, 0));
        JButton btnLogin = new JButton("Login");
        JButton btnRegister = new JButton("Register");
        styleActionButton(btnLogin, "Proceed to login with your existing account.");
        styleActionButton(btnRegister, "Create a new account based on your selected role.");
        btnLogin.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL));
        btnRegister.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL));
        buttonPanel.add(btnLogin);
        buttonPanel.add(btnRegister);
        southPanel.add(buttonPanel, BorderLayout.SOUTH);
        add(southPanel, BorderLayout.SOUTH);
    }

    private void setFallbackImageStyleDark(JLabel label) {
        label.setText("<html><div style='text-align: center; color: #AAAAAA;'>Image<br>Not Found<br>(home.png)</div></html>");
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 14));
        label.setForeground(new Color(170, 170, 170));
        label.setBorder(BorderFactory.createDashedBorder(BORDER_COLOR_DARK, 5, 5));
        label.setOpaque(true);
        label.setBackground(FALLBACK_BG_DARK);
    }

    private void styleRadioButton(JRadioButton rb, String tooltip) {
        rb.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        rb.setForeground(TEXT_COLOR_DARK);
        rb.setOpaque(false);
        rb.setToolTipText(tooltip);
        rb.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setBackground(BUTTON_BG_DARK);
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    public String getSelectedRole() {
        if (rbDonor.isSelected()) return "Donor";
        if (rbStaff.isSelected()) return "OrphanageStaff";
        if (rbVolunteer.isSelected()) return "Volunteer";
        return "Unknown";
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/LoginPanel.java
```
// src/main/java/com/orphanagehub/gui/LoginPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.model.User;
import com.orphanagehub.service.AuthService;
import com.orphanagehub.service.ServiceException;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

public class LoginPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color LINK_COLOR = new Color(100, 180, 255);

    public LoginPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new GridBagLayout());
        setBorder(new EmptyBorder(40, 60, 40, 60));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        JLabel lblTitle = new JLabel("User Login", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2; gbc.weightx = 1.0; gbc.insets = new Insets(0, 5, 25, 5);
        add(lblTitle, gbc);
        gbc.gridwidth = 1; gbc.insets = new Insets(8, 5, 8, 5);
        JLabel lblUsername = new JLabel("Username:"); styleFormLabel(lblUsername);
        gbc.gridx = 0; gbc.gridy = 1; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        add(lblUsername, gbc);
        txtUsername = new JTextField(20); styleTextField(txtUsername);
        gbc.gridx = 1; gbc.gridy = 1; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        add(txtUsername, gbc);
        JLabel lblPassword = new JLabel("Password:"); styleFormLabel(lblPassword);
        gbc.gridx = 0; gbc.gridy = 2; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        add(lblPassword, gbc);
        txtPassword = new JPasswordField(20); styleTextField(txtPassword);
        gbc.gridx = 1; gbc.gridy = 2; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        add(txtPassword, gbc);
        JButton btnLogin = new JButton("Login"); styleActionButton(btnLogin, "Authenticate and access your dashboard");
        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; gbc.fill = GridBagConstraints.NONE; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(20, 5, 10, 5);
        add(btnLogin, gbc);
        JPanel linksPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0)); linksPanel.setOpaque(false);
        JLabel lblForgotPassword = createHyperlinkLabel("Forgot Password?"); lblForgotPassword.setToolTipText("Click here to reset your password");
        lblForgotPassword.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { JOptionPane.showMessageDialog(LoginPanel.this, "Password reset functionality not yet implemented.", "Forgot Password", JOptionPane.INFORMATION_MESSAGE); }});
        JLabel lblRegister = createHyperlinkLabel("Need an account? Register"); lblRegister.setToolTipText("Click here to go to the registration page");
        lblRegister.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); }});
        linksPanel.add(lblForgotPassword); linksPanel.add(lblRegister);
        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(5, 5, 15, 5);
        add(linksPanel, gbc);
        JButton btnBack = new JButton("Back"); styleActionButton(btnBack, "Return to the welcome screen"); btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); } @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }});
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        gbc.gridx = 0; gbc.gridy = 5; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(10, 5, 5, 5);
        add(btnBack, gbc);
        btnLogin.addActionListener(e -> {
            String username = txtUsername.getText().trim();
            String password = new String(txtPassword.getPassword());
            try {
                AuthService authService = new AuthService();
                User user = authService.authenticate(username, password);
                if (user != null) {
                    String target = switch (user.getUserRole()) {
                        case "OrphanageStaff" -> OrphanageHubApp.ORPHANAGE_DASHBOARD_PANEL;
                        case "Donor" -> OrphanageHubApp.DONOR_DASHBOARD_PANEL;
                        case "Volunteer" -> OrphanageHubApp.VOLUNTEER_DASHBOARD_PANEL;
                        case "Admin" -> OrphanageHubApp.ADMIN_DASHBOARD_PANEL;
                        default -> OrphanageHubApp.HOME_PANEL;
                    };
                    mainApp.showDashboard(target);
                } else {
                    JOptionPane.showMessageDialog(LoginPanel.this, "Invalid credentials", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ServiceException ex) {
                JOptionPane.showMessageDialog(LoginPanel.this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); label.setForeground(TEXT_COLOR_DARK); }
    private void styleTextField(JComponent field) { field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); field.setForeground(INPUT_FG_DARK); field.setBackground(INPUT_BG_DARK); Border p=new EmptyBorder(5,8,5,8); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); if(field instanceof JTextField)((JTextField)field).setCaretColor(Color.LIGHT_GRAY); else if(field instanceof JPasswordField)((JPasswordField)field).setCaretColor(Color.LIGHT_GRAY); }
    private JLabel createHyperlinkLabel(String text) { JLabel l=new JLabel("<html><u>"+text+"</u></html>"); l.setForeground(LINK_COLOR); l.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,12)); l.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); return l; }
    private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); btn.setPreferredSize(new Dimension(130,40)); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); btn.setBackground(BUTTON_BG_DARK); btn.setForeground(BUTTON_FG_DARK); btn.setFocusPainted(false); Border l=BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()); Border p=new EmptyBorder(5,15,5,15); btn.setBorder(new CompoundBorder(l,p)); btn.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTON_BG_DARK)){btn.setBackground(BUTTON_HOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){btn.setBackground(BUTTON_BG_DARK);}} }); }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
```
// src/main/java/com/orphanagehub/gui/OrphanageDashboardPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.dao.ResourceRequestDAO;
import com.orphanagehub.model.ResourceRequest;
import com.orphanagehub.service.OrphanageService;
import com.orphanagehub.service.ServiceException;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.sql.SQLException;
import java.util.List;

public class OrphanageDashboardPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private String orphanageName = "Hope Children's Home";
    private String staffUsername = "staff_user";
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TAB_BG_SELECTED = new Color(70, 80, 82);
    private static final Color TAB_BG_UNSELECTED = new Color(55, 62, 64);
    private static final Color TAB_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color ACCENT_COLOR_ORANGE = new Color(230, 145, 56);
    private static final Color ACCENT_COLOR_BLUE = new Color(72, 149, 239);
    private static final Color ACCENT_COLOR_GREEN = new Color(87, 190, 106);

    public OrphanageDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JTabbedPane tabbedPane = createTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2302");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(135, 206, 250));
        JLabel nameLabel = new JLabel(orphanageName);
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("User: " + staffUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setOpaque(false);
        tabbedPane.setForeground(TAB_FG);
        tabbedPane.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        tabbedPane.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
            @Override protected void installDefaults() {
                super.installDefaults();
                lightHighlight = TAB_BG_SELECTED;
                shadow = BORDER_COLOR_DARK;
                darkShadow = DARK_BG_END;
                focus = TAB_BG_SELECTED;
            }
            @Override protected void paintTabBackground(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) {
                g.setColor(isSelected ? TAB_BG_SELECTED : TAB_BG_UNSELECTED);
                switch (tabPlacement) {
                    case TOP:
                    default:
                        g.fillRoundRect(x, y, w, h + 5, 5, 5);
                        break;
                }
            }
            @Override protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) { }
            @Override protected void paintContentBorder(Graphics g, int tabPlacement, int selectedIndex) {
                int width = tabPane.getWidth();
                int height = tabPane.getHeight();
                Insets insets = tabPane.getInsets();
                int tabAreaHeight = calculateTabAreaHeight(tabPlacement, runCount, maxTabHeight);
                int x = insets.left;
                int y = insets.top + tabAreaHeight - (lightHighlight.getAlpha() > 0 ? 1 : 0);
                int w = width - insets.right - insets.left;
                int h = height - insets.top - insets.bottom - y;
                g.setColor(BORDER_COLOR_DARK);
                g.drawRect(x, y, w - 1, h - 1);
            }
        });
        tabbedPane.addTab("Overview", createOverviewTab());
        tabbedPane.addTab("Resource Requests", createResourceRequestsTab());
        tabbedPane.addTab("Donations", createPlaceholderTab("Donations Management"));
        tabbedPane.addTab("Volunteers", createPlaceholderTab("Volunteer Management"));
        tabbedPane.addTab("Orphanage Profile", createPlaceholderTab("Orphanage Profile Editor"));
        return tabbedPane;
    }

    private JPanel createOverviewTab() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 20));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(25, 25, 25, 25));
        panel.add(createStatCard("Active Requests", "12", ACCENT_COLOR_ORANGE));
        panel.add(createStatCard("Pending Donations", "3", ACCENT_COLOR_BLUE));
        panel.add(createStatCard("Active Volunteers", "8", ACCENT_COLOR_GREEN));
        return panel;
    }

    private JPanel createStatCard(String title, String value, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout(5, 5));
        card.setBackground(TAB_BG_UNSELECTED);
        card.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 3, 0, accentColor),
                new EmptyBorder(15, 20, 15, 20)
        ));
        JLabel valueLabel = new JLabel(value, SwingConstants.CENTER);
        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 36));
        valueLabel.setForeground(TITLE_COLOR_DARK);
        card.add(valueLabel, BorderLayout.CENTER);
        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        titleLabel.setForeground(TEXT_COLOR_DARK);
        card.add(titleLabel, BorderLayout.SOUTH);
        return card;
    }

    private JPanel createResourceRequestsTab() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        toolbar.setOpaque(false);
        JButton btnAdd = new JButton("Add Request");
        JButton btnEdit = new JButton("Edit Selected");
        JButton btnDelete = new JButton("Delete Selected");
        styleActionButton(btnAdd, "Create a new resource request");
        styleActionButton(btnEdit, "Modify the selected request");
        styleActionButton(btnDelete, "Remove the selected request");
        btnDelete.setBackground(new Color(192, 57, 43));
        btnDelete.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) { btnDelete.setBackground(new Color(231, 76, 60)); }
            @Override public void mouseExited(MouseEvent e) { btnDelete.setBackground(new Color(192, 57, 43)); }
        });
        toolbar.add(btnAdd);
        toolbar.add(btnEdit);
        toolbar.add(btnDelete);
        panel.add(toolbar, BorderLayout.NORTH);
        String[] columnNames = {"ID", "Category", "Description", "Needed", "Fulfilled", "Urgency", "Status"};
        DefaultTableModel model = new DefaultTableModel(new Object[0][0], columnNames);
        JTable table = new JTable(model);
        styleTable(table);
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        panel.add(scrollPane, BorderLayout.CENTER);
        ResourceRequestDAO dao = new ResourceRequestDAO();
        try {
            List<ResourceRequest> requests = dao.findByOrphanageId("orphanageId_placeholder");
            model.setRowCount(0);
            for (ResourceRequest r : requests) {
                model.addRow(new Object[]{r.getId(), r.getCategory(), r.getDescription(), r.getNeeded(), r.getFulfilled(), r.getUrgency(), r.getStatus()});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load resource requests: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return panel;
    }

    private JPanel createPlaceholderTab(String title) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        JLabel label = new JLabel(title + " - Content Area", SwingConstants.CENTER);
        label.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 18));
        label.setForeground(TEXT_COLOR_DARK);
        panel.add(label);
        return panel;
    }

    private void styleTable(JTable table) {
        table.setBackground(TABLE_CELL_BG);
        table.setForeground(TABLE_CELL_FG);
        table.setGridColor(TABLE_GRID_COLOR);
        table.setRowHeight(28);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13));
        table.setFillsViewportHeight(true);
        table.setSelectionBackground(TABLE_CELL_SELECTED_BG);
        table.setSelectionForeground(TABLE_CELL_SELECTED_FG);
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(0,1));
        JTableHeader header = table.getTableHeader();
        header.setBackground(TABLE_HEADER_BG);
        header.setForeground(TABLE_HEADER_FG);
        header.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        header.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(SwingConstants.LEFT);
        table.getColumnModel().getColumn(0).setPreferredWidth(60);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setPreferredWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(80);
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(4).setPreferredWidth(80);
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(5).setPreferredWidth(100);
        table.getColumnModel().getColumn(6).setPreferredWidth(100);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK));
        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        JScrollBar horizontalScrollBar = scrollPane.getHorizontalScrollBar();
        applyScrollbarUI(verticalScrollBar);
        applyScrollbarUI(horizontalScrollBar);
    }

    private void applyScrollbarUI(JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
                this.thumbDarkShadowColor = this.thumbColor.darker();
                this.thumbHighlightColor = this.thumbColor.brighter();
            }
             @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
             @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
             private JButton createZeroButton() {
                 JButton button = new JButton();
                 button.setPreferredSize(new Dimension(0, 0));
                 button.setMinimumSize(new Dimension(0, 0));
                 button.setMaximumSize(new Dimension(0, 0));
                 return button;
             }
             @Override protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
                 g.setColor(thumbColor);
                 g.fillRect(thumbBounds.x, thumbBounds.y, thumbBounds.width, thumbBounds.height);
             }
             @Override protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
                 g.setColor(trackColor);
                 g.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
             }
        });
        scrollBar.setUnitIncrement(16);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border padding = new EmptyBorder(6, 12, 6, 12);
        btn.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),
                padding));
        btn.addMouseListener(new MouseAdapter() {
            @Override public void mouseEntered(MouseEvent e) {
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override public void mouseExited(MouseEvent e) {
                    btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/OrphanageHubApp.java
```
package com.orphanagehub.gui;

import javax.swing.*;
import java.awt.*;

public class OrphanageHubApp extends JFrame {

    private CardLayout cardLayout;
    private JPanel mainPanel;

    // Panel Instances (keep references)
    private HomePanel homePanel;
    private LoginPanel loginPanel;
    private RegistrationPanel registrationPanel;
    private OrphanageDashboardPanel orphanageDashboardPanel;
    private DonorDashboardPanel donorDashboardPanel;         // Added reference
    private VolunteerDashboardPanel volunteerDashboardPanel; // Added reference
    private AdminDashboardPanel adminDashboardPanel;         // Added reference

    // Panel names for CardLayout
    public static final String HOME_PANEL = "Home";
    public static final String LOGIN_PANEL = "Login";
    public static final String REGISTRATION_PANEL = "Registration";
    public static final String ORPHANAGE_DASHBOARD_PANEL = "OrphanageDashboard";
    public static final String DONOR_DASHBOARD_PANEL = "DonorDashboard";         // Added constant
    public static final String VOLUNTEER_DASHBOARD_PANEL = "VolunteerDashboard"; // Added constant
    public static final String ADMIN_DASHBOARD_PANEL = "AdminDashboard";         // Added constant

    public OrphanageHubApp() {
        super("OrphanageHub");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set Nimbus Look and Feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("CRITICAL FAILURE: Cannot set Nimbus Look and Feel. UI may appear incorrect.");
        }

        initComponents(); // Initialize components and layout

        // Set initial size
        setPreferredSize(new Dimension(900, 700)); // Increased default size for dashboards
        pack();
        setMinimumSize(new Dimension(750, 550)); // Adjusted minimum size
        setLocationRelativeTo(null);
        setResizable(true);
    }

    private void initComponents() {
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        // Instantiate CORE panels immediately
        homePanel = new HomePanel(this);
        loginPanel = new LoginPanel(this);
        registrationPanel = new RegistrationPanel(this);
        // Dashboard panels are instantiated on demand via showDashboard()

        // Add core panels to the CardLayout container
        mainPanel.add(homePanel, HOME_PANEL);
        mainPanel.add(loginPanel, LOGIN_PANEL);
        mainPanel.add(registrationPanel, REGISTRATION_PANEL);
        // Dashboard panels are added later

        setContentPane(mainPanel);
    }

    // --- Navigation Methods ---

    /**
     * Navigates directly to a panel already added to the CardLayout.
     * @param panelName The name constant of the panel to show.
     */
    public void navigateTo(String panelName) {
        System.out.println("Navigating to: " + panelName); // Debug
        cardLayout.show(mainPanel, panelName);
    }

    /**
     * Creates (if necessary) and navigates to a dashboard panel.
     * Handles lazy instantiation of dashboard panels.
     * @param panelName The name constant of the dashboard panel to show.
     */
    public void showDashboard(String panelName) {
        System.out.println("Attempting to show dashboard: " + panelName); // Debug
        boolean panelAdded = false; // Flag to track if a panel was added

        // Ensure dashboard panels are created and added before showing
        if (panelName.equals(ORPHANAGE_DASHBOARD_PANEL)) {
            if (orphanageDashboardPanel == null) {
                System.out.println("Creating Orphanage Dashboard Panel...");
                orphanageDashboardPanel = new OrphanageDashboardPanel(this);
                mainPanel.add(orphanageDashboardPanel, ORPHANAGE_DASHBOARD_PANEL);
                panelAdded = true;
            }
            // Add logic later to pass actual user/orphanage data
        } else if (panelName.equals(DONOR_DASHBOARD_PANEL)) {
            if (donorDashboardPanel == null) {
                System.out.println("Creating Donor Dashboard Panel...");
                donorDashboardPanel = new DonorDashboardPanel(this);
                mainPanel.add(donorDashboardPanel, DONOR_DASHBOARD_PANEL);
                panelAdded = true;
            }
            // Add logic later to pass donor-specific data
        } else if (panelName.equals(VOLUNTEER_DASHBOARD_PANEL)) {
            if (volunteerDashboardPanel == null) {
                System.out.println("Creating Volunteer Dashboard Panel...");
                volunteerDashboardPanel = new VolunteerDashboardPanel(this);
                mainPanel.add(volunteerDashboardPanel, VOLUNTEER_DASHBOARD_PANEL);
                panelAdded = true;
            }
            // Add logic later to pass volunteer-specific data
        } else if (panelName.equals(ADMIN_DASHBOARD_PANEL)) {
            if (adminDashboardPanel == null) {
                System.out.println("Creating Admin Dashboard Panel...");
                adminDashboardPanel = new AdminDashboardPanel(this);
                mainPanel.add(adminDashboardPanel, ADMIN_DASHBOARD_PANEL);
                panelAdded = true;
            }
            // Add logic later to pass admin-specific data
        } else {
            System.err.println("Error: Attempted to show unknown or unsupported dashboard panel: " + panelName);
            navigateTo(HOME_PANEL); // Fallback to home screen
            return; // Exit early if panel name is invalid
        }

        // Revalidate the main panel *if* a new component was actually added
        if (panelAdded) {
            mainPanel.revalidate();
            System.out.println(panelName + " Added and Revalidated.");
        }

        navigateTo(panelName); // Navigate to the requested panel
    }

    // Method for panels to get the selected role from HomePanel
    public String getSelectedRole() {
        return (homePanel != null) ? homePanel.getSelectedRole() : "Unknown";
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            OrphanageHubApp app = new OrphanageHubApp();
            app.setVisible(true);
        });
    }
}

```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/RegistrationPanel.java
```
// src/main/java/com/orphanagehub/gui/RegistrationPanel.java
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;
import com.orphanagehub.service.ServiceException;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

public class RegistrationPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private String currentRole = "User";
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtFullName;
    private JPasswordField txtPassword;
    private JPasswordField txtConfirmPassword;
    private JComboBox<String> cmbOrphanage;
    private JCheckBox chkTerms;
    private JLabel lblTitle;
    private JLabel lblRoleIcon;
    private JPanel orphanagePanel;
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTON_REGISTER_BG = new Color(60, 179, 113);
    private static final Color BUTTON_REGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOX_COLOR = new Color(180, 180, 180);

    public RegistrationPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout());
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);
        lblRoleIcon = new JLabel("?");
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblRoleIcon);
        lblTitle = new JLabel("Register as " + currentRole);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblTitle);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 5, 20, 5);
        formPanel.add(titlePanel, gbc);
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5);
        int gridY = 1;
        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName = new JTextField(25));
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword = new JPasswordField(25));
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword = new JPasswordField(25));
        orphanagePanel = new JPanel(new BorderLayout(5, 0));
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        String[] orphanages = {"Select Orphanage...", "Hope Children's Home", "Bright Future Orphanage", "Little Angels Shelter"};
        cmbOrphanage = new JComboBox<>(orphanages);
        styleComboBox(cmbOrphanage);
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false);
        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(15, 5, 15, 5);
        formPanel.add(chkTerms, gbc);
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);
        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        btnRegister.setBackground(BUTTON_REGISTER_BG);
        btnRegister.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_HOVER_BG); }
             @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_BG); }
        });
        btnRegister.addActionListener(e -> registerAction());
        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); }
             @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(10, 5, 5, 5);
        formPanel.add(buttonPanel, gbc);
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK;
                this.trackColor = DARK_BG_END;
            }
             @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
             @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
             private JButton createZeroButton() {
                 JButton button = new JButton();
                 button.setPreferredSize(new Dimension(0, 0));
                 return button;
             }
        });
        verticalScrollBar.setUnitIncrement(16);
        add(scrollPane, BorderLayout.CENTER);
    }

    private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        panel.add(label, gbc);
        styleTextField(field);
        gbc.gridx = 1;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }

    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXT_COLOR_DARK);
    }

    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
                padding
        ));
        if (field instanceof JTextField) ((JTextField) field).setCaretColor(Color.LIGHT_GRAY);
        else if (field instanceof JPasswordField) ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
    }

    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
        Object popup = comboBox.getUI().getAccessibleChild(comboBox, 0);
        if (popup instanceof JPopupMenu) {
            JPopupMenu popupMenu = (JPopupMenu) popup;
            popupMenu.setBorder(new LineBorder(BORDER_COLOR_DARK));
            Component[] components = popupMenu.getComponents();
            for (Component comp : components) {
                if (comp instanceof JScrollPane) {
                    JScrollPane scrollPane = (JScrollPane) comp;
                    scrollPane.getViewport().setBackground(INPUT_BG_DARK);
                    scrollPane.getVerticalScrollBar().setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
                        @Override protected void configureScrollBarColors() {this.thumbColor = BUTTON_BG_DARK; this.trackColor = DARK_BG_END;}
                        @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
                        @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
                        private JButton createZeroButton() { JButton b = new JButton(); b.setPreferredSize(new Dimension(0,0)); return b; }
                    });
                    Component list = scrollPane.getViewport().getView();
                    if (list instanceof JList) {
                        ((JList<?>)list).setBackground(INPUT_BG_DARK);
                        ((JList<?>)list).setForeground(INPUT_FG_DARK);
                        ((JList<?>)list).setSelectionBackground(BUTTON_BG_DARK);
                        ((JList<?>)list).setSelectionForeground(BUTTON_FG_DARK);
                    }
                }
            }
        }
    }

    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOX_COLOR);
        checkBox.setOpaque(false);
    }

    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);
        btn.setBackground(BUTTON_BG_DARK);
        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    private void registerAction() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        String password = new String(txtPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());
        String orphanageName = (String) cmbOrphanage.getSelectedItem();
        if (username.isEmpty() || email.isEmpty() || fullName.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (currentRole.equals("OrphanageStaff") && cmbOrphanage.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Orphanage Staff must select an orphanage.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        RegistrationService service = new RegistrationService();
        try {
            service.registerUser(username, email, fullName, password, confirmPassword, currentRole, orphanageName);
            JOptionPane.showMessageDialog(this, "Registration successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Registration Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        currentRole = mainApp.getSelectedRole();
        lblTitle.setText("Register as " + currentRole);
        switch (currentRole) {
            case "Donor":
                lblRoleIcon.setText("\u2764");
                lblRoleIcon.setForeground(new Color(255, 105, 180));
                break;
            case "OrphanageStaff":
                lblRoleIcon.setText("\u2302");
                lblRoleIcon.setForeground(new Color(135, 206, 250));
                break;
            case "Volunteer":
                lblRoleIcon.setText("\u2605");
                lblRoleIcon.setForeground(new Color(255, 215, 0));
                break;
            default:
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLE_COLOR_DARK);
                break;
        }
        boolean isStaff = currentRole.equals("OrphanageStaff");
        orphanagePanel.setVisible(isStaff);
        revalidate();
        repaint();
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
```
// src/main/java/com/orphanagehub/gui/VolunteerDashboardPanel.java
package com.orphanagehub.gui;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

public class VolunteerDashboardPanel extends JPanel {
    private OrphanageHubApp mainApp;
    private String volunteerUsername = "volunteer_user";
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color TABLE_HEADER_BG = new Color(65, 75, 77);
    private static final Color TABLE_HEADER_FG = TITLE_COLOR_DARK;
    private static final Color TABLE_GRID_COLOR = BORDER_COLOR_DARK;
    private static final Color TABLE_CELL_BG = new Color(55, 62, 64);
    private static final Color TABLE_CELL_FG = TEXT_COLOR_DARK;
    private static final Color TABLE_CELL_SELECTED_BG = BUTTON_BG_DARK;
    private static final Color TABLE_CELL_SELECTED_FG = BUTTON_FG_DARK;
    private static final Color BUTTON_APPLY_BG = new Color(87, 190, 106);
    private static final Color BUTTON_APPLY_HOVER_BG = new Color(97, 200, 116);

    public VolunteerDashboardPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout(0, 0));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        JPanel contentPanel = new JPanel(new BorderLayout(10, 15));
        contentPanel.setOpaque(false);
        contentPanel.setBorder(new EmptyBorder(15, 20, 20, 20));
        JPanel searchFilterPanel = createSearchFilterPanel();
        contentPanel.add(searchFilterPanel, BorderLayout.NORTH);
        JTable opportunitiesTable = createOpportunitiesTable();
        JScrollPane scrollPane = new JScrollPane(opportunitiesTable);
        styleScrollPane(scrollPane);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        JPanel statusPanel = createStatusPanel();
        contentPanel.add(statusPanel, BorderLayout.SOUTH);
        add(contentPanel, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR_DARK),
                new EmptyBorder(10, 20, 10, 20)
        ));
        JPanel titleGroup = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        titleGroup.setOpaque(false);
        JLabel iconLabel = new JLabel("\u2605");
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 22));
        iconLabel.setForeground(new Color(255, 215, 0));
        JLabel nameLabel = new JLabel("Volunteer Dashboard");
        nameLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        nameLabel.setForeground(TITLE_COLOR_DARK);
        titleGroup.add(iconLabel);
        titleGroup.add(nameLabel);
        headerPanel.add(titleGroup, BorderLayout.WEST);
        JPanel userGroup = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        userGroup.setOpaque(false);
        JLabel userLabel = new JLabel("User: " + volunteerUsername);
        userLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        userLabel.setForeground(TEXT_COLOR_DARK);
        JButton btnLogout = new JButton("Logout");
        styleActionButton(btnLogout, "Logout and return to welcome screen");
        btnLogout.setPreferredSize(new Dimension(100, 30));
        btnLogout.setBackground(new Color(192, 57, 43));
        btnLogout.addMouseListener(new MouseAdapter() {
             @Override public void mouseEntered(MouseEvent e) { btnLogout.setBackground(new Color(231, 76, 60)); }
             @Override public void mouseExited(MouseEvent e) { btnLogout.setBackground(new Color(192, 57, 43)); }
        });
        btnLogout.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        userGroup.add(userLabel);
        userGroup.add(btnLogout);
        headerPanel.add(userGroup, BorderLayout.EAST);
        return headerPanel;
    }

    private JPanel createSearchFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setOpaque(false);
        JLabel lblFilterLocation = new JLabel("Location:");
        styleFormLabel(lblFilterLocation);
        String[] locations = {"Any Location", "City A", "City B", "Region C"};
        JComboBox<String> cmbLocation = new JComboBox<>(locations);
        styleComboBox(cmbLocation);
        JLabel lblFilterSkills = new JLabel("Skills:");
        styleFormLabel(lblFilterSkills);
        JTextField txtSkills = new JTextField(15);
        styleTextField(txtSkills);
        JLabel lblFilterTime = new JLabel("Commitment:");
        styleFormLabel(lblFilterTime);
        String[] times = {"Any Time", "Weekends", "Weekdays", "Flexible", "Event-Based"};
        JComboBox<String> cmbTime = new JComboBox<>(times);
        styleComboBox(cmbTime);
        JButton btnSearch = new JButton("Find Opportunities");
        styleActionButton(btnSearch, "Search for volunteer roles matching criteria");
        btnSearch.addActionListener(e -> {
             JOptionPane.showMessageDialog(this, "Search logic not implemented.", "Search", JOptionPane.INFORMATION_MESSAGE);
        });
        panel.add(lblFilterLocation);
        panel.add(cmbLocation);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterSkills);
        panel.add(txtSkills);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(lblFilterTime);
        panel.add(cmbTime);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(btnSearch);
        return panel;
    }

    private JTable createOpportunitiesTable() {
        String[] columnNames = {"Orphanage", "Opportunity", "Location", "Skills Needed", "Time Commitment", "Action"};
        Object[][] data = {
                {"Hope Children's Home", "Weekend Tutor", "City A", "Teaching, Patience", "Weekends", "Apply"},
                {"Bright Future Orphanage", "Event Helper", "City B", "Organizing, Energetic", "Event-Based", "Apply"},
                {"Little Angels Shelter", "After-School Care", "City A", "Childcare, First Aid", "Weekdays", "Applied"},
                {"Sunshine House", "Gardening Assistant", "Region C", "Gardening", "Flexible", "Apply"},
                {"Hope Children's Home", "Reading Buddy", "City A", "Reading, Communication", "Weekdays", "Apply"}
        };
        JTable table = new JTable(data, columnNames) {
             @Override
             public boolean isCellEditable(int row, int column) {
                 return column == 5 && "Apply".equals(getValueAt(row, column));
             }
        };
        styleTable(table);
        table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer(BUTTON_APPLY_BG));
        table.getColumnModel().getColumn(5).setCellEditor(new ButtonEditor(new JCheckBox(), BUTTON_APPLY_BG, () -> {
             int selectedRow = table.convertRowIndexToModel(table.getEditingRow());
             String oppName = (String) table.getModel().getValueAt(selectedRow, 1);
             String orphName = (String) table.getModel().getValueAt(selectedRow, 0);
             JOptionPane.showMessageDialog(this, "Apply for: " + oppName + " at " + orphName, "Apply", JOptionPane.INFORMATION_MESSAGE);
         }));
        table.getColumnModel().getColumn(0).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
        table.getColumnModel().getColumn(3).setPreferredWidth(180);
        table.getColumnModel().getColumn(4).setPreferredWidth(120);
        table.getColumnModel().getColumn(5).setPreferredWidth(90);
        return table;
    }

    private JPanel createStatusPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panel.setOpaque(false);
        panel.setBorder(new CompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 0, 0, BORDER_COLOR_DARK),
            new EmptyBorder(10, 5, 5, 5)
        ));
        JLabel lblStatus = new JLabel("Your Applications: 1 Pending (Little Angels Shelter)");
        lblStatus.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 13));
        lblStatus.setForeground(TEXT_COLOR_DARK);
        panel.add(lblStatus);
        return panel;
    }

    private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); label.setForeground(TEXT_COLOR_DARK); }
    private void styleTextField(JTextField field) { field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); field.setForeground(INPUT_FG_DARK); field.setBackground(INPUT_BG_DARK); Border p=new EmptyBorder(4,6,4,6); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); field.setCaretColor(Color.LIGHT_GRAY); }
    private void styleComboBox(JComboBox<?> comboBox) { comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 13)); comboBox.setForeground(INPUT_FG_DARK); comboBox.setBackground(INPUT_BG_DARK); comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1)); Object p=comboBox.getUI().getAccessibleChild(comboBox,0); if(p instanceof JPopupMenu){JPopupMenu pm=(JPopupMenu)p;pm.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); for(Component comp:pm.getComponents()){if(comp instanceof JScrollPane){JScrollPane sp=(JScrollPane)comp;sp.getViewport().setBackground(INPUT_BG_DARK);applyScrollbarUI(sp.getVerticalScrollBar()); Component l=sp.getViewport().getView(); if(l instanceof JList){((JList<?>)l).setBackground(INPUT_BG_DARK);((JList<?>)l).setForeground(INPUT_FG_DARK);((JList<?>)l).setSelectionBackground(BUTTON_BG_DARK);((JList<?>)l).setSelectionForeground(BUTTON_FG_DARK);}}}}}
    private void styleTable(JTable table) { table.setBackground(TABLE_CELL_BG); table.setForeground(TABLE_CELL_FG); table.setGridColor(TABLE_GRID_COLOR); table.setRowHeight(28); table.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13)); table.setFillsViewportHeight(true); table.setSelectionBackground(TABLE_CELL_SELECTED_BG); table.setSelectionForeground(TABLE_CELL_SELECTED_FG); table.setShowGrid(true); table.setIntercellSpacing(new Dimension(0,1)); JTableHeader h=table.getTableHeader(); h.setBackground(TABLE_HEADER_BG); h.setForeground(TABLE_HEADER_FG); h.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); h.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); h.setReorderingAllowed(true); h.setResizingAllowed(true); DefaultTableCellRenderer r=new DefaultTableCellRenderer(); r.setHorizontalAlignment(SwingConstants.LEFT); r.setVerticalAlignment(SwingConstants.CENTER); r.setBorder(new EmptyBorder(2,5,2,5)); for(int i=0;i<table.getColumnCount()-1;i++){table.getColumnModel().getColumn(i).setCellRenderer(r);} }
    private void styleScrollPane(JScrollPane scrollPane) { scrollPane.setOpaque(false); scrollPane.getViewport().setOpaque(false); scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR_DARK)); applyScrollbarUI(scrollPane.getVerticalScrollBar()); applyScrollbarUI(scrollPane.getHorizontalScrollBar()); }
    private void applyScrollbarUI(JScrollBar scrollBar) { scrollBar.setUI(new BasicScrollBarUI() { @Override protected void configureScrollBarColors(){this.thumbColor=BUTTON_BG_DARK; this.trackColor=DARK_BG_END;} @Override protected JButton createDecreaseButton(int o){return createZeroButton();} @Override protected JButton createIncreaseButton(int o){return createZeroButton();} private JButton createZeroButton(){JButton b=new JButton();b.setPreferredSize(new Dimension(0,0));b.setMaximumSize(new Dimension(0,0));b.setMinimumSize(new Dimension(0,0));return b;} @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r){g.setColor(thumbColor);g.fillRect(r.x,r.y,r.width,r.height);} @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r){g.setColor(trackColor);g.fillRect(r.x,r.y,r.width,r.height);} }); scrollBar.setUnitIncrement(16); }
    private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANS_SERIF,Font.BOLD,12)); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); btn.setForeground(BUTTON_FG_DARK); btn.setFocusPainted(false); btn.setBackground(BUTTON_BG_DARK); Border p=new EmptyBorder(6,12,6,12); btn.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()),p)); btn.addMouseListener(new MouseAdapter(){@Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTON_BG_DARK)){btn.setBackground(BUTTON_HOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){btn.setBackground(BUTTON_BG_DARK);}}}); }

    static class ButtonRenderer extends JButton implements javax.swing.table.TableCellRenderer {
        private Color defaultBg;
        public ButtonRenderer(Color background){
            setOpaque(true);
            this.defaultBg=background;
            setForeground(BUTTON_FG_DARK);
            setBackground(defaultBg);
            setBorder(new EmptyBorder(2,5,2,5));
            setFont(new Font(Font.SANS_SERIF,Font.BOLD,11));
        }
        @Override public Component getTableCellRendererComponent(JTable t,Object v,boolean s,boolean f,int r,int c){setText((v==null)?"":v.toString());setBackground(s?defaultBg.brighter():defaultBg);return this;}
    }

    static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private Runnable action;
        private Color bgColor;
        public ButtonEditor(JCheckBox c,Color bg,Runnable act){
            super(c);
            this.action=act;
            this.bgColor=bg;
            button=new JButton();
            button.setOpaque(true);
            button.setForeground(BUTTON_FG_DARK);
            button.setBackground(bgColor);
            button.setBorder(new EmptyBorder(2,5,2,5));
            button.setFont(new Font(Font.SANS_SERIF,Font.BOLD,11));
            button.addActionListener(e->fireEditingStopped());
        }
        @Override public Component getTableCellEditorComponent(JTable t,Object v,boolean s,int r,int c){label=(v==null)?"":v.toString();button.setText(label);isPushed=true;return button;}
        @Override public Object getCellEditorValue(){if(isPushed&&action!=null){action.run();}isPushed=false;return label;}
        @Override public boolean stopCellEditing(){isPushed=false;return super.stopCellEditing();}
        @Override protected void fireEditingStopped(){super.fireEditingStopped();}
    }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/WelcomePanel.java
```
/* Copyright (C) 2025 Jared Wisdom - All Rights Reserved */
package com.orphanagehub.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WelcomePanel extends JPanel {
    private static final Logger logger = LoggerFactory.getLogger(WelcomePanel.class);

    private static final Color DARKBGSTART = new Color(45, 52, 54);
    private static final Color DARKBGEND = new Color(35, 42, 44);
    private static final Color TITLECOLOR_DARK = new Color(223, 230, 233);
    private static final Color BUTTONBG_DARK = new Color(99, 110, 114);
    private static final Color BUTTONFG_DARK = Color.WHITE;
    private static final Color BUTTONHOVER_BG_DARK = new Color(120, 130, 134);

    public WelcomePanel(Runnable registerAction, Runnable loginAction) {
        setLayout(new BorderLayout());

        JPanel contentPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        contentPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Welcome to OrphanageHub");
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));
        lblTitle.setForeground(TITLECOLOR_DARK);

        JButton btnRegister = createButton("Register", registerAction);
        JButton btnLogin = createButton("Login", loginAction);

        contentPanel.add(lblTitle);
        contentPanel.add(btnRegister);
        contentPanel.add(btnLogin);

        add(contentPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARKBGSTART, 0, getHeight(), DARKBGEND);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private JButton createButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        button.setPreferredSize(new Dimension(150, 50));
        button.setForeground(BUTTONFG_DARK);
        button.setBackground(BUTTONBG_DARK);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setBorder(new CompoundBorder(BorderFactory.createLineBorder(BUTTONBG_DARK.darker()), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(e -> action.run());
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(BUTTONHOVER_BG_DARK);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(BUTTONBG_DARK);
            }
        });
        return button;
    }
}

```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/frmHome.png
*(binary file — contents not printed inline)*
Use --save-binaries to store the raw file in the output directory.

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/home.png
*(binary file — contents not printed inline)*
Use --save-binaries to store the raw file in the output directory.

================================================================================
Commit 3 — 62a3c469
Full hash: 62a3c46922f2fb4392f2c309b0a9b904042fc0cf
Author: jared-one
Date: 2025-08-28 11:40:36 +0200
Message: my latest changes [2]
Generated: 2025-09-06T08:46:23.475446

Files (gui-only):
- src/main/java/com/orphanagehub/gui/RegistrationPanel.java


------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/RegistrationPanel.java
```
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;

public class RegistrationPanel extends JPanel {

    private OrphanageHubApp mainApp;
    private String currentRole = "User"; // Default role

    // Input Fields
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtFullName;
    private JPasswordField txtPassword;
    private JPasswordField txtConfirmPassword;
    private JComboBox<String> cmbOrphanage; // Conditional field
    private JCheckBox chkTerms;

    // Components that need updating based on role
    private JLabel lblTitle;
    private JLabel lblRoleIcon; // Placeholder for role icon
    private JPanel orphanagePanel; // Panel holding the orphanage combo box

    // Re-define colors (Consider a shared constants interface/class later)
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTON_REGISTER_BG = new Color(60, 179, 113); // Medium Sea Green
    private static final Color BUTTON_REGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOX_COLOR = new Color(180, 180, 180);

    public RegistrationPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout()); // Main panel uses BorderLayout for scrollpane
        // Don't set border here, set on the inner form panel
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // Panel to hold the actual form elements using GridBagLayout
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false); // Make form panel transparent
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30)); // Padding inside scroll pane

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // --- Title and Role Icon ---
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);

        // Placeholder for Role Icon (using text symbol)
        lblRoleIcon = new JLabel("?"); // Placeholder symbol
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblRoleIcon);

        lblTitle = new JLabel("Register as " + currentRole); // Title updated in addNotify
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblTitle);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 5, 20, 5); // Bottom margin
        formPanel.add(titlePanel, gbc);

        // Reset constraints for form fields
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5); // Regular spacing

        // --- Form Fields ---
        int gridY = 1; // Start grid row counter

        // Username
        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername = new JTextField(25));
        // Email
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail = new JTextField(25));
        // Full Name
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName = new JTextField(25));
        // Password
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword = new JPasswordField(25));
        // Confirm Password
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword = new JPasswordField(25));

        // --- Conditional Orphanage Selection (for Staff) ---
        orphanagePanel = new JPanel(new BorderLayout(5, 0)); // Use BorderLayout for label and combo
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        // Simulate orphanage list (replace with DB query later)
        String[] orphanages = {"Select Orphanage...", "Hope Children's Home", "Bright Future Orphanage", "Little Angels Shelter"};
        cmbOrphanage = new JComboBox<>(orphanages);
        styleComboBox(cmbOrphanage); // Apply styling
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);

        gbc.gridx = 0;
        gbc.gridy = gridY++; // Assign current gridY, then increment
        gbc.gridwidth = 2; // Span both columns
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false); // Initially hidden

        // --- Terms and Conditions Checkbox ---
        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(15, 5, 15, 5);
        formPanel.add(chkTerms, gbc);

        // --- Action Buttons Panel ---
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        // Specific styling for primary action button
        btnRegister.setBackground(BUTTON_REGISTER_BG);
        btnRegister.addMouseListener(new MouseAdapter() { // Override hover for specific color
             @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_HOVER_BG); }
             @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_BG); }
        });
        btnRegister.addActionListener(e -> registerAction()); // Updated action

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTON_BG_DARK.darker()); // Keep Back button distinct
         btnBack.addMouseListener(new MouseAdapter() { // Custom hover for Back button
             @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); }
             @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(10, 5, 5, 5);
        formPanel.add(buttonPanel, gbc);

        // --- Scroll Pane Setup ---
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false); // Show main panel gradient
        scrollPane.getViewport().setOpaque(false); // Show main panel gradient
        scrollPane.setBorder(null); // No border for the scroll pane itself
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // No horizontal scroll
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        // Optional: Style the scrollbar (can be Look and Feel dependent)
        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK; // Use button color for thumb
                this.trackColor = DARK_BG_END;    // Use gradient end for track
            }
             @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
             @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
             private JButton createZeroButton() { // Hide arrow buttons
                 JButton button = new JButton();
                 button.setPreferredSize(new Dimension(0, 0));
                 button.setMinimumSize(new Dimension(0, 0));
                 button.setMaximumSize(new Dimension(0, 0));
                 return button;
             }
        });
        verticalScrollBar.setUnitIncrement(16); // Adjust scroll speed

        // Add the scroll pane to the main RegistrationPanel
        add(scrollPane, BorderLayout.CENTER);
    }

    // Helper to add label and field to the form panel
    private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        panel.add(label, gbc);

        styleTextField(field); // Apply common styling
        gbc.gridx = 1;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }

    // Helper to style form labels
    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXT_COLOR_DARK);
    }

    // Helper to style text/password fields
    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
                padding
        ));
        if (field instanceof JTextField) ((JTextField) field).setCaretColor(Color.LIGHT_GRAY);
        else if (field instanceof JPasswordField) ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
    }

     // Helper to style combo boxes
    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        // Border needs careful handling with ComboBox UI - simple line border might suffice
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
        // Try to make dropdown match (highly L&F dependent)
        Object popup = comboBox.getUI().getAccessibleChild(comboBox, 0);
        if (popup instanceof JPopupMenu) {
            JPopupMenu popupMenu = (JPopupMenu) popup;
            popupMenu.setBorder(new LineBorder(BORDER_COLOR_DARK));
            Component[] components = popupMenu.getComponents();
             for (Component comp : components) { // Style the scroller and list within the popup
                 if (comp instanceof JScrollPane) {
                     JScrollPane scrollPane = (JScrollPane) comp;
                     scrollPane.getViewport().setBackground(INPUT_BG_DARK);
                     scrollPane.getVerticalScrollBar().setUI(new javax.swing.plaf.basic.BasicScrollBarUI() { // Basic styling
                         @Override protected void configureScrollBarColors() {this.thumbColor = BUTTON_BG_DARK; this.trackColor = DARK_BG_END;}
                         @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
                         @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
                         private JButton createZeroButton() { JButton b = new JButton(); b.setPreferredSize(new Dimension(0,0)); return b; }
                     });
                     Component list = scrollPane.getViewport().getView();
                     if (list instanceof JList) {
                         ((JList<?>)list).setBackground(INPUT_BG_DARK);
                         ((JList<?>)list).setForeground(INPUT_FG_DARK);
                         ((JList<?>)list).setSelectionBackground(BUTTON_BG_DARK);
                         ((JList<?>)list).setSelectionForeground(BUTTON_FG_DARK);
                     }
                 }
             }
        }
    }

    // Helper to style checkboxes
    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOX_COLOR);
        checkBox.setOpaque(false);
        // Optional: could try to customize the check icon color if needed
    }


    // Adapted from LoginPanel - Consider moving to a utility class later
    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);

        // Default background set here, can be overridden for specific buttons
        btn.setBackground(BUTTON_BG_DARK);

        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));

        // Default hover/exit listener (can be overridden for specific buttons)
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                 if (!btn.getBackground().equals(BUTTON_REGISTER_BG)) // Don't override register button hover here
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                 if (!btn.getBackground().equals(BUTTON_REGISTER_BG)) // Don't override register button exit here
                    btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    // Updated registration logic
    private void registerAction() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        String password = new String(txtPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());

         // Simple validation example
        if (username.isEmpty() || email.isEmpty() || password.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Please fill in Username, Email, and Password.", "Registration Error", JOptionPane.ERROR_MESSAGE);
             return;
        }
        if (!password.equals(confirmPassword)) {
             JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
             return;
        }
         if (currentRole.equals("OrphanageStaff") && cmbOrphanage.getSelectedIndex() <= 0) {
             JOptionPane.showMessageDialog(this, "Orphanage Staff must select an orphanage.", "Registration Error", JOptionPane.ERROR_MESSAGE);
             return;
         }
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            new RegistrationService().registerUser(username, email, fullName, password, confirmPassword, currentRole);
            JOptionPane.showMessageDialog(this, "Registration successful for " + username + " as " + currentRole, "Success", JOptionPane.INFORMATION_MESSAGE);
            mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Registration Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Registration failed due to a database error.", "Registration Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    // Override addNotify to update role-specific elements when panel becomes visible
    @Override
    public void addNotify() {
        super.addNotify();
        currentRole = mainApp.getSelectedRole(); // Get role selected on Home screen
        lblTitle.setText("Register as " + currentRole);

        // Update role icon placeholder text/symbol
        switch (currentRole) {
            case "Donor":
                lblRoleIcon.setText("\u2764"); // Heavy Black Heart symbol
                lblRoleIcon.setForeground(new Color(255, 105, 180)); // Pinkish
                break;
            case "OrphanageStaff":
                lblRoleIcon.setText("\u2302"); // House symbol
                lblRoleIcon.setForeground(new Color(135, 206, 250)); // Light Sky Blue
                break;
            case "Volunteer":
                lblRoleIcon.setText("\u2605"); // Black Star symbol
                lblRoleIcon.setForeground(new Color(255, 215, 0)); // Gold
                 break;
            default:
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLE_COLOR_DARK);
                break;
        }

        // Show/hide orphanage selection based on role
        boolean isStaff = currentRole.equals("OrphanageStaff");
        orphanagePanel.setVisible(isStaff);

        // Request layout update if visibility changed
        revalidate();
        repaint();
    }
}
```

================================================================================
Commit 4 — eb6c6c23
Full hash: eb6c6c237425993273e624626295ceec238275f3
Author: jared-one
Date: 2025-08-28 18:35:48 +0200
Message: my latest changes[3]
Generated: 2025-09-06T08:46:23.489026

Files (gui-only):
- src/main/java/com/orphanagehub/gui/LoginPanel.java
- src/main/java/com/orphanagehub/gui/RegistrationPanel.java


------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/LoginPanel.java
```
// Updated LoginPanel.java with DB-integrated authentication
package com.orphanagehub.gui;

import com.orphanagehub.service.AuthService; // Ensure this import is added
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

public class LoginPanel extends JPanel {

    private OrphanageHubApp mainApp;
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private AuthService authService = new AuthService(); // Service instance for auth

    // --- Colors (unchanged) ---
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color LINK_COLOR = new Color(100, 180, 255);

    public LoginPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new GridBagLayout());
        setBorder(new EmptyBorder(40, 60, 40, 60));
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // --- Title ---
        JLabel lblTitle = new JLabel("User Login", SwingConstants.CENTER);
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2; gbc.weightx = 1.0; gbc.insets = new Insets(0, 5, 25, 5);
        add(lblTitle, gbc);
        gbc.gridwidth = 1; gbc.insets = new Insets(8, 5, 8, 5);

        // --- Username ---
        JLabel lblUsername = new JLabel("Username:"); styleFormLabel(lblUsername);
        gbc.gridx = 0; gbc.gridy = 1; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        add(lblUsername, gbc);
        txtUsername = new JTextField(20); styleTextField(txtUsername);
        gbc.gridx = 1; gbc.gridy = 1; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        add(txtUsername, gbc);

        // --- Password ---
        JLabel lblPassword = new JLabel("Password:"); styleFormLabel(lblPassword);
        gbc.gridx = 0; gbc.gridy = 2; gbc.anchor = GridBagConstraints.EAST; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        add(lblPassword, gbc);
        txtPassword = new JPasswordField(20); styleTextField(txtPassword);
        gbc.gridx = 1; gbc.gridy = 2; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        add(txtPassword, gbc);

        // --- Login Button ---
        JButton btnLogin = new JButton("Login"); styleActionButton(btnLogin, "Authenticate and access your dashboard");
        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; gbc.fill = GridBagConstraints.NONE; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(20, 5, 10, 5);
        add(btnLogin, gbc);

        // --- Links Panel ---
        JPanel linksPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0)); linksPanel.setOpaque(false);
        JLabel lblForgotPassword = createHyperlinkLabel("Forgot Password?"); lblForgotPassword.setToolTipText("Click here to reset your password");
        lblForgotPassword.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { JOptionPane.showMessageDialog(LoginPanel.this, "Password reset functionality not yet implemented.", "Forgot Password", JOptionPane.INFORMATION_MESSAGE); }});
        JLabel lblRegister = createHyperlinkLabel("Need an account? Register"); lblRegister.setToolTipText("Click here to go to the registration page");
        lblRegister.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { mainApp.navigateTo(OrphanageHubApp.REGISTRATION_PANEL); }});
        linksPanel.add(lblForgotPassword); linksPanel.add(lblRegister);
        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(5, 5, 15, 5);
        add(linksPanel, gbc);

        // --- Back Button ---
        JButton btnBack = new JButton("Back"); styleActionButton(btnBack, "Return to the welcome screen"); btnBack.setBackground(BUTTON_BG_DARK.darker());
        btnBack.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); } @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }});
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));
        gbc.gridx = 0; gbc.gridy = 5; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER; gbc.insets = new Insets(10, 5, 5, 5);
        add(btnBack, gbc);

        // Updated Action Listener with DB integration
        btnLogin.addActionListener(e -> {
            String username = txtUsername.getText().trim();
            String password = new String(txtPassword.getPassword());

            if (username.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username and Password are required.", "Login Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                if (authService.authenticate(username, password)) {
                    String role = authService.getUserRole(username);
                    String targetDashboard = getDashboardForRole(role);
                    System.out.println("Login Success! Target: " + targetDashboard);
                    mainApp.showDashboard(targetDashboard);
                } else {
                    System.out.println("Login Failed for user: " + username);
                    JOptionPane.showMessageDialog(this, "Invalid Username or Password.", "Login Failed", JOptionPane.ERROR_MESSAGE);
                    txtPassword.setText("");
                    txtUsername.requestFocusInWindow();
                }
            } catch (Exception ex) {
                System.err.println("Authentication error: " + ex.getMessage());
                JOptionPane.showMessageDialog(this, "Login error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    // Helper to map role to dashboard constant
    private String getDashboardForRole(String role) {
        switch (role) {
            case "OrphanageStaff": return OrphanageHubApp.ORPHANAGE_DASHBOARD_PANEL;
            case "Donor": return OrphanageHubApp.DONOR_DASHBOARD_PANEL;
            case "Volunteer": return OrphanageHubApp.VOLUNTEER_DASHBOARD_PANEL;
            case "Admin": return OrphanageHubApp.ADMIN_DASHBOARD_PANEL;
            default: return OrphanageHubApp.HOME_PANEL; // Fallback
        }
    }

    // --- Styling Helper Methods (Unchanged) ---
    private void styleFormLabel(JLabel label) { label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); label.setForeground(TEXT_COLOR_DARK); }
    private void styleTextField(JComponent field) { field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14)); field.setForeground(INPUT_FG_DARK); field.setBackground(INPUT_BG_DARK); Border p=new EmptyBorder(5,8,5,8); field.setBorder(new CompoundBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK,1),p)); if(field instanceof JTextField)((JTextField)field).setCaretColor(Color.LIGHT_GRAY); else if(field instanceof JPasswordField)((JPasswordField)field).setCaretColor(Color.LIGHT_GRAY); }
    private JLabel createHyperlinkLabel(String text) { JLabel l=new JLabel("<html><u>"+text+"</u></html>"); l.setForeground(LINK_COLOR); l.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,12)); l.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); return l; }
    private void styleActionButton(JButton btn, String tooltip) { btn.setFont(new Font(Font.SANS_SERIF,Font.BOLD,14)); btn.setPreferredSize(new Dimension(130,40)); btn.setToolTipText(tooltip); btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); btn.setBackground(BUTTON_BG_DARK); btn.setForeground(BUTTON_FG_DARK); btn.setFocusPainted(false); Border l=BorderFactory.createLineBorder(BUTTON_BG_DARK.darker()); Border p=new EmptyBorder(5,15,5,15); btn.setBorder(new CompoundBorder(l,p)); btn.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e){if(btn.getBackground().equals(BUTTON_BG_DARK)){btn.setBackground(BUTTON_HOVER_BG_DARK);}} @Override public void mouseExited(MouseEvent e){if(btn.getBackground().equals(BUTTON_HOVER_BG_DARK)){btn.setBackground(BUTTON_BG_DARK);}} }); }
}
```

------------------------------------------------------------
File: src/main/java/com/orphanagehub/gui/RegistrationPanel.java
```
package com.orphanagehub.gui;

import com.orphanagehub.service.RegistrationService;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class RegistrationPanel extends JPanel {

    private OrphanageHubApp mainApp;
    private String currentRole = "User"; // Default role

    // Input Fields
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtFullName;
    private JPasswordField txtPassword;
    private JPasswordField txtConfirmPassword;
    private JComboBox<String> cmbOrphanage; // Conditional field
    private JCheckBox chkTerms;

    // Components that need updating based on role
    private JLabel lblTitle;
    private JLabel lblRoleIcon; // Placeholder for role icon
    private JPanel orphanagePanel; // Panel holding the orphanage combo box

    // Re-define colors (Consider a shared constants interface/class later)
    private static final Color DARK_BG_START = new Color(45, 52, 54);
    private static final Color DARK_BG_END = new Color(35, 42, 44);
    private static final Color TITLE_COLOR_DARK = new Color(223, 230, 233);
    private static final Color TEXT_COLOR_DARK = new Color(200, 200, 200);
    private static final Color BORDER_COLOR_DARK = new Color(80, 80, 80);
    private static final Color INPUT_BG_DARK = new Color(60, 60, 60);
    private static final Color INPUT_FG_DARK = new Color(220, 220, 220);
    private static final Color INPUT_BORDER_DARK = new Color(90, 90, 90);
    private static final Color BUTTON_BG_DARK = new Color(99, 110, 114);
    private static final Color BUTTON_FG_DARK = Color.WHITE;
    private static final Color BUTTON_HOVER_BG_DARK = new Color(120, 130, 134);
    private static final Color BUTTON_REGISTER_BG = new Color(60, 179, 113); // Medium Sea Green
    private static final Color BUTTON_REGISTER_HOVER_BG = new Color(70, 190, 123);
    private static final Color CHECKBOX_COLOR = new Color(180, 180, 180);

    public RegistrationPanel(OrphanageHubApp app) {
        this.mainApp = app;
        setLayout(new BorderLayout()); // Main panel uses BorderLayout for scrollpane
        // Don't set border here, set on the inner form panel
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        GradientPaint gp = new GradientPaint(0, 0, DARK_BG_START, 0, getHeight(), DARK_BG_END);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    private void initComponents() {
        // Panel to hold the actual form elements using GridBagLayout
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false); // Make form panel transparent
        formPanel.setBorder(new EmptyBorder(20, 30, 20, 30)); // Padding inside scroll pane

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // --- Title and Role Icon ---
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        titlePanel.setOpaque(false);

        // Placeholder for Role Icon (using text symbol)
        lblRoleIcon = new JLabel("?"); // Placeholder symbol
        lblRoleIcon.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        lblRoleIcon.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblRoleIcon);

        lblTitle = new JLabel("Register as " + currentRole); // Title updated in addNotify
        lblTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 28));
        lblTitle.setForeground(TITLE_COLOR_DARK);
        titlePanel.add(lblTitle);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 5, 20, 5); // Bottom margin
        formPanel.add(titlePanel, gbc);

        // Reset constraints for form fields
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        gbc.insets = new Insets(6, 5, 6, 5); // Regular spacing

        // --- Form Fields ---
        int gridY = 1; // Start grid row counter

        // Username
        addFormField(formPanel, gbc, gridY++, "Username:", txtUsername = new JTextField(25));
        // Email
        addFormField(formPanel, gbc, gridY++, "Email:", txtEmail = new JTextField(25));
        // Full Name
        addFormField(formPanel, gbc, gridY++, "Full Name:", txtFullName = new JTextField(25));
        // Password
        addFormField(formPanel, gbc, gridY++, "Password:", txtPassword = new JPasswordField(25));
        // Confirm Password
        addFormField(formPanel, gbc, gridY++, "Confirm Password:", txtConfirmPassword = new JPasswordField(25));

        // --- Conditional Orphanage Selection (for Staff) ---
        orphanagePanel = new JPanel(new BorderLayout(5, 0)); // Use BorderLayout for label and combo
        orphanagePanel.setOpaque(false);
        JLabel lblOrphanage = new JLabel("Orphanage:");
        styleFormLabel(lblOrphanage);
        // Simulate orphanage list (replace with DB query later)
        String[] orphanages = {"Select Orphanage...", "Hope Children's Home", "Bright Future Orphanage", "Little Angels Shelter"};
        cmbOrphanage = new JComboBox<>(orphanages);
        styleComboBox(cmbOrphanage); // Apply styling
        orphanagePanel.add(lblOrphanage, BorderLayout.WEST);
        orphanagePanel.add(cmbOrphanage, BorderLayout.CENTER);

        gbc.gridx = 0;
        gbc.gridy = gridY++; // Assign current gridY, then increment
        gbc.gridwidth = 2; // Span both columns
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(orphanagePanel, gbc);
        orphanagePanel.setVisible(false); // Initially hidden

        // --- Terms and Conditions Checkbox ---
        chkTerms = new JCheckBox("I agree to the Terms of Service and Privacy Policy");
        styleCheckbox(chkTerms);
        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(15, 5, 15, 5);
        formPanel.add(chkTerms, gbc);

        // --- Action Buttons Panel ---
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        buttonPanel.setOpaque(false);

        JButton btnRegister = new JButton("Register");
        styleActionButton(btnRegister, "Create your account");
        // Specific styling for primary action button
        btnRegister.setBackground(BUTTON_REGISTER_BG);
        btnRegister.addMouseListener(new MouseAdapter() { // Override hover for specific color
             @Override public void mouseEntered(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_HOVER_BG); }
             @Override public void mouseExited(MouseEvent e) { btnRegister.setBackground(BUTTON_REGISTER_BG); }
        });
        btnRegister.addActionListener(e -> registerAction()); // Updated action

        JButton btnBack = new JButton("Back");
        styleActionButton(btnBack, "Return to the welcome screen");
        btnBack.setBackground(BUTTON_BG_DARK.darker()); // Keep Back button distinct
         btnBack.addMouseListener(new MouseAdapter() { // Custom hover for Back button
             @Override public void mouseEntered(MouseEvent e) { btnBack.setBackground(BUTTON_HOVER_BG_DARK); }
             @Override public void mouseExited(MouseEvent e) { btnBack.setBackground(BUTTON_BG_DARK.darker()); }
        });
        btnBack.addActionListener(e -> mainApp.navigateTo(OrphanageHubApp.HOME_PANEL));

        buttonPanel.add(btnRegister);
        buttonPanel.add(btnBack);

        gbc.gridx = 0;
        gbc.gridy = gridY++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(10, 5, 5, 5);
        formPanel.add(buttonPanel, gbc);

        // --- Scroll Pane Setup ---
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setOpaque(false); // Show main panel gradient
        scrollPane.getViewport().setOpaque(false); // Show main panel gradient
        scrollPane.setBorder(null); // No border for the scroll pane itself
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // No horizontal scroll
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        // Optional: Style the scrollbar (can be Look and Feel dependent)
        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override protected void configureScrollBarColors() {
                this.thumbColor = BUTTON_BG_DARK; // Use button color for thumb
                this.trackColor = DARK_BG_END;    // Use gradient end for track
            }
             @Override protected JButton createDecreaseButton(int orientation) { return createZeroButton(); }
             @Override protected JButton createIncreaseButton(int orientation) { return createZeroButton(); }
             private JButton createZeroButton() { // Hide arrow buttons
                 JButton button = new JButton();
                 button.setPreferredSize(new Dimension(0, 0));
                 button.setMinimumSize(new Dimension(0, 0));
                 button.setMaximumSize(new Dimension(0, 0));
                 return button;
             }
        });
        verticalScrollBar.setUnitIncrement(16); // Adjust scroll speed

        // Add the scroll pane to the main RegistrationPanel
        add(scrollPane, BorderLayout.CENTER);
    }

    // Helper to add label and field to the form panel
    private void addFormField(JPanel panel, GridBagConstraints gbc, int gridY, String labelText, JComponent field) {
        JLabel label = new JLabel(labelText);
        styleFormLabel(label);
        gbc.gridx = 0;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        panel.add(label, gbc);

        styleTextField(field); // Apply common styling
        gbc.gridx = 1;
        gbc.gridy = gridY;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }

    // Helper to style form labels
    private void styleFormLabel(JLabel label) {
        label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        label.setForeground(TEXT_COLOR_DARK);
    }

    // Helper to style text/password fields
    private void styleTextField(JComponent field) {
        field.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        field.setForeground(INPUT_FG_DARK);
        field.setBackground(INPUT_BG_DARK);
        Border padding = new EmptyBorder(5, 8, 5, 8);
        field.setBorder(new CompoundBorder(
                BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1),
                padding
        ));
        if (field instanceof JTextField) ((JTextField) field).setCaretColor(Color.LIGHT_GRAY);
        else if (field instanceof JPasswordField) ((JPasswordField) field).setCaretColor(Color.LIGHT_GRAY);
    }

     // Helper to style combo boxes
    private void styleComboBox(JComboBox<?> comboBox) {
        comboBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
        comboBox.setForeground(INPUT_FG_DARK);
        comboBox.setBackground(INPUT_BG_DARK);
        // Border needs careful handling with ComboBox UI - simple line border might suffice
        comboBox.setBorder(BorderFactory.createLineBorder(INPUT_BORDER_DARK, 1));
        // Try to make dropdown match (highly L&F dependent)
        Object popup = comboBox.getUI().getAccessibleChild(comboBox, 0);
        if (popup instanceof JPopupMenu) {
            JPopupMenu popupMenu = (JPopupMenu) popup;
            popupMenu.setBorder(new LineBorder(BORDER_COLOR_DARK));
            Component[] components = popupMenu.getComponents();
             for (Component comp : components) { // Style the scroller and list within the popup
                 if (comp instanceof JScrollPane) {
                     JScrollPane scrollPane = (JScrollPane) comp;
                     scrollPane.getViewport().setBackground(INPUT_BG_DARK);
                     scrollPane.getVerticalScrollBar().setUI(new javax.swing.plaf.basic.BasicScrollBarUI() { // Basic styling
                         @Override protected void configureScrollBarColors() {this.thumbColor = BUTTON_BG_DARK; this.trackColor = DARK_BG_END;}
                         @Override protected JButton createDecreaseButton(int o) { return createZeroButton(); }
                         @Override protected JButton createIncreaseButton(int o) { return createZeroButton(); }
                         private JButton createZeroButton() { JButton b = new JButton(); b.setPreferredSize(new Dimension(0,0)); return b; }
                     });
                     Component list = scrollPane.getViewport().getView();
                     if (list instanceof JList) {
                         ((JList<?>)list).setBackground(INPUT_BG_DARK);
                         ((JList<?>)list).setForeground(INPUT_FG_DARK);
                         ((JList<?>)list).setSelectionBackground(BUTTON_BG_DARK);
                         ((JList<?>)list).setSelectionForeground(BUTTON_FG_DARK);
                     }
                 }
             }
        }
    }

    // Helper to style checkboxes
    private void styleCheckbox(JCheckBox checkBox) {
        checkBox.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        checkBox.setForeground(CHECKBOX_COLOR);
        checkBox.setOpaque(false);
        // Optional: could try to customize the check icon color if needed
    }


    // Adapted from LoginPanel - Consider moving to a utility class later
    private void styleActionButton(JButton btn, String tooltip) {
        btn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        btn.setPreferredSize(new Dimension(130, 40));
        btn.setToolTipText(tooltip);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setForeground(BUTTON_FG_DARK);
        btn.setFocusPainted(false);

        // Default background set here, can be overridden for specific buttons
        btn.setBackground(BUTTON_BG_DARK);

        Border line = BorderFactory.createLineBorder(BUTTON_BG_DARK.darker());
        Border padding = new EmptyBorder(5, 15, 5, 15);
        btn.setBorder(new CompoundBorder(line, padding));

        // Default hover/exit listener (can be overridden for specific buttons)
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                 if (!btn.getBackground().equals(BUTTON_REGISTER_BG)) // Don't override register button hover here
                    btn.setBackground(BUTTON_HOVER_BG_DARK);
            }
            @Override
            public void mouseExited(MouseEvent evt) {
                 if (!btn.getBackground().equals(BUTTON_REGISTER_BG)) // Don't override register button exit here
                    btn.setBackground(BUTTON_BG_DARK);
            }
        });
    }

    // FINAL FIXED: Correct parameter count - service expects 6 parameters
    private void registerAction() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String fullName = txtFullName.getText().trim();
        String password = new String(txtPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());

        // Simple validation
        if (username.isEmpty() || email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in Username, Email, and Password.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (currentRole.equals("OrphanageStaff") && cmbOrphanage.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Orphanage Staff must select an orphanage.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!chkTerms.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must agree to the Terms of Service.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // The service expects 6 parameters and handles hashing internally
            // Parameters: username, email, fullName, password, confirmPassword, currentRole
            new RegistrationService().registerUser(username, email, fullName, password, confirmPassword, currentRole);
            
            JOptionPane.showMessageDialog(this, "Registration successful for " + username + " as " + currentRole, "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Clear form fields after successful registration
            txtUsername.setText("");
            txtEmail.setText("");
            txtFullName.setText("");
            txtPassword.setText("");
            txtConfirmPassword.setText("");
            chkTerms.setSelected(false);
            if (cmbOrphanage != null) {
                cmbOrphanage.setSelectedIndex(0);
            }
            
            // Navigate to login
            mainApp.navigateTo(OrphanageHubApp.LOGIN_PANEL);
            
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Registration Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Log the actual error for debugging
            JOptionPane.showMessageDialog(this, "Registration failed: " + e.getMessage(), "Registration Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // This will show in console
        }
    }


    // Override addNotify to update role-specific elements when panel becomes visible
    @Override
    public void addNotify() {
        super.addNotify();
        currentRole = mainApp.getSelectedRole(); // Get role selected on Home screen
        lblTitle.setText("Register as " + currentRole);

        // Update role icon placeholder text/symbol
        switch (currentRole) {
            case "Donor":
                lblRoleIcon.setText("\u2764"); // Heavy Black Heart symbol
                lblRoleIcon.setForeground(new Color(255, 105, 180)); // Pinkish
                break;
            case "OrphanageStaff":
                lblRoleIcon.setText("\u2302"); // House symbol
                lblRoleIcon.setForeground(new Color(135, 206, 250)); // Light Sky Blue
                break;
            case "Volunteer":
                lblRoleIcon.setText("\u2605"); // Black Star symbol
                lblRoleIcon.setForeground(new Color(255, 215, 0)); // Gold
                 break;
            default:
                lblRoleIcon.setText("?");
                lblRoleIcon.setForeground(TITLE_COLOR_DARK);
                break;
        }

        // Show/hide orphanage selection based on role
        boolean isStaff = currentRole.equals("OrphanageStaff");
        orphanagePanel.setVisible(isStaff);

        // Request layout update if visibility changed
        revalidate();
        repaint();
    }
}
```
```

================================================================================
Total: 11 files | 402,313 bytes
Languages: java, text

